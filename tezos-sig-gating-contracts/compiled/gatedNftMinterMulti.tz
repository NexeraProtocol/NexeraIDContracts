{ parameter
    (or (list %update_operators
           (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
               (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))
        (or (pair %balance_of
               (list %requests (pair (address %owner) (nat %token_id)))
               (contract %callback
                  (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
            (or (list %transfer
                   (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))
                (or (pair %mint (address %owner) (nat %token_id))
                    (or (pair %mint_gated (address %owner) (nat %token_id))
                        (or (pair %burn_gated (address %owner) (nat %token_id))
                            (or (pair %mint_or_burn_gated
                                   (address %userAddress)
                                   (nat %expirationBlock)
                                   (string %functionName)
                                   (bytes %functionArgs)
                                   (key %signerPublicKey)
                                   (signature %signature))
                                (address %setSigner)))))))) ;
  storage
    (pair (address %admin)
          (address %signerAddress)
          (big_map %nonces address nat)
          (pair %siggated_extension
             (address %extension)
             (big_map %ledger nat address)
             (big_map %operators (pair address address) (set nat))
             (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
             (big_map %metadata string bytes))) ;
  code { LAMBDA
           address
           unit
           { PUSH string "The sender can only manage operators for his own token" ;
             SENDER ;
             DIG 2 ;
             COMPARE ;
             EQ ;
             IF { DROP ; UNIT } { FAILWITH } } ;
         LAMBDA
           (pair (big_map nat (pair nat (map string bytes))) nat)
           unit
           { UNPAIR ;
             SWAP ;
             GET ;
             IF_NONE { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } { DROP } ;
             UNIT } ;
         LAMBDA
           (pair (big_map nat address) nat address)
           bool
           { UNPAIR 3 ;
             SWAP ;
             GET ;
             IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
             COMPARE ;
             EQ } ;
         PUSH string "InvalidEntrypointArguments" ;
         LAMBDA
           bytes
           bytes
           { DUP ;
             SIZE ;
             PUSH nat 4 ;
             DUP 2 ;
             COMPARE ;
             LE ;
             IF {} { PUSH string "failed assertion" ; FAILWITH } ;
             PUSH nat 4 ;
             SWAP ;
             DIG 2 ;
             PAIR 3 ;
             LEFT bytes ;
             LOOP_LEFT
               { UNPAIR 3 ;
                 DUP 3 ;
                 DUP 3 ;
                 COMPARE ;
                 EQ ;
                 IF { SWAP ; DIG 2 ; DROP 2 ; RIGHT (pair bytes nat nat) }
                    { DIG 2 ;
                      PUSH nat 1 ;
                      DIG 3 ;
                      ADD ;
                      DIG 2 ;
                      PUSH bytes 0x00 ;
                      CONCAT ;
                      PAIR 3 ;
                      LEFT bytes } } } ;
         LAMBDA
           (pair (lambda (pair (big_map nat (pair nat (map string bytes))) nat) unit)
                 (pair (pair address nat)
                       address
                       address
                       (big_map address nat)
                       (pair address
                             (big_map nat address)
                             (big_map (pair address address) (set nat))
                             (big_map nat (pair nat (map string bytes)))
                             (big_map string bytes))))
           (pair (list operation)
                 address
                 address
                 (big_map address nat)
                 (pair address
                       (big_map nat address)
                       (big_map (pair address address) (set nat))
                       (big_map nat (pair nat (map string bytes)))
                       (big_map string bytes)))
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             DUP ;
             CDR ;
             DUP 3 ;
             GET 6 ;
             GET 7 ;
             PAIR ;
             DUP 4 ;
             SWAP ;
             EXEC ;
             DROP ;
             DUP 2 ;
             GET 6 ;
             GET 3 ;
             DUP 2 ;
             CDR ;
             GET ;
             IF_NONE { PUSH bool True } { DROP ; PUSH bool False } ;
             IF {} { PUSH string "failed assertion" ; FAILWITH } ;
             DUP ;
             CDR ;
             DUP 3 ;
             GET 6 ;
             DUP 2 ;
             DUP 2 ;
             GET 7 ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             DROP ;
             DIG 3 ;
             DUP 2 ;
             DIG 2 ;
             GET 3 ;
             DIG 4 ;
             CAR ;
             SOME ;
             DIG 4 ;
             UPDATE ;
             UPDATE 3 ;
             UPDATE 6 ;
             NIL operation ;
             PAIR } ;
         DUP 5 ;
         APPLY ;
         DIG 6 ;
         UNPAIR ;
         IF_LEFT
           { DIG 2 ;
             DIG 3 ;
             DIG 4 ;
             DIG 5 ;
             DIG 6 ;
             DROP 5 ;
             DUP 2 ;
             GET 6 ;
             DUP ;
             GET 5 ;
             DIG 2 ;
             ITER { IF_LEFT
                      { UNPAIR 3 ;
                        DUP 2 ;
                        DUP 2 ;
                        COMPARE ;
                        EQ ;
                        IF { DROP 3 }
                           { DUP ;
                             DUP 8 ;
                             SWAP ;
                             EXEC ;
                             DROP ;
                             DUP 4 ;
                             DIG 4 ;
                             DUP 4 ;
                             DUP 4 ;
                             PAIR ;
                             GET ;
                             IF_NONE { EMPTY_SET nat } {} ;
                             PUSH bool True ;
                             DIG 5 ;
                             UPDATE ;
                             SOME ;
                             DIG 3 ;
                             DIG 3 ;
                             PAIR ;
                             UPDATE } }
                      { UNPAIR 3 ;
                        DUP 2 ;
                        DUP 2 ;
                        COMPARE ;
                        EQ ;
                        IF { DROP 3 }
                           { DUP ;
                             DUP 8 ;
                             SWAP ;
                             EXEC ;
                             DROP ;
                             DUP 4 ;
                             DIG 4 ;
                             DUP 4 ;
                             DUP 4 ;
                             PAIR ;
                             GET ;
                             IF_NONE
                               { DIG 3 ; DROP ; NONE (set nat) }
                               { PUSH bool False ;
                                 DIG 5 ;
                                 UPDATE ;
                                 PUSH nat 0 ;
                                 DUP 2 ;
                                 SIZE ;
                                 COMPARE ;
                                 EQ ;
                                 IF { DROP ; NONE (set nat) } { SOME } } ;
                             DIG 3 ;
                             DIG 3 ;
                             PAIR ;
                             UPDATE } } } ;
             DIG 3 ;
             DROP ;
             UPDATE 5 ;
             UPDATE 6 ;
             NIL operation ;
             PAIR }
           { DIG 7 ;
             DROP ;
             IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DROP 3 ;
                 DUP 2 ;
                 GET 6 ;
                 SWAP ;
                 UNPAIR ;
                 MAP { DUP ;
                       UNPAIR ;
                       DUP 2 ;
                       DUP 6 ;
                       GET 7 ;
                       PAIR ;
                       DUP 9 ;
                       SWAP ;
                       EXEC ;
                       DROP ;
                       SWAP ;
                       DUP 5 ;
                       GET 3 ;
                       PAIR 3 ;
                       DUP 6 ;
                       SWAP ;
                       EXEC ;
                       IF { PUSH nat 1 } { PUSH nat 0 } ;
                       SWAP ;
                       PAIR } ;
                 DIG 4 ;
                 DIG 5 ;
                 DROP 2 ;
                 SWAP ;
                 PUSH mutez 0 ;
                 DIG 2 ;
                 TRANSFER_TOKENS ;
                 SWAP ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 DUG 2 ;
                 UPDATE 6 ;
                 SWAP ;
                 PAIR }
               { IF_LEFT
                   { DIG 2 ;
                     DIG 3 ;
                     DIG 4 ;
                     DROP 3 ;
                     DUP 2 ;
                     GET 6 ;
                     DUP ;
                     GET 3 ;
                     DIG 2 ;
                     ITER { UNPAIR ;
                            DUG 2 ;
                            ITER { UNPAIR 3 ;
                                   DIG 2 ;
                                   DROP ;
                                   DUP 2 ;
                                   DUP 6 ;
                                   GET 7 ;
                                   PAIR ;
                                   DUP 9 ;
                                   SWAP ;
                                   EXEC ;
                                   DROP ;
                                   SENDER ;
                                   DUP 5 ;
                                   DUP 2 ;
                                   COMPARE ;
                                   EQ ;
                                   IF { DROP }
                                      { DUP 6 ;
                                        GET 5 ;
                                        SWAP ;
                                        DUP 6 ;
                                        PAIR ;
                                        GET ;
                                        IF_NONE { EMPTY_SET nat } {} ;
                                        DUP 3 ;
                                        MEM ;
                                        IF {} { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } ;
                                   PUSH string "FA2_INSUFFICIENT_BALANCE" ;
                                   DUP 5 ;
                                   DUP 4 ;
                                   DUP 6 ;
                                   PAIR 3 ;
                                   DUP 9 ;
                                   SWAP ;
                                   EXEC ;
                                   IF { DROP } { FAILWITH } ;
                                   DIG 2 ;
                                   SWAP ;
                                   SOME ;
                                   DIG 2 ;
                                   UPDATE } ;
                            SWAP ;
                            DROP } ;
                     DIG 3 ;
                     DIG 4 ;
                     DROP 2 ;
                     UPDATE 3 ;
                     UPDATE 6 ;
                     NIL operation ;
                     PAIR }
                   { DIG 5 ;
                     DIG 6 ;
                     DROP 2 ;
                     IF_LEFT
                       { DIG 3 ;
                         DIG 4 ;
                         DROP 2 ;
                         DUP 2 ;
                         GET 6 ;
                         CAR ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                         PAIR ;
                         EXEC }
                       { IF_LEFT
                           { DIG 3 ;
                             DIG 4 ;
                             DROP 2 ;
                             SELF_ADDRESS ;
                             SENDER ;
                             COMPARE ;
                             EQ ;
                             IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                             PAIR ;
                             EXEC }
                           { IF_LEFT
                               { DIG 3 ;
                                 DIG 4 ;
                                 DROP 2 ;
                                 SELF_ADDRESS ;
                                 SENDER ;
                                 COMPARE ;
                                 EQ ;
                                 IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                                 PAIR ;
                                 EXEC }
                               { DIG 2 ;
                                 DROP ;
                                 IF_LEFT
                                   { DUP ;
                                     UNPAIR 6 ;
                                     DIG 5 ;
                                     DIG 5 ;
                                     DIG 5 ;
                                     DIG 5 ;
                                     SELF_ADDRESS ;
                                     DIG 6 ;
                                     DIG 6 ;
                                     CHAIN_ID ;
                                     DUP 10 ;
                                     GET 5 ;
                                     DUP 3 ;
                                     GET ;
                                     IF_NONE
                                       { DUP 10 ; GET 5 ; PUSH nat 1 ; SOME ; DUP 4 ; UPDATE ; PUSH nat 0 }
                                       { DUP 11 ; GET 5 ; PUSH nat 1 ; DUP 3 ; ADD ; SOME ; DUP 5 ; UPDATE ; SWAP } ;
                                     DUP 3 ;
                                     PACK ;
                                     DUP 5 ;
                                     PACK ;
                                     DUP 3 ;
                                     PACK ;
                                     DUP 8 ;
                                     PACK ;
                                     DUP 13 ;
                                     PACK ;
                                     DUP 11 ;
                                     PACK ;
                                     DUP 13 ;
                                     PACK ;
                                     DUP 15 ;
                                     SWAP ;
                                     CONCAT ;
                                     SWAP ;
                                     CONCAT ;
                                     DIG 2 ;
                                     CONCAT ;
                                     DIG 2 ;
                                     CONCAT ;
                                     DIG 2 ;
                                     CONCAT ;
                                     DIG 2 ;
                                     CONCAT ;
                                     SWAP ;
                                     CONCAT ;
                                     KECCAK ;
                                     DUP 10 ;
                                     HASH_KEY ;
                                     IMPLICIT_ACCOUNT ;
                                     ADDRESS ;
                                     PUSH string "BlockExpired" ;
                                     DUP 8 ;
                                     LEVEL ;
                                     COMPARE ;
                                     LT ;
                                     IF { DROP } { FAILWITH } ;
                                     DUP 14 ;
                                     GET 3 ;
                                     PACK ;
                                     PUSH bytes 0x00 ;
                                     SWAP ;
                                     PUSH nat 1 ;
                                     PUSH nat 6 ;
                                     SLICE ;
                                     IF_NONE { PUSH string "SLICE" ; FAILWITH } {} ;
                                     COMPARE ;
                                     EQ ;
                                     NOT ;
                                     IF { DROP ;
                                          DUP 13 ;
                                          GET 3 ;
                                          DUP 12 ;
                                          DUP 3 ;
                                          DUP 13 ;
                                          PAIR 3 ;
                                          VIEW "isValidSignature" bool ;
                                          IF_NONE
                                            { PUSH string "MissingIsValidSignatureView" ; FAILWITH }
                                            { IF {} { PUSH string "failed assertion" ; FAILWITH } } }
                                        { DUP 14 ;
                                          GET 3 ;
                                          SWAP ;
                                          COMPARE ;
                                          EQ ;
                                          IF {} { PUSH string "KeyMissmatchSignerAddress" ; FAILWITH } } ;
                                     DIG 10 ;
                                     DUP 11 ;
                                     CHECK_SIGNATURE ;
                                     IF {} { PUSH string "InvalidSignature" ; FAILWITH } ;
                                     DIG 7 ;
                                     DIG 7 ;
                                     DIG 7 ;
                                     DIG 8 ;
                                     DIG 8 ;
                                     DIG 5 ;
                                     DIG 8 ;
                                     DIG 8 ;
                                     PAIR 8 ;
                                     EMIT %SignatureVerified (pair chain_id address nat nat key address string bytes) ;
                                     DIG 3 ;
                                     DIG 2 ;
                                     UPDATE 5 ;
                                     NIL operation ;
                                     DIG 2 ;
                                     CONS ;
                                     DUP 3 ;
                                     GET 7 ;
                                     DIG 3 ;
                                     GET 5 ;
                                     SELF_ADDRESS ;
                                     PAIR 3 ;
                                     SELF %burn_gated ;
                                     SELF %mint_gated ;
                                     DIG 2 ;
                                     UNPAIR 3 ;
                                     SELF_ADDRESS ;
                                     COMPARE ;
                                     EQ ;
                                     IF { DUP 3 ;
                                          PACK ;
                                          DUP ;
                                          SIZE ;
                                          PUSH nat 28 ;
                                          DUP 2 ;
                                          COMPARE ;
                                          GT ;
                                          IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                                          PUSH nat 28 ;
                                          SWAP ;
                                          SUB ;
                                          ABS ;
                                          DUP ;
                                          BYTES ;
                                          DUP 10 ;
                                          SWAP ;
                                          EXEC ;
                                          DUG 2 ;
                                          PUSH nat 28 ;
                                          SLICE ;
                                          IF_NONE { PUSH string "SLICE" ; FAILWITH } {} ;
                                          SWAP ;
                                          CONCAT ;
                                          PUSH bytes 0x0501 ;
                                          CONCAT ;
                                          UNPACK string ;
                                          IF_NONE { PUSH string "Error in get_entrypoint_name" ; FAILWITH } {} ;
                                          PUSH string "%" ;
                                          CONCAT ;
                                          DUP 2 ;
                                          COMPARE ;
                                          EQ ;
                                          IF { DIG 3 ;
                                               DIG 6 ;
                                               DROP 3 ;
                                               UNPACK (pair (address %owner) (nat %token_id)) ;
                                               IF_NONE
                                                 { DROP ; DIG 2 ; FAILWITH }
                                                 { DIG 4 ; DROP ; SWAP ; PUSH mutez 0 ; DIG 2 ; TRANSFER_TOKENS } }
                                             { DIG 2 ;
                                               DROP ;
                                               DUP 3 ;
                                               PACK ;
                                               DUP ;
                                               SIZE ;
                                               PUSH nat 28 ;
                                               DUP 2 ;
                                               COMPARE ;
                                               GT ;
                                               IF {} { PUSH string "failed assertion" ; FAILWITH } ;
                                               PUSH nat 28 ;
                                               SWAP ;
                                               SUB ;
                                               ABS ;
                                               DUP ;
                                               BYTES ;
                                               DIG 8 ;
                                               SWAP ;
                                               EXEC ;
                                               DUG 2 ;
                                               PUSH nat 28 ;
                                               SLICE ;
                                               IF_NONE { PUSH string "SLICE" ; FAILWITH } {} ;
                                               SWAP ;
                                               CONCAT ;
                                               PUSH bytes 0x0501 ;
                                               CONCAT ;
                                               UNPACK string ;
                                               IF_NONE { PUSH string "Error in get_entrypoint_name" ; FAILWITH } {} ;
                                               PUSH string "%" ;
                                               CONCAT ;
                                               SWAP ;
                                               COMPARE ;
                                               EQ ;
                                               IF { UNPACK (pair (address %owner) (nat %token_id)) ;
                                                    IF_NONE
                                                      { DROP ; DIG 2 ; FAILWITH }
                                                      { DIG 4 ; DROP ; SWAP ; PUSH mutez 0 ; DIG 2 ; TRANSFER_TOKENS } }
                                                  { SWAP ; DIG 4 ; DROP 3 ; PUSH string "UnknownEntrypoint" ; FAILWITH } } }
                                        { SWAP ;
                                          DIG 2 ;
                                          DIG 3 ;
                                          DIG 6 ;
                                          DIG 7 ;
                                          DROP 6 ;
                                          PUSH string "MissingDispatchEntrypoint" ;
                                          FAILWITH } ;
                                     DUG 2 }
                                   { DIG 2 ;
                                     DIG 3 ;
                                     DROP 2 ;
                                     PUSH string "OnlyAdmin" ;
                                     DUP 3 ;
                                     CAR ;
                                     SENDER ;
                                     COMPARE ;
                                     EQ ;
                                     IF { DROP } { FAILWITH } ;
                                     DUP ;
                                     EMIT %setSigner address ;
                                     DUG 2 ;
                                     UPDATE 3 ;
                                     NIL operation } ;
                                 DIG 2 ;
                                 CONS ;
                                 PAIR } } } } } } } ;
  view "txAuthDataSignerAddress" unit address { CDR ; GET 3 } ;
  view "get_balance"
       (pair address nat)
       nat
       { UNPAIR ;
         SWAP ;
         GET 6 ;
         SWAP ;
         UNPAIR ;
         DUP 3 ;
         GET 7 ;
         DUP 3 ;
         GET ;
         IF_NONE { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } { DROP } ;
         DIG 2 ;
         GET 3 ;
         DIG 2 ;
         GET ;
         IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
         COMPARE ;
         EQ ;
         IF { PUSH nat 1 } { PUSH nat 0 } } ;
  view "total_supply"
       nat
       nat
       { UNPAIR ;
         SWAP ;
         GET 6 ;
         GET 7 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } { DROP } ;
         PUSH nat 1 } ;
  view "all_tokens"
       unit
       (set nat)
       { DROP ;
         PUSH string "Feature not available. Maybe use an indexer instead" ;
         FAILWITH } ;
  view "is_operator"
       (pair (address %owner) (address %operator) (nat %token_id))
       bool
       { UNPAIR ;
         DUP ;
         GET 3 ;
         DUP 2 ;
         CAR ;
         COMPARE ;
         EQ ;
         PUSH nat 0 ;
         DIG 3 ;
         GET 6 ;
         GET 5 ;
         DUP 4 ;
         GET 3 ;
         DIG 4 ;
         CAR ;
         PAIR ;
         GET ;
         IF_NONE { EMPTY_SET nat } {} ;
         SIZE ;
         COMPARE ;
         GT ;
         OR } ;
  view "token_metadata"
       nat
       (pair (nat %token_id) (map %token_info string bytes))
       { UNPAIR ;
         SWAP ;
         GET 6 ;
         GET 7 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } {} } }

