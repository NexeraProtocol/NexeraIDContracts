{
  "address": "0x495fA1cfE569CcC4e6906B5dfC765797CCb6Cc37",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "name": "AddressIdConnection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        }
      ],
      "name": "RequestRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "requestId",
              "type": "uint64"
            },
            {
              "internalType": "uint256[]",
              "name": "inputs",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            }
          ],
          "indexed": false,
          "internalType": "struct IScenarioVerifier.ZKP[]",
          "name": "zkps",
          "type": "tuple[]"
        }
      ],
      "name": "SubmitedAllZKPsForUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        }
      ],
      "name": "UserAllowedForRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "UserAllowedForScenario",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "contract ICircuitValidator",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "ZKPRequestSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REQUESTS_RETURN_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "requestId",
              "type": "uint64"
            },
            {
              "internalType": "uint256[]",
              "name": "inputs",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            }
          ],
          "internalType": "struct IScenarioVerifier.ZKP[]",
          "name": "zkps",
          "type": "tuple[]"
        }
      ],
      "name": "allowUserForScenario",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "finalizeAllowListScenario",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        }
      ],
      "name": "getZKPRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "contract ICircuitValidator",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZKPVerifier.ZKPRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "getZKPRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "contract ICircuitValidator",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZKPVerifier.ZKPRequest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getZKPRequestsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isAllowedForScenario",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "isRuleIdRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "queryRequestWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredRuleIDs",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        }
      ],
      "name": "requestIdExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "scenarioAllowList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "contract ICircuitValidator",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZKPVerifier.ZKPRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "setNexeraZKPRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "contract ICircuitValidator",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZKPVerifier.ZKPRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "setZKPRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        }
      ],
      "name": "submitZKPResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f3a0c8ba49a74732702cab1cbc53e78f78d25279bcd2d81ddd620491937356a",
  "receipt": {
    "to": null,
    "from": "0x0BAd9DaD98143b2E946e8A40E4f27537be2f55E2",
    "contractAddress": "0x495fA1cfE569CcC4e6906B5dfC765797CCb6Cc37",
    "transactionIndex": 7,
    "gasUsed": "3492853",
    "logsBloom": "0x
    "blockHash": "0x5d6983a271fe0d86ae9c83089fa9868c9e929aa56616a1ad4614915d9d1f30ff",
    "transactionHash": "0x5f3a0c8ba49a74732702cab1cbc53e78f78d25279bcd2d81ddd620491937356a",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 44625783,
        "transactionHash": "0x5f3a0c8ba49a74732702cab1cbc53e78f78d25279bcd2d81ddd620491937356a",
        "address": "0x495fA1cfE569CcC4e6906B5dfC765797CCb6Cc37",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000bad9dad98143b2e946e8a40e4f27537be2f55e2"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x5d6983a271fe0d86ae9c83089fa9868c9e929aa56616a1ad4614915d9d1f30ff"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 44625783,
        "transactionHash": "0x5f3a0c8ba49a74732702cab1cbc53e78f78d25279bcd2d81ddd620491937356a",
        "address": "0x495fA1cfE569CcC4e6906B5dfC765797CCb6Cc37",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 34,
        "blockHash": "0x5d6983a271fe0d86ae9c83089fa9868c9e929aa56616a1ad4614915d9d1f30ff"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 44625783,
        "transactionHash": "0x5f3a0c8ba49a74732702cab1cbc53e78f78d25279bcd2d81ddd620491937356a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000bad9dad98143b2e946e8a40e4f27537be2f55e2",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002141a3cbae26b00000000000000000000000000000000000000000000000012d18177012d394d100000000000000000000000000000000000000000000233433615324fead27fb0000000000000000000000000000000000000000000000012cf6d5cc47256e21000000000000000000000000000000000000000000002334338294c8ca5b4eab",
        "logIndex": 35,
        "blockHash": "0x5d6983a271fe0d86ae9c83089fa9868c9e929aa56616a1ad4614915d9d1f30ff"
      }
    ],
    "blockNumber": 44625783,
    "cumulativeGasUsed": "4827869",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "01f3f48de4e4d02d39c4cf8b4c5f3a4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"AddressIdConnection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"RequestRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"indexed\":false,\"internalType\":\"struct IScenarioVerifier.ZKP[]\",\"name\":\"zkps\",\"type\":\"tuple[]\"}],\"name\":\"SubmitedAllZKPsForUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"UserAllowedForRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserAllowedForScenario\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ZKPRequestSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REQUESTS_RETURN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IScenarioVerifier.ZKP[]\",\"name\":\"zkps\",\"type\":\"tuple[]\"}],\"name\":\"allowUserForScenario\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"finalizeAllowListScenario\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"getZKPRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZKPVerifier.ZKPRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getZKPRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZKPVerifier.ZKPRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZKPRequestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAllowedForScenario\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"isRuleIdRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"queryRequestWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredRuleIDs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"requestIdExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"scenarioAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZKPVerifier.ZKPRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"setNexeraZKPRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZKPVerifier.ZKPRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"setZKPRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"name\":\"submitZKPResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AddressIdConnection(address,uint256)\":{\"details\":\"Event emitted when an address is associated with a Polygon ID\"},\"RequestRegistered(uint64)\":{\"details\":\"Event emitted when a ZKPRequest is registered in the verifier\"},\"SubmitedAllZKPsForUser(address,(uint64,uint256[],uint256[2],uint256[2][2],uint256[2])[])\":{\"details\":\"Event emitted when all ZKPs for a user are submitted\"},\"UserAllowedForRequest(address,uint64)\":{\"details\":\"Event emitted when a user address is allowed for a request ID\"},\"UserAllowedForScenario(address)\":{\"details\":\"Event emitted when an address is allowed for the scenario verifier\"}},\"kind\":\"dev\",\"methods\":{\"allowUserForScenario((uint64,uint256[],uint256[2],uint256[2][2],uint256[2])[])\":{\"params\":{\"zkps\":\"Array of ZKPs to submit\"},\"returns\":{\"_0\":\"Boolean indicating the success of the operation\"}},\"finalizeAllowListScenario(address)\":{\"details\":\"Once the user is allowed for all rules, call this function to finalize (this is more gas efficient than iterating over rules on every submission)\",\"params\":{\"user\":\"The address of the user to check\"},\"returns\":{\"_0\":\"isUserWhitelisted True if the user is allowed for all rules\"}},\"initialize(address)\":{\"details\":\"Initialize proxied contract with owner\",\"params\":{\"newOwner\":\"The address of the thing owner\"}},\"isAllowedForScenario(address)\":{\"params\":{\"user\":\"The address of the user to check\"},\"returns\":{\"_0\":\"Boolean indicating if the user is allowed for the scenario\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setNexeraZKPRequest(uint64,(string,address,bytes))\":{\"params\":{\"request\":\"The ZKP request data.\",\"requestId\":\"The ID of the request to be set.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ScenarioVerifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowUserForScenario((uint64,uint256[],uint256[2],uint256[2][2],uint256[2])[])\":{\"notice\":\"Submits all ZKPs and allowlists a user in one call\"},\"finalizeAllowListScenario(address)\":{\"notice\":\"Finalizes the whitelisting of a user for all rules\"},\"isAllowedForScenario(address)\":{\"notice\":\"Checks if a user is allowed for the scenario\"},\"setNexeraZKPRequest(uint64,(string,address,bytes))\":{\"notice\":\"Sets a Nexera ZKP request and emits an event.\"}},\"notice\":\"This contract manages rules for a scenario using ZKP requests, including setting a request for a rule and allowing users who submit the right ZKPs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ScenarioVerifier.sol\":\"ScenarioVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@iden3/contracts/interfaces/ICircuitValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\ninterface ICircuitValidator {\\n    function verify(\\n        uint256[] memory inputs,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        bytes calldata data\\n    ) external view;\\n\\n    function getSupportedCircuitIds() external view returns (string[] memory ids);\\n\\n    function inputIndexOf(string memory name) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe18f12a89113f38d6c91a01303d80cc6fc46815e7bf511ce6343b5d13ab5a03e\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/interfaces/IZKPVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport {ICircuitValidator} from \\\"./ICircuitValidator.sol\\\";\\n\\ninterface IZKPVerifier {\\n    struct ZKPRequest {\\n        string metadata;\\n        ICircuitValidator validator;\\n        bytes data;\\n    }\\n\\n    function submitZKPResponse(\\n        uint64 requestId,\\n        uint256[] memory inputs,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c\\n    ) external;\\n\\n    function setZKPRequest(uint64 requestId, ZKPRequest calldata request) external;\\n\\n    function getZKPRequestsCount() external view returns (uint256);\\n\\n    function requestIdExists(uint64 requestId) external view returns (bool);\\n\\n    function getZKPRequest(uint64 requestId) external view returns (ZKPRequest memory);\\n\\n    function getZKPRequests(\\n        uint256 startIndex,\\n        uint256 length\\n    ) external view returns (ZKPRequest[] memory);\\n}\\n\",\"keccak256\":\"0x8debfdddfb423004fe564213f7a7b156d247234ded829bd4a71d9d042001597a\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\n/// @title A common functions for arrays.\\nlibrary ArrayUtils {\\n    /**\\n     * @dev Calculates bounds for the slice of the array.\\n     * @param arrLength An array length.\\n     * @param start A start index.\\n     * @param length A length of the slice.\\n     * @param limit A limit for the length.\\n     * @return The bounds for the slice of the array.\\n     */\\n    function calculateBounds(\\n        uint256 arrLength,\\n        uint256 start,\\n        uint256 length,\\n        uint256 limit\\n    ) internal pure returns (uint256, uint256) {\\n        require(length > 0, \\\"Length should be greater than 0\\\");\\n        require(length <= limit, \\\"Length limit exceeded\\\");\\n        require(start < arrLength, \\\"Start index out of bounds\\\");\\n\\n        uint256 end = start + length;\\n        if (end > arrLength) {\\n            end = arrLength;\\n        }\\n\\n        return (start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x6b452c0a3c9e4a79027d0d1802ce5b8f10f051dc1b561840163c17b318fbd56f\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/GenesisUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {PrimitiveTypeUtils} from \\\"./PrimitiveTypeUtils.sol\\\";\\n\\nlibrary GenesisUtils {\\n    /**\\n     *   @dev sum\\n     */\\n    function sum(bytes memory array) internal pure returns (uint16 s) {\\n        require(array.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        for (uint256 i = 0; i < array.length; ++i) {\\n            s += uint16(uint8(array[i]));\\n        }\\n    }\\n\\n    /**\\n     * @dev isGenesisState\\n     */\\n    function isGenesisState(uint256 id, uint256 idState) internal pure returns (bool) {\\n        bytes2 idType = bytes2(\\n            PrimitiveTypeUtils.uint256ToBytes(PrimitiveTypeUtils.reverseUint256(id))\\n        );\\n        uint256 computedId = calcIdFromGenesisState(idType, idState);\\n        return id == computedId;\\n    }\\n\\n    /**\\n     * @dev calcIdFromGenesisState\\n     */\\n    function calcIdFromGenesisState(\\n        bytes2 idType,\\n        uint256 idState\\n    ) internal pure returns (uint256) {\\n        bytes memory userStateB1 = PrimitiveTypeUtils.uint256ToBytes(\\n            PrimitiveTypeUtils.reverseUint256(idState)\\n        );\\n\\n        bytes memory cutState = PrimitiveTypeUtils.slice(userStateB1, userStateB1.length - 27, 27);\\n\\n        bytes memory beforeChecksum = PrimitiveTypeUtils.concat(abi.encodePacked(idType), cutState);\\n        require(beforeChecksum.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        uint16 checksum = PrimitiveTypeUtils.reverseUint16(sum(beforeChecksum));\\n\\n        bytes memory checkSumBytes = abi.encodePacked(checksum);\\n\\n        bytes memory idBytes = PrimitiveTypeUtils.concat(beforeChecksum, checkSumBytes);\\n        require(idBytes.length == 31, \\\"idBytes requires 31 length array\\\");\\n\\n        return PrimitiveTypeUtils.reverseUint256(PrimitiveTypeUtils.toUint256(idBytes));\\n    }\\n\\n    /**\\n     * @dev calcIdFromEthAddress\\n     */\\n    function calcIdFromEthAddress(bytes2 idType, address caller) internal pure returns (uint256) {\\n        uint256 addr = PrimitiveTypeUtils.addressToUint256(caller);\\n\\n        return calcIdFromGenesisState(idType, PrimitiveTypeUtils.reverseUint256(addr));\\n    }\\n}\\n\",\"keccak256\":\"0xfd962d67aec0ebae3192bff78df85b5eccd6391abd4e0474343bfb1fb9a4a241\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/PrimitiveTypeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nlibrary PrimitiveTypeUtils {\\n    /**\\n     * @dev uint256ToBytes\\n     */\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    /**\\n     * @dev reverse uint256\\n     */\\n    function reverseUint256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v =\\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v =\\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @dev reverse uint16\\n     */\\n    function reverseUint16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n\\n    /**\\n     * @dev reverse uint32\\n     */\\n    function reverseUint32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) | ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    /**\\n     * @dev compareStrings\\n     */\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        if (bytes(a).length != bytes(b).length) {\\n            return false;\\n        }\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    /**\\n     * @dev toUint256\\n     */\\n    function toUint256(bytes memory bys) internal pure returns (uint256 value) {\\n        assembly {\\n            value := mload(add(bys, 0x20))\\n        }\\n    }\\n\\n    /**\\n     * @dev bytesToAddress\\n     */\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    /**\\n     * @dev int256ToAddress\\n     */\\n    function int256ToAddress(uint256 input) internal pure returns (address) {\\n        return bytesToAddress(uint256ToBytes(reverseUint256(input)));\\n    }\\n\\n    /**\\n     * @dev concat\\n     */\\n    function concat(\\n        bytes memory preBytes,\\n        bytes memory postBytes\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.concat(preBytes, postBytes);\\n    }\\n\\n    /**\\n     * @dev slice\\n     */\\n    function slice(\\n        bytes memory bys,\\n        uint256 start,\\n        uint256 length\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.slice(bys, start, length);\\n    }\\n\\n    /**\\n     * @dev addressToUint256\\n     */\\n    function addressToUint256(address _addr) internal pure returns (uint256) {\\n        return uint256(uint160(_addr));\\n    }\\n}\\n\",\"keccak256\":\"0x088d813467bacb9d496a69c3ff266df023030d15c07b4c31c749b50bbc7176c6\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/verifiers/ZKPVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {GenesisUtils} from \\\"../lib/GenesisUtils.sol\\\";\\nimport {ICircuitValidator} from \\\"../interfaces/ICircuitValidator.sol\\\";\\nimport {IZKPVerifier} from \\\"../interfaces/IZKPVerifier.sol\\\";\\nimport {ArrayUtils} from \\\"../lib/ArrayUtils.sol\\\";\\n\\ncontract ZKPVerifier is IZKPVerifier, Ownable {\\n    /**\\n     * @dev Max return array length for request queries\\n     */\\n    uint256 public constant REQUESTS_RETURN_LIMIT = 1000;\\n\\n    // This empty reserved space is put in place to allow future versions\\n    // of the ZKPVerifier contract to inherit from other contracts without a risk of\\n    // breaking the storage layout. This is necessary because the parent contracts in the\\n    // future may introduce some storage variables, which are placed before the ZKPVerifier\\n    // contract's storage variables.\\n    // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n    // slither-disable-next-line shadowing-state\\n    // slither-disable-next-line unused-state\\n    uint256[500] private __gap_before;\\n\\n    // msg.sender-> ( requestID -> is proof given )\\n    mapping(address => mapping(uint64 => bool)) public proofs;\\n\\n    mapping(uint64 => IZKPVerifier.ZKPRequest) internal _requests;\\n\\n    uint64[] internal _requestIds;\\n\\n    // This empty reserved space is put in place to allow future versions\\n    // of this contract to add new variables without shifting down\\n    // storage of child contracts that use this contract as a base\\n    // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n    uint256[47] __gap_after;\\n\\n    function submitZKPResponse(\\n        uint64 requestId,\\n        uint256[] calldata inputs,\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c\\n    ) public override {\\n        require(\\n            _requests[requestId].validator != ICircuitValidator(address(0)),\\n            \\\"validator is not set for this request id\\\"\\n        ); // validator exists\\n\\n        _beforeProofSubmit(requestId, inputs, _requests[requestId].validator);\\n\\n        _callVerifyWithSender(requestId, inputs, a, b, c, msg.sender);\\n\\n        proofs[msg.sender][requestId] = true; // user provided a valid proof for request\\n\\n        _afterProofSubmit(requestId, inputs, _requests[requestId].validator);\\n    }\\n\\n    function _callVerifyWithSender(\\n        uint64 requestId,\\n        uint256[] calldata inputs,\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        address sender\\n    ) internal returns (bool) {\\n        ZKPRequest memory request = _requests[requestId];\\n        bytes4 selector = request.validator.verify.selector;\\n        bytes memory data = abi.encodePacked(\\n            selector,\\n            abi.encode(inputs, a, b, c, request.data),\\n            sender\\n        );\\n        (bool success, bytes memory returnData) = address(request.validator).call(data);\\n        if (!success) {\\n            if (returnData.length > 0) {\\n                // Extract revert reason from returnData\\n                assembly {\\n                    let returnDataSize := mload(returnData)\\n                    revert(add(32, returnData), returnDataSize)\\n                }\\n            } else {\\n                revert(\\\"Failed to verify proof without revert reason\\\");\\n            }\\n        }\\n        return success;\\n    }\\n\\n    function getZKPRequest(\\n        uint64 requestId\\n    ) public view override returns (IZKPVerifier.ZKPRequest memory) {\\n        require(requestIdExists(requestId), \\\"request id doesn't exist\\\");\\n        return _requests[requestId];\\n    }\\n\\n    function setZKPRequest(\\n        uint64 requestId,\\n        ZKPRequest calldata request\\n    ) public override onlyOwner {\\n        _requests[requestId] = request;\\n        _requestIds.push(requestId);\\n    }\\n\\n    function getZKPRequestsCount() public view returns (uint256) {\\n        return _requestIds.length;\\n    }\\n\\n    function requestIdExists(uint64 requestId) public view override returns (bool) {\\n        for (uint i = 0; i < _requestIds.length; i++) {\\n            if (_requestIds[i] == requestId) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getZKPRequests(\\n        uint256 startIndex,\\n        uint256 length\\n    ) public view returns (IZKPVerifier.ZKPRequest[] memory) {\\n        (uint256 start, uint256 end) = ArrayUtils.calculateBounds(\\n            _requestIds.length,\\n            startIndex,\\n            length,\\n            REQUESTS_RETURN_LIMIT\\n        );\\n\\n        IZKPVerifier.ZKPRequest[] memory result = new IZKPVerifier.ZKPRequest[](end - start);\\n\\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = _requests[_requestIds[i]];\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any proof response submit\\n     */\\n    function _beforeProofSubmit(\\n        uint64 requestId,\\n        uint256[] memory inputs,\\n        ICircuitValidator validator\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any proof response submit\\n     */\\n    function _afterProofSubmit(\\n        uint64 requestId,\\n        uint256[] memory inputs,\\n        ICircuitValidator validator\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe8cc29e39e6d46a1dee9e643e7b365515443c3d67339375ffc0de01d9bcc189a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ScenarioVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PrimitiveTypeUtils} from \\\"@iden3/contracts/lib/PrimitiveTypeUtils.sol\\\";\\nimport {ICircuitValidator} from \\\"@iden3/contracts/interfaces/ICircuitValidator.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./verifiers/NexeraZKPVerifier.sol\\\";\\nimport \\\"./interfaces/IScenarioVerifier.sol\\\";\\n\\n/// @title ScenarioVerifier\\n/// @notice This contract manages rules for a scenario using ZKP requests, including setting a request for a rule and allowing users who submit the right ZKPs\\ncontract ScenarioVerifier is\\n  Initializable,\\n  IScenarioVerifier,\\n  NexeraZKPVerifier\\n{\\n  // Array of registered rule IDs\\n  uint64[] public registeredRuleIDs;\\n\\n  // Mapping to check if a rule ID is registered\\n  mapping(uint64 => bool) public isRuleIdRegistered;\\n\\n  // Mapping for query request whitelist status by rule ID and address\\n  mapping(uint64 => mapping(address => bool)) public queryRequestWhitelist;\\n\\n  // Mapping for scenario whitelist status by address\\n  mapping(address => bool) public scenarioAllowList;\\n\\n  // Mapping to connect a Polygon ID to an address\\n  mapping(uint256 => address) public idToAddress;\\n\\n  // Mapping to connect an address to a Polygon ID\\n  mapping(address => uint256) public addressToId;\\n\\n  // Events\\n\\n  /// @dev Event emitted when a ZKPRequest is registered in the verifier\\n  event RequestRegistered(uint64 requestId);\\n\\n  /// @dev Event emitted when an address is associated with a Polygon ID\\n  event AddressIdConnection(address userAddress, uint256 userId);\\n\\n  /// @dev Event emitted when a user address is allowed for a request ID\\n  event UserAllowedForRequest(address userAddress, uint64 requestId);\\n\\n  /// @dev Event emitted when all ZKPs for a user are submitted\\n  event SubmitedAllZKPsForUser(address userAddress, ZKP[] zkps);\\n\\n  /// @dev Event emitted when an address is allowed for the scenario verifier\\n  event UserAllowedForScenario(address userAddress);\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initialize proxied contract with owner\\n   * @param newOwner The address of the thing owner\\n   */\\n  function initialize(address newOwner) public initializer {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /// @notice Internal function called after setting a request to register the request ID\\n  /// @param requestId The ID of the request being set\\n  function _afterSetRequest(uint64 requestId) internal override {\\n    // If requestId is not registered, register it to the list of registeredRuleIDs\\n    if (!isRuleIdRegistered[requestId]) {\\n      registeredRuleIDs.push(requestId);\\n      isRuleIdRegistered[requestId] = true;\\n      emit RequestRegistered(requestId);\\n    }\\n  }\\n\\n  /// @notice Internal function called before submitting a proof, checks the sender address\\n  /// @param inputs Array of inputs for the proof\\n  /// @param validator The circuit validator\\n  function _beforeProofSubmit(\\n    uint64 /* requestId */,\\n    uint256[] memory inputs,\\n    ICircuitValidator validator\\n  ) internal view override {\\n    // check that challenge input is address of sender\\n    address addr = PrimitiveTypeUtils.int256ToAddress(\\n      inputs[validator.inputIndexOf(\\\"challenge\\\")]\\n    );\\n    require(_msgSender() == addr, \\\"address in proof is not a sender address\\\");\\n  }\\n\\n  /// @notice Internal function called after submitting a proof, links id and address and allows user for the request/rule\\n  /// @param requestId The ID of the request being processed\\n  /// @param inputs Array of inputs for the proof\\n  /// @param _validator The circuit validator\\n  function _afterProofSubmit(\\n    uint64 requestId,\\n    uint256[] memory inputs,\\n    ICircuitValidator _validator\\n  ) internal override {\\n    // get user id and register it\\n    uint256 id = inputs[1];\\n    addressToId[_msgSender()] = id;\\n    idToAddress[id] = _msgSender();\\n    emit AddressIdConnection(_msgSender(), id);\\n\\n    // Whitelist user for this rule\\n    queryRequestWhitelist[requestId][_msgSender()] = true;\\n    emit UserAllowedForRequest(_msgSender(), requestId);\\n  }\\n\\n  /// @dev Once the user is allowed for all rules, call this function to finalize\\n  /// (this is more gas efficient than iterating over rules on every submission)\\n  /// @notice Finalizes the whitelisting of a user for all rules\\n  /// @param user The address of the user to check\\n  /// @return isUserWhitelisted True if the user is allowed for all rules\\n  function finalizeAllowListScenario(address user) public returns (bool) {\\n    bool isUserWhitelisted = true;\\n    uint numberOfRules = registeredRuleIDs.length;\\n    for (uint i = 0; i < numberOfRules; ) {\\n      isUserWhitelisted = queryRequestWhitelist[registeredRuleIDs[i]][user];\\n      if (!isUserWhitelisted) {\\n        break;\\n      }\\n      unchecked {\\n        i++;\\n      }\\n    }\\n    scenarioAllowList[user] = isUserWhitelisted;\\n    emit UserAllowedForScenario(user);\\n    return isUserWhitelisted;\\n  }\\n\\n  /// @notice Submits all ZKPs and allowlists a user in one call\\n  /// @param zkps Array of ZKPs to submit\\n  /// @return Boolean indicating the success of the operation\\n  function allowUserForScenario(ZKP[] calldata zkps) public returns (bool) {\\n    uint numberOfZKPs = zkps.length;\\n    for (uint i = 0; i < numberOfZKPs; ) {\\n      submitZKPResponse(\\n        zkps[i].requestId,\\n        zkps[i].inputs,\\n        zkps[i].a,\\n        zkps[i].b,\\n        zkps[i].c\\n      );\\n      unchecked {\\n        i++;\\n      }\\n    }\\n    emit SubmitedAllZKPsForUser(msg.sender, zkps);\\n    return finalizeAllowListScenario(msg.sender);\\n  }\\n\\n  /// @notice Checks if a user is allowed for the scenario\\n  /// @param user The address of the user to check\\n  /// @return Boolean indicating if the user is allowed for the scenario\\n  function isAllowedForScenario(address user) public view returns (bool) {\\n    return scenarioAllowList[user];\\n  }\\n}\\n\",\"keccak256\":\"0xfaa29e2b22cb0b5311d178d1a262625275cef6b6acb841252e9b7efd41ec079b\",\"license\":\"MIT\"},\"contracts/interfaces/IScenarioVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {IZKPVerifier} from \\\"@iden3/contracts/interfaces/IZKPVerifier.sol\\\";\\n\\n/// @title IScenarioVerifier\\n/// @notice Interface for the Scenario Verifier, extending the IZKPVerifier interface for scenario-specific verification using Zero-Knowledge Proofs (ZKPs).\\ninterface IScenarioVerifier is IZKPVerifier {\\n  /// @dev Structure representing a Zero-Knowledge Proof (ZKP) with its associated request ID and proof data.\\n  /// used in the allowUserForScenario call\\n  struct ZKP {\\n    uint64 requestId; // ID of the request associated with this ZKP.\\n    uint256[] inputs; // Inputs provided for the ZKP.\\n    uint256[2] a; // Component 'a' of the ZKP.\\n    uint256[2][2] b; // Component 'b' of the ZKP.\\n    uint256[2] c; // Component 'c' of the ZKP.\\n  }\\n\\n  /// @notice Checks if a user is allowed for the specific scenario.\\n  /// @param user The address of the user to check.\\n  /// @return Boolean indicating whether the user is allowed.\\n  function isAllowedForScenario(address user) external returns (bool);\\n\\n  /// @notice Processes a batch of ZKPs and attempts to whitelist the user for the scenario.\\n  /// @param zkps Array of ZKPs to be processed.\\n  /// @return Boolean indicating the success of the whitelisting process.\\n  function allowUserForScenario(ZKP[] calldata zkps) external returns (bool);\\n\\n  /// @notice Finalizes the check process for a user for all rules.\\n  /// @param user The address of the user to finalize the check for\\n  /// @return Boolean indicating whether the user was successfully allowed for the scenario.\\n  function finalizeAllowListScenario(address user) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4af86208620013efde29bb9f21382ebf28fe34d8983d66026265df1089adcfae\",\"license\":\"GPL-3.0\"},\"contracts/verifiers/NexeraZKPVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {GenesisUtils} from \\\"@iden3/contracts/lib/GenesisUtils.sol\\\";\\nimport {ICircuitValidator} from \\\"@iden3/contracts/interfaces/ICircuitValidator.sol\\\";\\nimport {ZKPVerifier} from \\\"@iden3/contracts/verifiers/ZKPVerifier.sol\\\";\\n\\n/// @title NexeraZKPVerifier\\n/// @notice Extends ZKPVerifier to handle Zero-Knowledge Proof (ZKP) requests specifically for the Nexera system.\\n/// @dev We use this because we need _afterSetRequest to register the request ids\\ncontract NexeraZKPVerifier is ZKPVerifier {\\n  /// @dev Emitted when a ZKP request is set.\\n  /// @param requestId The ID of the ZKP request.\\n  /// @param data The data associated with the ZKP request.\\n  /// @param validator The circuit validator for the ZKP request.\\n  /// @param metadata Metadata associated with the request.\\n  event ZKPRequestSet(\\n    uint64 requestId,\\n    bytes data,\\n    ICircuitValidator validator,\\n    string metadata\\n  );\\n\\n  /// @dev Internal hook that is called after a ZKP request is set.\\n  /// @param requestId The ID of the request that was set.\\n  function _afterSetRequest(uint64 requestId) internal virtual {}\\n\\n  /// @notice Sets a Nexera ZKP request and emits an event.\\n  /// @param requestId The ID of the request to be set.\\n  /// @param request The ZKP request data.\\n  function setNexeraZKPRequest(\\n    uint64 requestId,\\n    ZKPRequest calldata request\\n  ) public onlyOwner {\\n    setZKPRequest(requestId, request);\\n    emit ZKPRequestSet(\\n      requestId,\\n      request.data,\\n      request.validator,\\n      request.metadata\\n    );\\n    _afterSetRequest(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0xb07dbd200202bbceba64a1313fa4c48be55ddf1635e2c033b1c3cd6eefb6af60\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equal_nonAligned(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let endMinusWord := add(_preBytes, length)\\n                let mc := add(_preBytes, 0x20)\\n                let cc := add(_postBytes, 0x20)\\n\\n                for {\\n                // the next line is the loop condition:\\n                // while(uint256(mc < endWord) + cb == 2)\\n                } eq(add(lt(mc, endMinusWord), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n\\n                // Only if still successful\\n                // For <1 word tail bytes\\n                if gt(success, 0) {\\n                    // Get the remainder of length/32\\n                    // length % 32 = AND(length, 32 - 1)\\n                    let numTailBytes := and(length, 0x1f)\\n                    let mcRem := mload(mc)\\n                    let ccRem := mload(cc)\\n                    for {\\n                        let i := 0\\n                    // the next line is the loop condition:\\n                    // while(uint256(i < numTailBytes) + cb == 2)\\n                    } eq(add(lt(i, numTailBytes), cb), 2) {\\n                        i := add(i, 1)\\n                    } {\\n                        if iszero(eq(byte(i, mcRem), byte(i, ccRem))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xa5b10f04797d5a10a9ba07855108b6bd695940e6a3d128927b2f74a0d359868a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200004860201b60201c565b6200005060201b60201c565b620000426200011560201b60201c565b620002bf565b600033905090565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff161562000168576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015f9062000262565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620001d95760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001d09190620002a2565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200024a602783620001db565b91506200025782620001ec565b604082019050919050565b600060208201905081810360008301526200027d816200023b565b9050919050565b600060ff82169050919050565b6200029c8162000284565b82525050565b6000602082019050620002b9600083018462000291565b92915050565b613db980620002cf6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063b68967e21161007c578063b68967e2146103d7578063c4d66de8146103f3578063c76d08451461040f578063cb0e0d7d1461043f578063f2fde38b1461046f578063f82ddf0a1461048b57610142565b80638da5cb5b1461030d5780639f5223e01461032b578063a9b9e3e114610347578063ab7bcfb714610377578063b45c0fdf146103a757610142565b80635f9e60d71161010a5780635f9e60d71461022557806360fc1cb5146102555780636508e1b4146102855780636d76b363146102a3578063715018a6146102d357806371941da5146102dd57610142565b806315be5190146101475780631905e7b114610177578063197bf195146101955780632a2d0c47146101c5578063398cfb76146101f5575b600080fd5b610161600480360381019061015c9190611fe3565b6104a7565b60405161016e919061204b565b60405180910390f35b61017f610602565b60405161018c919061207f565b60405180910390f35b6101af60048036038101906101aa91906120da565b610608565b6040516101bc919061204b565b60405180910390f35b6101df60048036038101906101da9190612133565b610629565b6040516101ec91906121a1565b60405180910390f35b61020f600480360381019061020a91906121e8565b61065d565b60405161021c919061204b565b60405180910390f35b61023f600480360381019061023a9190612215565b6106b4565b60405161024c91906124b2565b60405180910390f35b61026f600480360381019061026a91906121e8565b610976565b60405161027c919061204b565b60405180910390f35b61028d610997565b60405161029a919061207f565b60405180910390f35b6102bd60048036038101906102b891906124d4565b6109a5565b6040516102ca919061204b565b60405180910390f35b6102db6109d5565b005b6102f760048036038101906102f29190612133565b6109e9565b6040516103049190612523565b60405180910390f35b610315610a28565b60405161032291906121a1565b60405180910390f35b61034560048036038101906103409190612562565b610a51565b005b610361600480360381019061035c91906121e8565b610aec565b60405161036e919061204b565b60405180910390f35b610391600480360381019061038c91906120da565b610c69565b60405161039e919061204b565b60405180910390f35b6103c160048036038101906103bc91906125be565b610d00565b6040516103ce919061204b565b60405180910390f35b6103f160048036038101906103ec9190612698565b610d30565b005b61040d600480360381019061040891906121e8565b610fae565b005b610429600480360381019061042491906120da565b6110ee565b604051610436919061278b565b60405180910390f35b610459600480360381019061045491906121e8565b6112f2565b604051610466919061207f565b60405180910390f35b610489600480360381019061048491906121e8565b61130b565b005b6104a560048036038101906104a09190612562565b61138e565b005b60008083839050905060005b818110156105b4576105a78585838181106104d1576104d06127ad565b5b90506020028101906104e391906127eb565b60000160208101906104f591906120da565b868684818110610508576105076127ad565b5b905060200281019061051a91906127eb565b80602001906105299190612814565b88888681811061053c5761053b6127ad565b5b905060200281019061054e91906127eb565b604001898987818110610564576105636127ad565b5b905060200281019061057691906127eb565b6080018a8a8881811061058c5761058b6127ad565b5b905060200281019061059e91906127eb565b61010001610d30565b80806001019150506104b3565b507fefbe0f7f95f99f3446b18c397ba10fec2af0a6ef272d84266ccb64303fd469ef3385856040516105e893929190612bd0565b60405180910390a16105f933610aec565b91505092915050565b6103e881565b6102286020528060005260406000206000915054906101000a900460ff1681565b61022b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061022a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60606000806106cd6101f78054905086866103e861141c565b91509150600082826106df9190612c31565b67ffffffffffffffff8111156106f8576106f7612c65565b5b60405190808252806020026020018201604052801561073157816020015b61071e611f3d565b8152602001906001900390816107165790505b50905060008390505b82811015610969576101f660006101f7838154811061075c5761075b6127ad565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060600160405290816000820180546107c390612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546107ef90612cc3565b801561083c5780601f106108115761010080835404028352916020019161083c565b820191906000526020600020905b81548152906001019060200180831161081f57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546108ab90612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546108d790612cc3565b80156109245780601f106108f957610100808354040283529160200191610924565b820191906000526020600020905b81548152906001019060200180831161090757829003601f168201915b50505050508152505082858361093a9190612c31565b8151811061094b5761094a6127ad565b5b6020026020010181905250808061096190612cf4565b91505061073a565b5080935050505092915050565b61022a6020528060005260406000206000915054906101000a900460ff1681565b60006101f780549050905090565b6102296020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6109dd611513565b6109e76000611591565b565b61022781815481106109fa57600080fd5b9060005260206000209060049182820401919006600802915054906101000a900467ffffffffffffffff1681565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a59611513565b806101f660008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208181610a8e919061330f565b9050506101f78290806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b60008060019050600061022780549050905060005b81811015610bcf5761022960006102278381548110610b2357610b226127ad565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1692508215610bcf578080600101915050610b01565b508161022a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f14e9c7a267790ab46f2189d66cb068dbf65a27e7f844cb8aded907134d36467484604051610c5791906121a1565b60405180910390a18192505050919050565b600080600090505b6101f780549050811015610cf5578267ffffffffffffffff166101f78281548110610c9f57610c9e6127ad565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1603610ce2576001915050610cfb565b8080610ced90612cf4565b915050610c71565b50600090505b919050565b6101f56020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff166101f660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de1906133a0565b60405180910390fd5b610e8186868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611656565b610e908686868686863361176f565b5060016101f560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610fa686868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a5b565b505050505050565b60008060019054906101000a900460ff16159050808015610fdf5750600160008054906101000a900460ff1660ff16105b8061100c5750610fee30611c2c565b15801561100b5750600160008054906101000a900460ff1660ff16145b5b61104b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104290613432565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611088576001600060016101000a81548160ff0219169083151502179055505b61109182611591565b80156110ea5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516110e1919061349a565b60405180910390a15b5050565b6110f6611f3d565b6110ff82610c69565b61113e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113590613501565b60405180910390fd5b6101f660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461118190612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546111ad90612cc3565b80156111fa5780601f106111cf576101008083540402835291602001916111fa565b820191906000526020600020905b8154815290600101906020018083116111dd57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461126990612cc3565b80601f016020809104026020016040519081016040528092919081815260200182805461129590612cc3565b80156112e25780601f106112b7576101008083540402835291602001916112e2565b820191906000526020600020905b8154815290600101906020018083116112c557829003601f168201915b5050505050815250509050919050565b61022c6020528060005260406000206000915090505481565b611313611513565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137990613593565b60405180910390fd5b61138b81611591565b50565b611396611513565b6113a08282610a51565b7febf5fc5d525575febff148871346e1458de02c705c900ba0bc9b5361d5eba08a828280604001906113d291906130ff565b8460200160208101906113e591906135c8565b8580600001906113f59190612d3c565b6040516114079695949392919061367e565b60405180910390a161141882611c4f565b5050565b60008060008411611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145990613721565b60405180910390fd5b828411156114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149c9061378d565b60405180910390fd5b8585106114e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114de906137f9565b60405180910390fd5b600084866114f59190613819565b905086811115611503578690505b8581925092505094509492505050565b61151b611d5c565b73ffffffffffffffffffffffffffffffffffffffff16611539610a28565b73ffffffffffffffffffffffffffffffffffffffff161461158f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158690613899565b60405180910390fd5b565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006116f2838373ffffffffffffffffffffffffffffffffffffffff1663b16a394f6040518163ffffffff1660e01b815260040161169390613905565b602060405180830381865afa1580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d4919061393a565b815181106116e5576116e46127ad565b5b6020026020010151611d64565b90508073ffffffffffffffffffffffffffffffffffffffff16611713611d5c565b73ffffffffffffffffffffffffffffffffffffffff1614611769576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611760906139d9565b60405180910390fd5b50505050565b6000806101f660008a67ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060600160405290816000820180546117b590612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546117e190612cc3565b801561182e5780601f106118035761010080835404028352916020019161182e565b820191906000526020600020905b81548152906001019060200180831161181157829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461189d90612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546118c990612cc3565b80156119165780601f106118eb57610100808354040283529160200191611916565b820191906000526020600020905b8154815290600101906020018083116118f957829003601f168201915b50505050508152505090506000635307e79f60e01b90506000818a8a8a8a8a886040015160405160200161194f96959493929190613b19565b6040516020818303038152906040528660405160200161197193929190613c4f565b6040516020818303038152906040529050600080846020015173ffffffffffffffffffffffffffffffffffffffff16836040516119ae9190613c88565b6000604051808303816000865af19150503d80600081146119eb576040519150601f19603f3d011682016040523d82523d6000602084013e6119f0565b606091505b509150915081611a4857600081511115611a0d5780518082602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3f90613d11565b60405180910390fd5b8195505050505050979650505050505050565b600082600181518110611a7157611a706127ad565b5b602002602001015190508061022c6000611a89611d5c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611acf611d5c565b61022b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f646b8bd6cf28645be11999db4a2cdbe4fdd61ea8f95a3877ffc1258f903be3c2611b4a611d5c565b82604051611b59929190613d31565b60405180910390a1600161022960008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206000611b95611d5c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f681ea469fc50f02bc3788c40f25e78e5eaa619484685a28003af83fb0dc8dd67611c0f611d5c565b85604051611c1e929190613d5a565b60405180910390a150505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61022860008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d59576102278190806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600161022860008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f56b7ddf97528e633ab570995fc0cf2e93f6eb557b29e5d715965018a34f4295e81604051611d509190612523565b60405180910390a15b50565b600033905090565b6000611d7f611d7a611d7584611d86565b611ed2565b611f2f565b9050919050565b600081905060087eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff8216901b60087fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff008316901c17905060107dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff8216901b60107fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00008316901c17905060207bffffffff00000000ffffffff00000000ffffffff00000000ffffffff8216901b60207fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008316901c179050604077ffffffffffffffff0000000000000000ffffffffffffffff8216901b60407fffffffffffffffff0000000000000000ffffffffffffffff00000000000000008316901c179050608081901b608082901c179050919050565b6060602067ffffffffffffffff811115611eef57611eee612c65565b5b6040519080825280601f01601f191660200182016040528015611f215781602001600182028036833780820191505090505b509050816020820152919050565b600060148201519050919050565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611fa357611fa2611f7e565b5b8235905067ffffffffffffffff811115611fc057611fbf611f83565b5b602083019150836020820283011115611fdc57611fdb611f88565b5b9250929050565b60008060208385031215611ffa57611ff9611f74565b5b600083013567ffffffffffffffff81111561201857612017611f79565b5b61202485828601611f8d565b92509250509250929050565b60008115159050919050565b61204581612030565b82525050565b6000602082019050612060600083018461203c565b92915050565b6000819050919050565b61207981612066565b82525050565b60006020820190506120946000830184612070565b92915050565b600067ffffffffffffffff82169050919050565b6120b78161209a565b81146120c257600080fd5b50565b6000813590506120d4816120ae565b92915050565b6000602082840312156120f0576120ef611f74565b5b60006120fe848285016120c5565b91505092915050565b61211081612066565b811461211b57600080fd5b50565b60008135905061212d81612107565b92915050565b60006020828403121561214957612148611f74565b5b60006121578482850161211e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061218b82612160565b9050919050565b61219b81612180565b82525050565b60006020820190506121b66000830184612192565b92915050565b6121c581612180565b81146121d057600080fd5b50565b6000813590506121e2816121bc565b92915050565b6000602082840312156121fe576121fd611f74565b5b600061220c848285016121d3565b91505092915050565b6000806040838503121561222c5761222b611f74565b5b600061223a8582860161211e565b925050602061224b8582860161211e565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122bb5780820151818401526020810190506122a0565b60008484015250505050565b6000601f19601f8301169050919050565b60006122e382612281565b6122ed818561228c565b93506122fd81856020860161229d565b612306816122c7565b840191505092915050565b6000819050919050565b600061233661233161232c84612160565b612311565b612160565b9050919050565b60006123488261231b565b9050919050565b600061235a8261233d565b9050919050565b61236a8161234f565b82525050565b600081519050919050565b600082825260208201905092915050565b600061239782612370565b6123a1818561237b565b93506123b181856020860161229d565b6123ba816122c7565b840191505092915050565b600060608301600083015184820360008601526123e282826122d8565b91505060208301516123f76020860182612361565b506040830151848203604086015261240f828261238c565b9150508091505092915050565b600061242883836123c5565b905092915050565b6000602082019050919050565b600061244882612255565b6124528185612260565b93508360208202850161246485612271565b8060005b858110156124a05784840389528151612481858261241c565b945061248c83612430565b925060208a01995050600181019050612468565b50829750879550505050505092915050565b600060208201905081810360008301526124cc818461243d565b905092915050565b600080604083850312156124eb576124ea611f74565b5b60006124f9858286016120c5565b925050602061250a858286016121d3565b9150509250929050565b61251d8161209a565b82525050565b60006020820190506125386000830184612514565b92915050565b600080fd5b6000606082840312156125595761255861253e565b5b81905092915050565b6000806040838503121561257957612578611f74565b5b6000612587858286016120c5565b925050602083013567ffffffffffffffff8111156125a8576125a7611f79565b5b6125b485828601612543565b9150509250929050565b600080604083850312156125d5576125d4611f74565b5b60006125e3858286016121d3565b92505060206125f4858286016120c5565b9150509250929050565b60008083601f84011261261457612613611f7e565b5b8235905067ffffffffffffffff81111561263157612630611f83565b5b60208301915083602082028301111561264d5761264c611f88565b5b9250929050565b6000819050826020600202820111156126705761266f611f88565b5b92915050565b60008190508260406002028201111561269257612691611f88565b5b92915050565b60008060008060008061014087890312156126b6576126b5611f74565b5b60006126c489828a016120c5565b965050602087013567ffffffffffffffff8111156126e5576126e4611f79565b5b6126f189828a016125fe565b9550955050604061270489828a01612654565b935050608061271589828a01612676565b92505061010061272789828a01612654565b9150509295509295509295565b6000606083016000830151848203600086015261275182826122d8565b91505060208301516127666020860182612361565b506040830151848203604086015261277e828261238c565b9150508091505092915050565b600060208201905081810360008301526127a58184612734565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600161014003833603038112612808576128076127dc565b5b80830191505092915050565b60008083356001602003843603038112612831576128306127dc565b5b80840192508235915067ffffffffffffffff821115612853576128526127e1565b5b60208301925060208202360383131561286f5761286e6127e6565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006128a160208401846120c5565b905092915050565b6128b28161209a565b82525050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126128e4576128e36128c2565b5b83810192508235915060208301925067ffffffffffffffff82111561290c5761290b6128b8565b5b602082023603831315612922576129216128bd565b5b509250929050565b600082825260208201905092915050565b600080fd5b82818337505050565b6000612955838561292a565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156129885761298761293b565b5b602083029250612999838584612940565b82840190509392505050565b600082905092915050565b6129bc60408383612940565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b60006129f783836129b0565b60408301905092915050565b6000604082019050919050565b612a19816129cb565b612a2381846129d6565b9250612a2e826129e1565b8060005b83811015612a6757612a4482846129a5565b612a4e87826129eb565b9650612a5983612a03565b925050600181019050612a32565b505050505050565b60006101408301612a836000840184612892565b612a9060008601826128a9565b50612a9e60208401846128c7565b8583036020870152612ab1838284612949565b92505050612ac260408401846129a5565b612acf60408601826129b0565b50612add60808401846129c0565b612aea6080860182612a10565b50612af96101008401846129a5565b612b076101008601826129b0565b508091505092915050565b6000612b1e8383612a6f565b905092915050565b60008235600161014003833603038112612b4357612b426128c2565b5b82810191505092915050565b6000602082019050919050565b6000612b688385612877565b935083602084028501612b7a84612888565b8060005b87811015612bbe578484038952612b958284612b26565b612b9f8582612b12565b9450612baa83612b4f565b925060208a01995050600181019050612b7e565b50829750879450505050509392505050565b6000604082019050612be56000830186612192565b8181036020830152612bf8818486612b5c565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c3c82612066565b9150612c4783612066565b9250828203905081811115612c5f57612c5e612c02565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612cdb57607f821691505b602082108103612cee57612ced612c94565b5b50919050565b6000612cff82612066565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d3157612d30612c02565b5b600182019050919050565b60008083356001602003843603038112612d5957612d586127dc565b5b80840192508235915067ffffffffffffffff821115612d7b57612d7a6127e1565b5b602083019250600182023603831315612d9757612d966127e6565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612e0c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612dcf565b612e168683612dcf565b95508019841693508086168417925050509392505050565b6000612e49612e44612e3f84612066565b612311565b612066565b9050919050565b6000819050919050565b612e6383612e2e565b612e77612e6f82612e50565b848454612ddc565b825550505050565b600090565b612e8c612e7f565b612e97818484612e5a565b505050565b5b81811015612ebb57612eb0600082612e84565b600181019050612e9d565b5050565b601f821115612f0057612ed181612daa565b612eda84612dbf565b81016020851015612ee9578190505b612efd612ef585612dbf565b830182612e9c565b50505b505050565b600082821c905092915050565b6000612f2360001984600802612f05565b1980831691505092915050565b6000612f3c8383612f12565b9150826002028217905092915050565b612f568383612d9f565b67ffffffffffffffff811115612f6f57612f6e612c65565b5b612f798254612cc3565b612f84828285612ebf565b6000601f831160018114612fb35760008415612fa1578287013590505b612fab8582612f30565b865550613013565b601f198416612fc186612daa565b60005b82811015612fe957848901358255600182019150602085019450602081019050612fc4565b868310156130065784890135613002601f891682612f12565b8355505b6001600288020188555050505b50505050505050565b613027838383612f4c565b505050565b600061303782612180565b9050919050565b6130478161302c565b811461305257600080fd5b50565b600081356130628161303e565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6130988461306b565b9350801983169250808416831791505092915050565b60006130b98261231b565b9050919050565b60006130cb826130ae565b9050919050565b6000819050919050565b6130e5826130c0565b6130f86130f1826130d2565b8354613078565b8255505050565b6000808335600160200384360303811261311c5761311b6127dc565b5b80840192508235915067ffffffffffffffff82111561313e5761313d6127e1565b5b60208301925060018202360383131561315a576131596127e6565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b601f8211156131c3576131948161316d565b61319d84612dbf565b810160208510156131ac578190505b6131c06131b885612dbf565b830182612e9c565b50505b505050565b6131d28383613162565b67ffffffffffffffff8111156131eb576131ea612c65565b5b6131f58254612cc3565b613200828285613182565b6000601f83116001811461322f576000841561321d578287013590505b6132278582612f30565b86555061328f565b601f19841661323d8661316d565b60005b8281101561326557848901358255600182019150602085019450602081019050613240565b86831015613282578489013561327e601f891682612f12565b8355505b6001600288020188555050505b50505050505050565b6132a38383836131c8565b505050565b60008101600083016132ba8185612d3c565b6132c581838661301c565b505050506001810160208301806132db81613055565b90506132e781846130dc565b50505060028101604083016132fc81856130ff565b613307818386613298565b505050505050565b61331982826132a8565b5050565b600082825260208201905092915050565b7f76616c696461746f72206973206e6f742073657420666f72207468697320726560008201527f7175657374206964000000000000000000000000000000000000000000000000602082015250565b600061338a60288361331d565b91506133958261332e565b604082019050919050565b600060208201905081810360008301526133b98161337d565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061341c602e8361331d565b9150613427826133c0565b604082019050919050565b6000602082019050818103600083015261344b8161340f565b9050919050565b6000819050919050565b600060ff82169050919050565b600061348461347f61347a84613452565b612311565b61345c565b9050919050565b61349481613469565b82525050565b60006020820190506134af600083018461348b565b92915050565b7f7265717565737420696420646f65736e27742065786973740000000000000000600082015250565b60006134eb60188361331d565b91506134f6826134b5565b602082019050919050565b6000602082019050818103600083015261351a816134de565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061357d60268361331d565b915061358882613521565b604082019050919050565b600060208201905081810360008301526135ac81613570565b9050919050565b6000813590506135c28161303e565b92915050565b6000602082840312156135de576135dd611f74565b5b60006135ec848285016135b3565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b600061362183856135f5565b935061362e838584613606565b613637836122c7565b840190509392505050565b61364b8161234f565b82525050565b600061365d838561331d565b935061366a838584613606565b613673836122c7565b840190509392505050565b60006080820190506136936000830189612514565b81810360208301526136a6818789613615565b90506136b56040830186613642565b81810360608301526136c8818486613651565b9050979650505050505050565b7f4c656e6774682073686f756c642062652067726561746572207468616e203000600082015250565b600061370b601f8361331d565b9150613716826136d5565b602082019050919050565b6000602082019050818103600083015261373a816136fe565b9050919050565b7f4c656e677468206c696d69742065786365656465640000000000000000000000600082015250565b600061377760158361331d565b915061378282613741565b602082019050919050565b600060208201905081810360008301526137a68161376a565b9050919050565b7f537461727420696e646578206f7574206f6620626f756e647300000000000000600082015250565b60006137e360198361331d565b91506137ee826137ad565b602082019050919050565b60006020820190508181036000830152613812816137d6565b9050919050565b600061382482612066565b915061382f83612066565b925082820190508082111561384757613846612c02565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061388360208361331d565b915061388e8261384d565b602082019050919050565b600060208201905081810360008301526138b281613876565b9050919050565b7f6368616c6c656e67650000000000000000000000000000000000000000000000600082015250565b60006138ef60098361331d565b91506138fa826138b9565b602082019050919050565b6000602082019050818103600083015261391e816138e2565b9050919050565b60008151905061393481612107565b92915050565b6000602082840312156139505761394f611f74565b5b600061395e84828501613925565b91505092915050565b7f6164647265737320696e2070726f6f66206973206e6f7420612073656e64657260008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b60006139c360288361331d565b91506139ce82613967565b604082019050919050565b600060208201905081810360008301526139f2816139b6565b9050919050565b600082825260208201905092915050565b6000613a1683856139f9565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613a4957613a4861293b565b5b602083029250613a5a838584612940565b82840190509392505050565b613a7260408383612940565b5050565b600081905092915050565b613a8a816129cb565b613a948184613a76565b9250613a9f826129e1565b8060005b83811015613ad857613ab582846129a5565b613abf87826129eb565b9650613aca83612a03565b925050600181019050613aa3565b505050505050565b6000613aeb82612370565b613af581856135f5565b9350613b0581856020860161229d565b613b0e816122c7565b840191505092915050565b6000610140820190508181036000830152613b3581888a613a0a565b9050613b446020830187613a66565b613b516060830186613a81565b613b5e60e0830185613a66565b818103610120830152613b718184613ae0565b9050979650505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b613bc5613bc082613b7e565b613baa565b82525050565b600081905092915050565b6000613be182612370565b613beb8185613bcb565b9350613bfb81856020860161229d565b80840191505092915050565b60008160601b9050919050565b6000613c1f82613c07565b9050919050565b6000613c3182613c14565b9050919050565b613c49613c4482612180565b613c26565b82525050565b6000613c5b8286613bb4565b600482019150613c6b8285613bd6565b9150613c778284613c38565b601482019150819050949350505050565b6000613c948284613bd6565b915081905092915050565b7f4661696c656420746f207665726966792070726f6f6620776974686f7574207260008201527f657665727420726561736f6e0000000000000000000000000000000000000000602082015250565b6000613cfb602c8361331d565b9150613d0682613c9f565b604082019050919050565b60006020820190508181036000830152613d2a81613cee565b9050919050565b6000604082019050613d466000830185612192565b613d536020830184612070565b9392505050565b6000604082019050613d6f6000830185612192565b613d7c6020830184612514565b939250505056fea26469706673582212203f2248adc30350b7050e44fcae72423b439c7ab4474af8a316ab1a6bafb79ae564736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063b68967e21161007c578063b68967e2146103d7578063c4d66de8146103f3578063c76d08451461040f578063cb0e0d7d1461043f578063f2fde38b1461046f578063f82ddf0a1461048b57610142565b80638da5cb5b1461030d5780639f5223e01461032b578063a9b9e3e114610347578063ab7bcfb714610377578063b45c0fdf146103a757610142565b80635f9e60d71161010a5780635f9e60d71461022557806360fc1cb5146102555780636508e1b4146102855780636d76b363146102a3578063715018a6146102d357806371941da5146102dd57610142565b806315be5190146101475780631905e7b114610177578063197bf195146101955780632a2d0c47146101c5578063398cfb76146101f5575b600080fd5b610161600480360381019061015c9190611fe3565b6104a7565b60405161016e919061204b565b60405180910390f35b61017f610602565b60405161018c919061207f565b60405180910390f35b6101af60048036038101906101aa91906120da565b610608565b6040516101bc919061204b565b60405180910390f35b6101df60048036038101906101da9190612133565b610629565b6040516101ec91906121a1565b60405180910390f35b61020f600480360381019061020a91906121e8565b61065d565b60405161021c919061204b565b60405180910390f35b61023f600480360381019061023a9190612215565b6106b4565b60405161024c91906124b2565b60405180910390f35b61026f600480360381019061026a91906121e8565b610976565b60405161027c919061204b565b60405180910390f35b61028d610997565b60405161029a919061207f565b60405180910390f35b6102bd60048036038101906102b891906124d4565b6109a5565b6040516102ca919061204b565b60405180910390f35b6102db6109d5565b005b6102f760048036038101906102f29190612133565b6109e9565b6040516103049190612523565b60405180910390f35b610315610a28565b60405161032291906121a1565b60405180910390f35b61034560048036038101906103409190612562565b610a51565b005b610361600480360381019061035c91906121e8565b610aec565b60405161036e919061204b565b60405180910390f35b610391600480360381019061038c91906120da565b610c69565b60405161039e919061204b565b60405180910390f35b6103c160048036038101906103bc91906125be565b610d00565b6040516103ce919061204b565b60405180910390f35b6103f160048036038101906103ec9190612698565b610d30565b005b61040d600480360381019061040891906121e8565b610fae565b005b610429600480360381019061042491906120da565b6110ee565b604051610436919061278b565b60405180910390f35b610459600480360381019061045491906121e8565b6112f2565b604051610466919061207f565b60405180910390f35b610489600480360381019061048491906121e8565b61130b565b005b6104a560048036038101906104a09190612562565b61138e565b005b60008083839050905060005b818110156105b4576105a78585838181106104d1576104d06127ad565b5b90506020028101906104e391906127eb565b60000160208101906104f591906120da565b868684818110610508576105076127ad565b5b905060200281019061051a91906127eb565b80602001906105299190612814565b88888681811061053c5761053b6127ad565b5b905060200281019061054e91906127eb565b604001898987818110610564576105636127ad565b5b905060200281019061057691906127eb565b6080018a8a8881811061058c5761058b6127ad565b5b905060200281019061059e91906127eb565b61010001610d30565b80806001019150506104b3565b507fefbe0f7f95f99f3446b18c397ba10fec2af0a6ef272d84266ccb64303fd469ef3385856040516105e893929190612bd0565b60405180910390a16105f933610aec565b91505092915050565b6103e881565b6102286020528060005260406000206000915054906101000a900460ff1681565b61022b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061022a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60606000806106cd6101f78054905086866103e861141c565b91509150600082826106df9190612c31565b67ffffffffffffffff8111156106f8576106f7612c65565b5b60405190808252806020026020018201604052801561073157816020015b61071e611f3d565b8152602001906001900390816107165790505b50905060008390505b82811015610969576101f660006101f7838154811061075c5761075b6127ad565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060600160405290816000820180546107c390612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546107ef90612cc3565b801561083c5780601f106108115761010080835404028352916020019161083c565b820191906000526020600020905b81548152906001019060200180831161081f57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546108ab90612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546108d790612cc3565b80156109245780601f106108f957610100808354040283529160200191610924565b820191906000526020600020905b81548152906001019060200180831161090757829003601f168201915b50505050508152505082858361093a9190612c31565b8151811061094b5761094a6127ad565b5b6020026020010181905250808061096190612cf4565b91505061073a565b5080935050505092915050565b61022a6020528060005260406000206000915054906101000a900460ff1681565b60006101f780549050905090565b6102296020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6109dd611513565b6109e76000611591565b565b61022781815481106109fa57600080fd5b9060005260206000209060049182820401919006600802915054906101000a900467ffffffffffffffff1681565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a59611513565b806101f660008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208181610a8e919061330f565b9050506101f78290806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b60008060019050600061022780549050905060005b81811015610bcf5761022960006102278381548110610b2357610b226127ad565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1692508215610bcf578080600101915050610b01565b508161022a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f14e9c7a267790ab46f2189d66cb068dbf65a27e7f844cb8aded907134d36467484604051610c5791906121a1565b60405180910390a18192505050919050565b600080600090505b6101f780549050811015610cf5578267ffffffffffffffff166101f78281548110610c9f57610c9e6127ad565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1603610ce2576001915050610cfb565b8080610ced90612cf4565b915050610c71565b50600090505b919050565b6101f56020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff166101f660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de1906133a0565b60405180910390fd5b610e8186868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611656565b610e908686868686863361176f565b5060016101f560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610fa686868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a5b565b505050505050565b60008060019054906101000a900460ff16159050808015610fdf5750600160008054906101000a900460ff1660ff16105b8061100c5750610fee30611c2c565b15801561100b5750600160008054906101000a900460ff1660ff16145b5b61104b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104290613432565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611088576001600060016101000a81548160ff0219169083151502179055505b61109182611591565b80156110ea5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516110e1919061349a565b60405180910390a15b5050565b6110f6611f3d565b6110ff82610c69565b61113e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113590613501565b60405180910390fd5b6101f660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461118190612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546111ad90612cc3565b80156111fa5780601f106111cf576101008083540402835291602001916111fa565b820191906000526020600020905b8154815290600101906020018083116111dd57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461126990612cc3565b80601f016020809104026020016040519081016040528092919081815260200182805461129590612cc3565b80156112e25780601f106112b7576101008083540402835291602001916112e2565b820191906000526020600020905b8154815290600101906020018083116112c557829003601f168201915b5050505050815250509050919050565b61022c6020528060005260406000206000915090505481565b611313611513565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137990613593565b60405180910390fd5b61138b81611591565b50565b611396611513565b6113a08282610a51565b7febf5fc5d525575febff148871346e1458de02c705c900ba0bc9b5361d5eba08a828280604001906113d291906130ff565b8460200160208101906113e591906135c8565b8580600001906113f59190612d3c565b6040516114079695949392919061367e565b60405180910390a161141882611c4f565b5050565b60008060008411611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145990613721565b60405180910390fd5b828411156114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149c9061378d565b60405180910390fd5b8585106114e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114de906137f9565b60405180910390fd5b600084866114f59190613819565b905086811115611503578690505b8581925092505094509492505050565b61151b611d5c565b73ffffffffffffffffffffffffffffffffffffffff16611539610a28565b73ffffffffffffffffffffffffffffffffffffffff161461158f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158690613899565b60405180910390fd5b565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006116f2838373ffffffffffffffffffffffffffffffffffffffff1663b16a394f6040518163ffffffff1660e01b815260040161169390613905565b602060405180830381865afa1580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d4919061393a565b815181106116e5576116e46127ad565b5b6020026020010151611d64565b90508073ffffffffffffffffffffffffffffffffffffffff16611713611d5c565b73ffffffffffffffffffffffffffffffffffffffff1614611769576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611760906139d9565b60405180910390fd5b50505050565b6000806101f660008a67ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206040518060600160405290816000820180546117b590612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546117e190612cc3565b801561182e5780601f106118035761010080835404028352916020019161182e565b820191906000526020600020905b81548152906001019060200180831161181157829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461189d90612cc3565b80601f01602080910402602001604051908101604052809291908181526020018280546118c990612cc3565b80156119165780601f106118eb57610100808354040283529160200191611916565b820191906000526020600020905b8154815290600101906020018083116118f957829003601f168201915b50505050508152505090506000635307e79f60e01b90506000818a8a8a8a8a886040015160405160200161194f96959493929190613b19565b6040516020818303038152906040528660405160200161197193929190613c4f565b6040516020818303038152906040529050600080846020015173ffffffffffffffffffffffffffffffffffffffff16836040516119ae9190613c88565b6000604051808303816000865af19150503d80600081146119eb576040519150601f19603f3d011682016040523d82523d6000602084013e6119f0565b606091505b509150915081611a4857600081511115611a0d5780518082602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3f90613d11565b60405180910390fd5b8195505050505050979650505050505050565b600082600181518110611a7157611a706127ad565b5b602002602001015190508061022c6000611a89611d5c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611acf611d5c565b61022b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f646b8bd6cf28645be11999db4a2cdbe4fdd61ea8f95a3877ffc1258f903be3c2611b4a611d5c565b82604051611b59929190613d31565b60405180910390a1600161022960008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206000611b95611d5c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f681ea469fc50f02bc3788c40f25e78e5eaa619484685a28003af83fb0dc8dd67611c0f611d5c565b85604051611c1e929190613d5a565b60405180910390a150505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61022860008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d59576102278190806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600161022860008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f56b7ddf97528e633ab570995fc0cf2e93f6eb557b29e5d715965018a34f4295e81604051611d509190612523565b60405180910390a15b50565b600033905090565b6000611d7f611d7a611d7584611d86565b611ed2565b611f2f565b9050919050565b600081905060087eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff8216901b60087fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff008316901c17905060107dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff8216901b60107fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00008316901c17905060207bffffffff00000000ffffffff00000000ffffffff00000000ffffffff8216901b60207fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008316901c179050604077ffffffffffffffff0000000000000000ffffffffffffffff8216901b60407fffffffffffffffff0000000000000000ffffffffffffffff00000000000000008316901c179050608081901b608082901c179050919050565b6060602067ffffffffffffffff811115611eef57611eee612c65565b5b6040519080825280601f01601f191660200182016040528015611f215781602001600182028036833780820191505090505b509050816020820152919050565b600060148201519050919050565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611fa357611fa2611f7e565b5b8235905067ffffffffffffffff811115611fc057611fbf611f83565b5b602083019150836020820283011115611fdc57611fdb611f88565b5b9250929050565b60008060208385031215611ffa57611ff9611f74565b5b600083013567ffffffffffffffff81111561201857612017611f79565b5b61202485828601611f8d565b92509250509250929050565b60008115159050919050565b61204581612030565b82525050565b6000602082019050612060600083018461203c565b92915050565b6000819050919050565b61207981612066565b82525050565b60006020820190506120946000830184612070565b92915050565b600067ffffffffffffffff82169050919050565b6120b78161209a565b81146120c257600080fd5b50565b6000813590506120d4816120ae565b92915050565b6000602082840312156120f0576120ef611f74565b5b60006120fe848285016120c5565b91505092915050565b61211081612066565b811461211b57600080fd5b50565b60008135905061212d81612107565b92915050565b60006020828403121561214957612148611f74565b5b60006121578482850161211e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061218b82612160565b9050919050565b61219b81612180565b82525050565b60006020820190506121b66000830184612192565b92915050565b6121c581612180565b81146121d057600080fd5b50565b6000813590506121e2816121bc565b92915050565b6000602082840312156121fe576121fd611f74565b5b600061220c848285016121d3565b91505092915050565b6000806040838503121561222c5761222b611f74565b5b600061223a8582860161211e565b925050602061224b8582860161211e565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122bb5780820151818401526020810190506122a0565b60008484015250505050565b6000601f19601f8301169050919050565b60006122e382612281565b6122ed818561228c565b93506122fd81856020860161229d565b612306816122c7565b840191505092915050565b6000819050919050565b600061233661233161232c84612160565b612311565b612160565b9050919050565b60006123488261231b565b9050919050565b600061235a8261233d565b9050919050565b61236a8161234f565b82525050565b600081519050919050565b600082825260208201905092915050565b600061239782612370565b6123a1818561237b565b93506123b181856020860161229d565b6123ba816122c7565b840191505092915050565b600060608301600083015184820360008601526123e282826122d8565b91505060208301516123f76020860182612361565b506040830151848203604086015261240f828261238c565b9150508091505092915050565b600061242883836123c5565b905092915050565b6000602082019050919050565b600061244882612255565b6124528185612260565b93508360208202850161246485612271565b8060005b858110156124a05784840389528151612481858261241c565b945061248c83612430565b925060208a01995050600181019050612468565b50829750879550505050505092915050565b600060208201905081810360008301526124cc818461243d565b905092915050565b600080604083850312156124eb576124ea611f74565b5b60006124f9858286016120c5565b925050602061250a858286016121d3565b9150509250929050565b61251d8161209a565b82525050565b60006020820190506125386000830184612514565b92915050565b600080fd5b6000606082840312156125595761255861253e565b5b81905092915050565b6000806040838503121561257957612578611f74565b5b6000612587858286016120c5565b925050602083013567ffffffffffffffff8111156125a8576125a7611f79565b5b6125b485828601612543565b9150509250929050565b600080604083850312156125d5576125d4611f74565b5b60006125e3858286016121d3565b92505060206125f4858286016120c5565b9150509250929050565b60008083601f84011261261457612613611f7e565b5b8235905067ffffffffffffffff81111561263157612630611f83565b5b60208301915083602082028301111561264d5761264c611f88565b5b9250929050565b6000819050826020600202820111156126705761266f611f88565b5b92915050565b60008190508260406002028201111561269257612691611f88565b5b92915050565b60008060008060008061014087890312156126b6576126b5611f74565b5b60006126c489828a016120c5565b965050602087013567ffffffffffffffff8111156126e5576126e4611f79565b5b6126f189828a016125fe565b9550955050604061270489828a01612654565b935050608061271589828a01612676565b92505061010061272789828a01612654565b9150509295509295509295565b6000606083016000830151848203600086015261275182826122d8565b91505060208301516127666020860182612361565b506040830151848203604086015261277e828261238c565b9150508091505092915050565b600060208201905081810360008301526127a58184612734565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600161014003833603038112612808576128076127dc565b5b80830191505092915050565b60008083356001602003843603038112612831576128306127dc565b5b80840192508235915067ffffffffffffffff821115612853576128526127e1565b5b60208301925060208202360383131561286f5761286e6127e6565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006128a160208401846120c5565b905092915050565b6128b28161209a565b82525050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126128e4576128e36128c2565b5b83810192508235915060208301925067ffffffffffffffff82111561290c5761290b6128b8565b5b602082023603831315612922576129216128bd565b5b509250929050565b600082825260208201905092915050565b600080fd5b82818337505050565b6000612955838561292a565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156129885761298761293b565b5b602083029250612999838584612940565b82840190509392505050565b600082905092915050565b6129bc60408383612940565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b60006129f783836129b0565b60408301905092915050565b6000604082019050919050565b612a19816129cb565b612a2381846129d6565b9250612a2e826129e1565b8060005b83811015612a6757612a4482846129a5565b612a4e87826129eb565b9650612a5983612a03565b925050600181019050612a32565b505050505050565b60006101408301612a836000840184612892565b612a9060008601826128a9565b50612a9e60208401846128c7565b8583036020870152612ab1838284612949565b92505050612ac260408401846129a5565b612acf60408601826129b0565b50612add60808401846129c0565b612aea6080860182612a10565b50612af96101008401846129a5565b612b076101008601826129b0565b508091505092915050565b6000612b1e8383612a6f565b905092915050565b60008235600161014003833603038112612b4357612b426128c2565b5b82810191505092915050565b6000602082019050919050565b6000612b688385612877565b935083602084028501612b7a84612888565b8060005b87811015612bbe578484038952612b958284612b26565b612b9f8582612b12565b9450612baa83612b4f565b925060208a01995050600181019050612b7e565b50829750879450505050509392505050565b6000604082019050612be56000830186612192565b8181036020830152612bf8818486612b5c565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c3c82612066565b9150612c4783612066565b9250828203905081811115612c5f57612c5e612c02565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612cdb57607f821691505b602082108103612cee57612ced612c94565b5b50919050565b6000612cff82612066565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d3157612d30612c02565b5b600182019050919050565b60008083356001602003843603038112612d5957612d586127dc565b5b80840192508235915067ffffffffffffffff821115612d7b57612d7a6127e1565b5b602083019250600182023603831315612d9757612d966127e6565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612e0c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612dcf565b612e168683612dcf565b95508019841693508086168417925050509392505050565b6000612e49612e44612e3f84612066565b612311565b612066565b9050919050565b6000819050919050565b612e6383612e2e565b612e77612e6f82612e50565b848454612ddc565b825550505050565b600090565b612e8c612e7f565b612e97818484612e5a565b505050565b5b81811015612ebb57612eb0600082612e84565b600181019050612e9d565b5050565b601f821115612f0057612ed181612daa565b612eda84612dbf565b81016020851015612ee9578190505b612efd612ef585612dbf565b830182612e9c565b50505b505050565b600082821c905092915050565b6000612f2360001984600802612f05565b1980831691505092915050565b6000612f3c8383612f12565b9150826002028217905092915050565b612f568383612d9f565b67ffffffffffffffff811115612f6f57612f6e612c65565b5b612f798254612cc3565b612f84828285612ebf565b6000601f831160018114612fb35760008415612fa1578287013590505b612fab8582612f30565b865550613013565b601f198416612fc186612daa565b60005b82811015612fe957848901358255600182019150602085019450602081019050612fc4565b868310156130065784890135613002601f891682612f12565b8355505b6001600288020188555050505b50505050505050565b613027838383612f4c565b505050565b600061303782612180565b9050919050565b6130478161302c565b811461305257600080fd5b50565b600081356130628161303e565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6130988461306b565b9350801983169250808416831791505092915050565b60006130b98261231b565b9050919050565b60006130cb826130ae565b9050919050565b6000819050919050565b6130e5826130c0565b6130f86130f1826130d2565b8354613078565b8255505050565b6000808335600160200384360303811261311c5761311b6127dc565b5b80840192508235915067ffffffffffffffff82111561313e5761313d6127e1565b5b60208301925060018202360383131561315a576131596127e6565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b601f8211156131c3576131948161316d565b61319d84612dbf565b810160208510156131ac578190505b6131c06131b885612dbf565b830182612e9c565b50505b505050565b6131d28383613162565b67ffffffffffffffff8111156131eb576131ea612c65565b5b6131f58254612cc3565b613200828285613182565b6000601f83116001811461322f576000841561321d578287013590505b6132278582612f30565b86555061328f565b601f19841661323d8661316d565b60005b8281101561326557848901358255600182019150602085019450602081019050613240565b86831015613282578489013561327e601f891682612f12565b8355505b6001600288020188555050505b50505050505050565b6132a38383836131c8565b505050565b60008101600083016132ba8185612d3c565b6132c581838661301c565b505050506001810160208301806132db81613055565b90506132e781846130dc565b50505060028101604083016132fc81856130ff565b613307818386613298565b505050505050565b61331982826132a8565b5050565b600082825260208201905092915050565b7f76616c696461746f72206973206e6f742073657420666f72207468697320726560008201527f7175657374206964000000000000000000000000000000000000000000000000602082015250565b600061338a60288361331d565b91506133958261332e565b604082019050919050565b600060208201905081810360008301526133b98161337d565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061341c602e8361331d565b9150613427826133c0565b604082019050919050565b6000602082019050818103600083015261344b8161340f565b9050919050565b6000819050919050565b600060ff82169050919050565b600061348461347f61347a84613452565b612311565b61345c565b9050919050565b61349481613469565b82525050565b60006020820190506134af600083018461348b565b92915050565b7f7265717565737420696420646f65736e27742065786973740000000000000000600082015250565b60006134eb60188361331d565b91506134f6826134b5565b602082019050919050565b6000602082019050818103600083015261351a816134de565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061357d60268361331d565b915061358882613521565b604082019050919050565b600060208201905081810360008301526135ac81613570565b9050919050565b6000813590506135c28161303e565b92915050565b6000602082840312156135de576135dd611f74565b5b60006135ec848285016135b3565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b600061362183856135f5565b935061362e838584613606565b613637836122c7565b840190509392505050565b61364b8161234f565b82525050565b600061365d838561331d565b935061366a838584613606565b613673836122c7565b840190509392505050565b60006080820190506136936000830189612514565b81810360208301526136a6818789613615565b90506136b56040830186613642565b81810360608301526136c8818486613651565b9050979650505050505050565b7f4c656e6774682073686f756c642062652067726561746572207468616e203000600082015250565b600061370b601f8361331d565b9150613716826136d5565b602082019050919050565b6000602082019050818103600083015261373a816136fe565b9050919050565b7f4c656e677468206c696d69742065786365656465640000000000000000000000600082015250565b600061377760158361331d565b915061378282613741565b602082019050919050565b600060208201905081810360008301526137a68161376a565b9050919050565b7f537461727420696e646578206f7574206f6620626f756e647300000000000000600082015250565b60006137e360198361331d565b91506137ee826137ad565b602082019050919050565b60006020820190508181036000830152613812816137d6565b9050919050565b600061382482612066565b915061382f83612066565b925082820190508082111561384757613846612c02565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061388360208361331d565b915061388e8261384d565b602082019050919050565b600060208201905081810360008301526138b281613876565b9050919050565b7f6368616c6c656e67650000000000000000000000000000000000000000000000600082015250565b60006138ef60098361331d565b91506138fa826138b9565b602082019050919050565b6000602082019050818103600083015261391e816138e2565b9050919050565b60008151905061393481612107565b92915050565b6000602082840312156139505761394f611f74565b5b600061395e84828501613925565b91505092915050565b7f6164647265737320696e2070726f6f66206973206e6f7420612073656e64657260008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b60006139c360288361331d565b91506139ce82613967565b604082019050919050565b600060208201905081810360008301526139f2816139b6565b9050919050565b600082825260208201905092915050565b6000613a1683856139f9565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613a4957613a4861293b565b5b602083029250613a5a838584612940565b82840190509392505050565b613a7260408383612940565b5050565b600081905092915050565b613a8a816129cb565b613a948184613a76565b9250613a9f826129e1565b8060005b83811015613ad857613ab582846129a5565b613abf87826129eb565b9650613aca83612a03565b925050600181019050613aa3565b505050505050565b6000613aeb82612370565b613af581856135f5565b9350613b0581856020860161229d565b613b0e816122c7565b840191505092915050565b6000610140820190508181036000830152613b3581888a613a0a565b9050613b446020830187613a66565b613b516060830186613a81565b613b5e60e0830185613a66565b818103610120830152613b718184613ae0565b9050979650505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b613bc5613bc082613b7e565b613baa565b82525050565b600081905092915050565b6000613be182612370565b613beb8185613bcb565b9350613bfb81856020860161229d565b80840191505092915050565b60008160601b9050919050565b6000613c1f82613c07565b9050919050565b6000613c3182613c14565b9050919050565b613c49613c4482612180565b613c26565b82525050565b6000613c5b8286613bb4565b600482019150613c6b8285613bd6565b9150613c778284613c38565b601482019150819050949350505050565b6000613c948284613bd6565b915081905092915050565b7f4661696c656420746f207665726966792070726f6f6620776974686f7574207260008201527f657665727420726561736f6e0000000000000000000000000000000000000000602082015250565b6000613cfb602c8361331d565b9150613d0682613c9f565b604082019050919050565b60006020820190508181036000830152613d2a81613cee565b9050919050565b6000604082019050613d466000830185612192565b613d536020830184612070565b9392505050565b6000604082019050613d6f6000830185612192565b613d7c6020830184612514565b939250505056fea26469706673582212203f2248adc30350b7050e44fcae72423b439c7ab4474af8a316ab1a6bafb79ae564736f6c63430008100033",
  "devdoc": {
    "events": {
      "AddressIdConnection(address,uint256)": {
        "details": "Event emitted when an address is associated with a Polygon ID"
      },
      "RequestRegistered(uint64)": {
        "details": "Event emitted when a ZKPRequest is registered in the verifier"
      },
      "SubmitedAllZKPsForUser(address,(uint64,uint256[],uint256[2],uint256[2][2],uint256[2])[])": {
        "details": "Event emitted when all ZKPs for a user are submitted"
      },
      "UserAllowedForRequest(address,uint64)": {
        "details": "Event emitted when a user address is allowed for a request ID"
      },
      "UserAllowedForScenario(address)": {
        "details": "Event emitted when an address is allowed for the scenario verifier"
      }
    },
    "kind": "dev",
    "methods": {
      "allowUserForScenario((uint64,uint256[],uint256[2],uint256[2][2],uint256[2])[])": {
        "params": {
          "zkps": "Array of ZKPs to submit"
        },
        "returns": {
          "_0": "Boolean indicating the success of the operation"
        }
      },
      "finalizeAllowListScenario(address)": {
        "details": "Once the user is allowed for all rules, call this function to finalize (this is more gas efficient than iterating over rules on every submission)",
        "params": {
          "user": "The address of the user to check"
        },
        "returns": {
          "_0": "isUserWhitelisted True if the user is allowed for all rules"
        }
      },
      "initialize(address)": {
        "details": "Initialize proxied contract with owner",
        "params": {
          "newOwner": "The address of the thing owner"
        }
      },
      "isAllowedForScenario(address)": {
        "params": {
          "user": "The address of the user to check"
        },
        "returns": {
          "_0": "Boolean indicating if the user is allowed for the scenario"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setNexeraZKPRequest(uint64,(string,address,bytes))": {
        "params": {
          "request": "The ZKP request data.",
          "requestId": "The ID of the request to be set."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ScenarioVerifier",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowUserForScenario((uint64,uint256[],uint256[2],uint256[2][2],uint256[2])[])": {
        "notice": "Submits all ZKPs and allowlists a user in one call"
      },
      "finalizeAllowListScenario(address)": {
        "notice": "Finalizes the whitelisting of a user for all rules"
      },
      "isAllowedForScenario(address)": {
        "notice": "Checks if a user is allowed for the scenario"
      },
      "setNexeraZKPRequest(uint64,(string,address,bytes))": {
        "notice": "Sets a Nexera ZKP request and emits an event."
      }
    },
    "notice": "This contract manages rules for a scenario using ZKP requests, including setting a request for a rule and allowing users who submit the right ZKPs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3607,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3610,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3443,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2389,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "__gap_before",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)500_storage"
      },
      {
        "astId": 2395,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "proofs",
        "offset": 0,
        "slot": "501",
        "type": "t_mapping(t_address,t_mapping(t_uint64,t_bool))"
      },
      {
        "astId": 2400,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "_requests",
        "offset": 0,
        "slot": "502",
        "type": "t_mapping(t_uint64,t_struct(ZKPRequest)1422_storage)"
      },
      {
        "astId": 2403,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "_requestIds",
        "offset": 0,
        "slot": "503",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 2407,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "__gap_after",
        "offset": 0,
        "slot": "504",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 7254,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "registeredRuleIDs",
        "offset": 0,
        "slot": "551",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 7258,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "isRuleIdRegistered",
        "offset": 0,
        "slot": "552",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 7264,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "queryRequestWhitelist",
        "offset": 0,
        "slot": "553",
        "type": "t_mapping(t_uint64,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7268,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "scenarioAllowList",
        "offset": 0,
        "slot": "554",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7272,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "idToAddress",
        "offset": 0,
        "slot": "555",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7276,
        "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
        "label": "addressToId",
        "offset": 0,
        "slot": "556",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)500_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[500]",
        "numberOfBytes": "16000"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICircuitValidator)1237": {
        "encoding": "inplace",
        "label": "contract ICircuitValidator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint64,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint64 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint64,t_struct(ZKPRequest)1422_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct IZKPVerifier.ZKPRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(ZKPRequest)1422_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ZKPRequest)1422_storage": {
        "encoding": "inplace",
        "label": "struct IZKPVerifier.ZKPRequest",
        "members": [
          {
            "astId": 1416,
            "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1419,
            "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
            "label": "validator",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ICircuitValidator)1237"
          },
          {
            "astId": 1421,
            "contract": "contracts/ScenarioVerifier.sol:ScenarioVerifier",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}