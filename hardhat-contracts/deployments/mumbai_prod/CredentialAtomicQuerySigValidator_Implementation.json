{
  "address": "0xFD07540ffBD4Dff2fF348b6D08020330679C7b3a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedCircuitIds",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "ids",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gistRootExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stateContractAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "inputIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        }
      ],
      "name": "parseCommonPubSignals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "merklized",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuerState",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circuitQueryHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "challenge",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gistRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuerID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "isRevocationChecked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuerClaimNonRevState",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CredentialAtomicQueryValidator.CommonPubSignals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proofExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revocationStateExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setGISTRootExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setProofExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setRevocationStateExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stateContractAddr",
          "type": "address"
        }
      ],
      "name": "setStateAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "contract IState",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf14354c085fb8e1b866746035ce3c70e6586c1f64d4385f7aba0f8d7100700da",
  "receipt": {
    "to": null,
    "from": "0x0BAd9DaD98143b2E946e8A40E4f27537be2f55E2",
    "contractAddress": "0xFD07540ffBD4Dff2fF348b6D08020330679C7b3a",
    "transactionIndex": 2,
    "gasUsed": "3121335",
    "logsBloom": "0x
    "blockHash": "0xe95f61b648a0aacd535a93b995c5901d6af65067f562f4902e0a518da35ea7b8",
    "transactionHash": "0xf14354c085fb8e1b866746035ce3c70e6586c1f64d4385f7aba0f8d7100700da",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 44625792,
        "transactionHash": "0xf14354c085fb8e1b866746035ce3c70e6586c1f64d4385f7aba0f8d7100700da",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000bad9dad98143b2e946e8a40e4f27537be2f55e2",
          "0x00000000000000000000000022b64229c41429a023549fdab3385893b579327a"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000020b6922db6dbc70000000000000000000000000000000000000000000000012ce4d8cc610f1d2200000000000000000000000000000000000000000000004764d7a522c4e405f40000000000000000000000000000000000000000000000012cc4223a3358415b00000000000000000000000000000000000000000000004764f85bb4f29ae1bb",
        "logIndex": 8,
        "blockHash": "0xe95f61b648a0aacd535a93b995c5901d6af65067f562f4902e0a518da35ea7b8"
      }
    ],
    "blockNumber": 44625792,
    "cumulativeGasUsed": "3341128",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "01f3f48de4e4d02d39c4cf8b4c5f3a4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedCircuitIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"ids\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gistRootExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stateContractAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"inputIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"}],\"name\":\"parseCommonPubSignals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merklized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuerState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitQueryHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challenge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gistRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isRevocationChecked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuerClaimNonRevState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CredentialAtomicQueryValidator.CommonPubSignals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revocationStateExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setGISTRootExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setProofExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setRevocationStateExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stateContractAddr\",\"type\":\"address\"}],\"name\":\"setStateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract IState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"VERSION\":{\"details\":\"Version of contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/validators/CredentialAtomicQuerySigValidator.sol\":\"CredentialAtomicQuerySigValidator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@iden3/contracts/interfaces/ICircuitValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\ninterface ICircuitValidator {\\n    function verify(\\n        uint256[] memory inputs,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        bytes calldata data\\n    ) external view;\\n\\n    function getSupportedCircuitIds() external view returns (string[] memory ids);\\n\\n    function inputIndexOf(string memory name) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe18f12a89113f38d6c91a01303d80cc6fc46815e7bf511ce6343b5d13ab5a03e\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/interfaces/IState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nuint256 constant MAX_SMT_DEPTH = 64;\\n\\ninterface IState {\\n    /**\\n     * @dev Struct for public interfaces to represent a state information.\\n     * @param id An identity.\\n     * @param state A state.\\n     * @param replacedByState A state, which replaced this state for the identity.\\n     * @param createdAtTimestamp A time when the state was created.\\n     * @param replacedAtTimestamp A time when the state was replaced by the next identity state.\\n     * @param createdAtBlock A block number when the state was created.\\n     * @param replacedAtBlock A block number when the state was replaced by the next identity state.\\n     */\\n    struct StateInfo {\\n        uint256 id;\\n        uint256 state;\\n        uint256 replacedByState;\\n        uint256 createdAtTimestamp;\\n        uint256 replacedAtTimestamp;\\n        uint256 createdAtBlock;\\n        uint256 replacedAtBlock;\\n    }\\n\\n    /**\\n     * @dev Struct for public interfaces to represent GIST root information.\\n     * @param root This GIST root.\\n     * @param replacedByRoot A root, which replaced this root.\\n     * @param createdAtTimestamp A time, when the root was saved to blockchain.\\n     * @param replacedAtTimestamp A time, when the root was replaced by the next root in blockchain.\\n     * @param createdAtBlock A number of block, when the root was saved to blockchain.\\n     * @param replacedAtBlock A number of block, when the root was replaced by the next root in blockchain.\\n     */\\n    struct GistRootInfo {\\n        uint256 root;\\n        uint256 replacedByRoot;\\n        uint256 createdAtTimestamp;\\n        uint256 replacedAtTimestamp;\\n        uint256 createdAtBlock;\\n        uint256 replacedAtBlock;\\n    }\\n\\n    /**\\n     * @dev Struct for public interfaces to represent GIST proof information.\\n     * @param root This GIST root.\\n     * @param existence A flag, which shows if the leaf index exists in the GIST.\\n     * @param siblings An array of GIST sibling node hashes.\\n     * @param index An index of the leaf in the GIST.\\n     * @param value A value of the leaf in the GIST.\\n     * @param auxExistence A flag, which shows if the auxiliary leaf exists in the GIST.\\n     * @param auxIndex An index of the auxiliary leaf in the GIST.\\n     * @param auxValue An value of the auxiliary leaf in the GIST.\\n     */\\n    struct GistProof {\\n        uint256 root;\\n        bool existence;\\n        uint256[MAX_SMT_DEPTH] siblings;\\n        uint256 index;\\n        uint256 value;\\n        bool auxExistence;\\n        uint256 auxIndex;\\n        uint256 auxValue;\\n    }\\n\\n    /**\\n     * @dev Retrieve last state information of specific id.\\n     * @param id An identity.\\n     * @return The state info.\\n     */\\n    function getStateInfoById(uint256 id) external view returns (StateInfo memory);\\n\\n    /**\\n     * @dev Retrieve state information by id and state.\\n     * @param id An identity.\\n     * @param state A state.\\n     * @return The state info.\\n     */\\n    function getStateInfoByIdAndState(\\n        uint256 id,\\n        uint256 state\\n    ) external view returns (StateInfo memory);\\n\\n    /**\\n     * @dev Retrieve the specific GIST root information.\\n     * @param root GIST root.\\n     * @return The GIST root info.\\n     */\\n    function getGISTRootInfo(uint256 root) external view returns (GistRootInfo memory);\\n\\n    /**\\n     * @dev Get defaultIdType\\n     * @return defaultIdType\\n     */\\n    function getDefaultIdType() external view returns (bytes2);\\n\\n    /**\\n     * @dev Performs state transition\\n     * @param id Identifier of the identity\\n     * @param oldState Previous state of the identity\\n     * @param newState New state of the identity\\n     * @param isOldStateGenesis Flag if previous identity state is genesis\\n     * @param a Proof.A\\n     * @param b Proof.B\\n     * @param c Proof.C\\n     */\\n    function transitState(\\n        uint256 id,\\n        uint256 oldState,\\n        uint256 newState,\\n        bool isOldStateGenesis,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c\\n    ) external;\\n\\n    /**\\n     * @dev Performs state transition\\n     * @param id Identity\\n     * @param oldState Previous identity state\\n     * @param newState New identity state\\n     * @param isOldStateGenesis Is the previous state genesis?\\n     * @param methodId State transition method id\\n     * @param methodParams State transition method-specific params\\n     */\\n    function transitStateGeneric(\\n        uint256 id,\\n        uint256 oldState,\\n        uint256 newState,\\n        bool isOldStateGenesis,\\n        uint256 methodId,\\n        bytes calldata methodParams\\n    ) external;\\n\\n    /**\\n     * @dev Check if identity exists.\\n     * @param id Identity\\n     * @return True if the identity exists\\n     */\\n    function idExists(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Check if state exists.\\n     * @param id Identity\\n     * @param state State\\n     * @return True if the state exists\\n     */\\n    function stateExists(uint256 id, uint256 state) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x05b4722a916a6a28cd6fb0f70deb462b26cbbd04c860d7a32ce5f445954c7316\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\ninterface IVerifier {\\n    function verify(\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        uint256[] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x1c41773a921bc96e857679d6f42fa50c3d36ddd381afc80dc428df476dde4815\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/GenesisUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {PrimitiveTypeUtils} from \\\"./PrimitiveTypeUtils.sol\\\";\\n\\nlibrary GenesisUtils {\\n    /**\\n     *   @dev sum\\n     */\\n    function sum(bytes memory array) internal pure returns (uint16 s) {\\n        require(array.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        for (uint256 i = 0; i < array.length; ++i) {\\n            s += uint16(uint8(array[i]));\\n        }\\n    }\\n\\n    /**\\n     * @dev isGenesisState\\n     */\\n    function isGenesisState(uint256 id, uint256 idState) internal pure returns (bool) {\\n        bytes2 idType = bytes2(\\n            PrimitiveTypeUtils.uint256ToBytes(PrimitiveTypeUtils.reverseUint256(id))\\n        );\\n        uint256 computedId = calcIdFromGenesisState(idType, idState);\\n        return id == computedId;\\n    }\\n\\n    /**\\n     * @dev calcIdFromGenesisState\\n     */\\n    function calcIdFromGenesisState(\\n        bytes2 idType,\\n        uint256 idState\\n    ) internal pure returns (uint256) {\\n        bytes memory userStateB1 = PrimitiveTypeUtils.uint256ToBytes(\\n            PrimitiveTypeUtils.reverseUint256(idState)\\n        );\\n\\n        bytes memory cutState = PrimitiveTypeUtils.slice(userStateB1, userStateB1.length - 27, 27);\\n\\n        bytes memory beforeChecksum = PrimitiveTypeUtils.concat(abi.encodePacked(idType), cutState);\\n        require(beforeChecksum.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        uint16 checksum = PrimitiveTypeUtils.reverseUint16(sum(beforeChecksum));\\n\\n        bytes memory checkSumBytes = abi.encodePacked(checksum);\\n\\n        bytes memory idBytes = PrimitiveTypeUtils.concat(beforeChecksum, checkSumBytes);\\n        require(idBytes.length == 31, \\\"idBytes requires 31 length array\\\");\\n\\n        return PrimitiveTypeUtils.reverseUint256(PrimitiveTypeUtils.toUint256(idBytes));\\n    }\\n\\n    /**\\n     * @dev calcIdFromEthAddress\\n     */\\n    function calcIdFromEthAddress(bytes2 idType, address caller) internal pure returns (uint256) {\\n        uint256 addr = PrimitiveTypeUtils.addressToUint256(caller);\\n\\n        return calcIdFromGenesisState(idType, PrimitiveTypeUtils.reverseUint256(addr));\\n    }\\n}\\n\",\"keccak256\":\"0xfd962d67aec0ebae3192bff78df85b5eccd6391abd4e0474343bfb1fb9a4a241\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/Poseidon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nlibrary PoseidonUnit1L {\\n    function poseidon(uint256[1] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit2L {\\n    function poseidon(uint256[2] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit3L {\\n    function poseidon(uint256[3] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit4L {\\n    function poseidon(uint256[4] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit5L {\\n    function poseidon(uint256[5] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit6L {\\n    function poseidon(uint256[6] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary SpongePoseidon {\\n    uint32 internal constant BATCH_SIZE = 6;\\n\\n    function hash(uint256[] calldata values) public pure returns (uint256) {\\n        uint256[BATCH_SIZE] memory frame = [uint256(0), 0, 0, 0, 0, 0];\\n        bool dirty = false;\\n        uint256 fullHash = 0;\\n        uint32 k = 0;\\n        for (uint32 i = 0; i < values.length; i++) {\\n            dirty = true;\\n            frame[k] = values[i];\\n            if (k == BATCH_SIZE - 1) {\\n                fullHash = PoseidonUnit6L.poseidon(frame);\\n                dirty = false;\\n                frame = [uint256(0), 0, 0, 0, 0, 0];\\n                frame[0] = fullHash;\\n                k = 1;\\n            } else {\\n                k++;\\n            }\\n        }\\n        if (dirty) {\\n            // we haven't hashed something in the main sponge loop and need to do hash here\\n            fullHash = PoseidonUnit6L.poseidon(frame);\\n        }\\n        return fullHash;\\n    }\\n}\\n\\nlibrary PoseidonFacade {\\n    function poseidon1(uint256[1] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit1L.poseidon(el);\\n    }\\n\\n    function poseidon2(uint256[2] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit2L.poseidon(el);\\n    }\\n\\n    function poseidon3(uint256[3] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit3L.poseidon(el);\\n    }\\n\\n    function poseidon4(uint256[4] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit4L.poseidon(el);\\n    }\\n\\n    function poseidon5(uint256[5] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit5L.poseidon(el);\\n    }\\n\\n    function poseidon6(uint256[6] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit6L.poseidon(el);\\n    }\\n\\n    function poseidonSponge(uint256[] calldata el) public pure returns (uint256) {\\n        return SpongePoseidon.hash(el);\\n    }\\n}\\n\",\"keccak256\":\"0xeea65c065f228877cfc5e652ce33b86b9dc991191b0a9d49c92fd2afb0607849\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/PrimitiveTypeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nlibrary PrimitiveTypeUtils {\\n    /**\\n     * @dev uint256ToBytes\\n     */\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    /**\\n     * @dev reverse uint256\\n     */\\n    function reverseUint256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v =\\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v =\\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @dev reverse uint16\\n     */\\n    function reverseUint16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n\\n    /**\\n     * @dev reverse uint32\\n     */\\n    function reverseUint32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) | ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    /**\\n     * @dev compareStrings\\n     */\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        if (bytes(a).length != bytes(b).length) {\\n            return false;\\n        }\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    /**\\n     * @dev toUint256\\n     */\\n    function toUint256(bytes memory bys) internal pure returns (uint256 value) {\\n        assembly {\\n            value := mload(add(bys, 0x20))\\n        }\\n    }\\n\\n    /**\\n     * @dev bytesToAddress\\n     */\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    /**\\n     * @dev int256ToAddress\\n     */\\n    function int256ToAddress(uint256 input) internal pure returns (address) {\\n        return bytesToAddress(uint256ToBytes(reverseUint256(input)));\\n    }\\n\\n    /**\\n     * @dev concat\\n     */\\n    function concat(\\n        bytes memory preBytes,\\n        bytes memory postBytes\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.concat(preBytes, postBytes);\\n    }\\n\\n    /**\\n     * @dev slice\\n     */\\n    function slice(\\n        bytes memory bys,\\n        uint256 start,\\n        uint256 length\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.slice(bys, start, length);\\n    }\\n\\n    /**\\n     * @dev addressToUint256\\n     */\\n    function addressToUint256(address _addr) internal pure returns (uint256) {\\n        return uint256(uint160(_addr));\\n    }\\n}\\n\",\"keccak256\":\"0x088d813467bacb9d496a69c3ff266df023030d15c07b4c31c749b50bbc7176c6\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/validators/CredentialAtomicQuerySigValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {CredentialAtomicQueryValidator} from \\\"./CredentialAtomicQueryValidator.sol\\\";\\nimport {IVerifier} from \\\"@iden3/contracts/interfaces/IVerifier.sol\\\";\\n\\ncontract CredentialAtomicQuerySigValidator is CredentialAtomicQueryValidator {\\n  /**\\n   * @dev Version of contract\\n   */\\n  string public constant VERSION = \\\"1.0.1\\\";\\n\\n  string internal constant CIRCUIT_ID = \\\"credentialAtomicQuerySigV2OnChain\\\";\\n\\n  // This empty reserved space is put in place to allow future versions\\n  // of the CredentialAtomicQuerySigValidator contract to inherit from other contracts without a risk of\\n  // breaking the storage layout. This is necessary because the parent contracts in the\\n  // future may introduce some storage variables, which are placed before the CredentialAtomicQuerySigValidator\\n  // contract's storage variables.\\n  // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n  // slither-disable-next-line shadowing-state\\n  // slither-disable-next-line unused-state\\n  uint256[500] private __gap_before;\\n\\n  // PUT NEW STATE VARIABLES HERE\\n\\n  // This empty reserved space is put in place to allow future versions\\n  // of this contract to add new variables without shifting down\\n  // storage of child contracts that use this contract as a base\\n  // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n  uint256[50] __gap_after;\\n\\n  function initialize(\\n    address _verifierContractAddr,\\n    address _stateContractAddr\\n  ) public override initializer {\\n    _setInputToIndex(\\\"merklized\\\", 0);\\n    _setInputToIndex(\\\"userID\\\", 1);\\n    _setInputToIndex(\\\"circuitQueryHash\\\", 2);\\n    _setInputToIndex(\\\"issuerAuthState\\\", 3);\\n    _setInputToIndex(\\\"requestID\\\", 4);\\n    _setInputToIndex(\\\"challenge\\\", 5);\\n    _setInputToIndex(\\\"gistRoot\\\", 6);\\n    _setInputToIndex(\\\"issuerID\\\", 7);\\n    _setInputToIndex(\\\"isRevocationChecked\\\", 8);\\n    _setInputToIndex(\\\"issuerClaimNonRevState\\\", 9);\\n    _setInputToIndex(\\\"timestamp\\\", 10);\\n    _supportedCircuitIds = [CIRCUIT_ID];\\n    _circuitIdToVerifier[CIRCUIT_ID] = IVerifier(_verifierContractAddr);\\n    super.initialize(_verifierContractAddr, _stateContractAddr);\\n  }\\n\\n  function verify(\\n    uint256[] calldata inputs,\\n    uint256[2] calldata a,\\n    uint256[2][2] calldata b,\\n    uint256[2] calldata c,\\n    bytes calldata data\\n  ) external view virtual {\\n    _verify(inputs, a, b, c, data);\\n  }\\n\\n  function parseCommonPubSignals(\\n    uint256[] calldata inputs\\n  ) public pure override returns (CommonPubSignals memory) {\\n    CommonPubSignals memory params = CommonPubSignals({\\n      merklized: inputs[0],\\n      userID: inputs[1],\\n      circuitQueryHash: inputs[2],\\n      issuerState: inputs[3],\\n      requestID: inputs[4],\\n      challenge: inputs[5],\\n      gistRoot: inputs[6],\\n      issuerID: inputs[7],\\n      isRevocationChecked: inputs[8],\\n      issuerClaimNonRevState: inputs[9],\\n      timestamp: inputs[10]\\n    });\\n\\n    return params;\\n  }\\n}\\n\",\"keccak256\":\"0xa044bc761db4c756c99ed931e00f3fdda0c9a421662226f475f403752b82480f\",\"license\":\"GPL-3.0\"},\"contracts/validators/CredentialAtomicQueryValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {GenesisUtils} from \\\"@iden3/contracts/lib/GenesisUtils.sol\\\";\\nimport {ICircuitValidator} from \\\"@iden3/contracts/interfaces/ICircuitValidator.sol\\\";\\nimport {IVerifier} from \\\"@iden3/contracts/interfaces/IVerifier.sol\\\";\\nimport {IState} from \\\"@iden3/contracts/interfaces/IState.sol\\\";\\nimport {PoseidonFacade} from \\\"@iden3/contracts/lib/Poseidon.sol\\\";\\n\\nabstract contract CredentialAtomicQueryValidator is\\n  OwnableUpgradeable,\\n  ICircuitValidator\\n{\\n  struct CredentialAtomicQuery {\\n    uint256 schema;\\n    uint256 claimPathKey;\\n    uint256 operator;\\n    uint256 slotIndex;\\n    uint256[] value;\\n    uint256 queryHash;\\n    uint256[] allowedIssuers;\\n    string[] circuitIds;\\n    bool skipClaimRevocationCheck;\\n    // 0 for inclusion in merklized credentials, 1 for non-inclusion and for non-merklized credentials\\n    uint256 claimPathNotExists;\\n  }\\n\\n  struct CommonPubSignals {\\n    uint256 merklized;\\n    uint256 userID;\\n    uint256 issuerState;\\n    uint256 circuitQueryHash;\\n    uint256 requestID;\\n    uint256 challenge;\\n    uint256 gistRoot;\\n    uint256 issuerID;\\n    uint256 isRevocationChecked;\\n    uint256 issuerClaimNonRevState;\\n    uint256 timestamp;\\n  }\\n\\n  // This empty reserved space is put in place to allow future versions\\n  // of the CredentialAtomicQuerySigValidator contract to inherit from other contracts without a risk of\\n  // breaking the storage layout. This is necessary because the parent contracts in the\\n  // future may introduce some storage variables, which are placed before the CredentialAtomicQuerySigValidator\\n  // contract's storage variables.\\n  // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n  // slither-disable-next-line shadowing-state\\n  // slither-disable-next-line unused-state\\n  uint256[500] private __gap_before_base;\\n\\n  mapping(string => IVerifier) internal _circuitIdToVerifier;\\n  string[] internal _supportedCircuitIds;\\n\\n  IState public state;\\n\\n  uint256 public revocationStateExpirationTimeout;\\n  uint256 public proofExpirationTimeout;\\n  uint256 public gistRootExpirationTimeout;\\n\\n  mapping(string => uint256) internal _inputNameToIndex;\\n\\n  // This empty reserved space is put in place to allow future versions\\n  // of this contract to add new variables without shifting down\\n  // storage of child contracts that use this contract as a base\\n  // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n  uint256[43] __gap_after_base;\\n\\n  function initialize(\\n    address _verifierContractAddr,\\n    address _stateContractAddr\\n  ) public virtual onlyInitializing {\\n    revocationStateExpirationTimeout = 1 hours;\\n    proofExpirationTimeout = 1 hours;\\n    gistRootExpirationTimeout = 1 hours;\\n    state = IState(_stateContractAddr);\\n    __Ownable_init();\\n  }\\n\\n  function parseCommonPubSignals(\\n    uint256[] calldata inputs\\n  ) public pure virtual returns (CommonPubSignals memory);\\n\\n  function setRevocationStateExpirationTimeout(\\n    uint256 expirationTimeout\\n  ) public virtual onlyOwner {\\n    revocationStateExpirationTimeout = expirationTimeout;\\n  }\\n\\n  function setProofExpirationTimeout(\\n    uint256 expirationTimeout\\n  ) public virtual onlyOwner {\\n    proofExpirationTimeout = expirationTimeout;\\n  }\\n\\n  function setGISTRootExpirationTimeout(\\n    uint256 expirationTimeout\\n  ) public virtual onlyOwner {\\n    gistRootExpirationTimeout = expirationTimeout;\\n  }\\n\\n  function setStateAddress(address stateContractAddr) public virtual onlyOwner {\\n    state = IState(stateContractAddr);\\n  }\\n\\n  function getSupportedCircuitIds()\\n    external\\n    view\\n    virtual\\n    returns (string[] memory ids)\\n  {\\n    return _supportedCircuitIds;\\n  }\\n\\n  function inputIndexOf(\\n    string memory name\\n  ) external view virtual returns (uint256) {\\n    uint256 index = _inputNameToIndex[name];\\n    require(index != 0, \\\"Input name not found\\\");\\n    return --index; // we save 1-based index, but return 0-based\\n  }\\n\\n  function _verify(\\n    uint256[] calldata inputs,\\n    uint256[2] calldata a,\\n    uint256[2][2] calldata b,\\n    uint256[2] calldata c,\\n    bytes calldata data\\n  ) internal view virtual {\\n    CredentialAtomicQuery memory credAtomicQuery = abi.decode(\\n      data,\\n      (CredentialAtomicQuery)\\n    );\\n    IVerifier verifier = _circuitIdToVerifier[credAtomicQuery.circuitIds[0]];\\n\\n    require(\\n      credAtomicQuery.circuitIds.length == 1 &&\\n        verifier != IVerifier(address(0)),\\n      \\\"Invalid circuit ID\\\"\\n    );\\n\\n    // verify that zkp is valid\\n    require(verifier.verify(a, b, c, inputs), \\\"Proof is not valid\\\");\\n\\n    CommonPubSignals memory signals = parseCommonPubSignals(inputs);\\n\\n    // check circuitQueryHash\\n    require(\\n      signals.circuitQueryHash == credAtomicQuery.queryHash,\\n      \\\"Query hash does not match the requested one\\\"\\n    );\\n\\n    // TODO: add support for query to specific userID and then verifying it\\n\\n    _checkMerklized(signals.merklized, credAtomicQuery.claimPathKey);\\n    // TODO: fix this ('Root does not exist')\\n    //_checkGistRoot(signals.gistRoot);\\n    _checkAllowedIssuers(signals.issuerID, credAtomicQuery.allowedIssuers);\\n    _checkClaimIssuanceState(signals.issuerID, signals.issuerState);\\n    // TODO: handle revocation state\\n    //_checkClaimNonRevState(signals.issuerID, signals.issuerClaimNonRevState);\\n    // TODO: handle proof expiration\\n    // _checkProofExpiration(signals.timestamp);\\n    // TODO: handle revocation state\\n    // _checkIsRevocationChecked(\\n    //   signals.isRevocationChecked,\\n    //   credAtomicQuery.skipClaimRevocationCheck\\n    // );\\n  }\\n\\n  function _checkGistRoot(uint256 gistRoot) internal view {\\n    IState.GistRootInfo memory rootInfo = state.getGISTRootInfo(gistRoot);\\n    require(\\n      rootInfo.root == gistRoot,\\n      \\\"Gist root state isn't in state contract\\\"\\n    );\\n    if (\\n      rootInfo.replacedAtTimestamp != 0 &&\\n      block.timestamp - rootInfo.replacedAtTimestamp > gistRootExpirationTimeout\\n    ) {\\n      revert(\\\"Gist root is expired\\\");\\n    }\\n  }\\n\\n  function _checkClaimIssuanceState(uint256 _id, uint256 _state) internal view {\\n    bool isStateGenesis = GenesisUtils.isGenesisState(_id, _state);\\n\\n    if (!isStateGenesis) {\\n      IState.StateInfo memory stateInfo = state.getStateInfoByIdAndState(\\n        _id,\\n        _state\\n      );\\n      require(_id == stateInfo.id, \\\"State doesn't exist in state contract\\\");\\n    }\\n  }\\n\\n  function _checkClaimNonRevState(\\n    uint256 _id,\\n    uint256 _claimNonRevState\\n  ) internal view {\\n    // check if identity transited any state in contract\\n    bool idExists = state.idExists(_id);\\n\\n    // if identity didn't transit any state it must be genesis\\n    if (!idExists) {\\n      require(\\n        GenesisUtils.isGenesisState(_id, _claimNonRevState),\\n        \\\"Issuer revocation state doesn't exist in state contract and is not genesis\\\"\\n      );\\n    } else {\\n      IState.StateInfo memory claimNonRevStateInfo = state.getStateInfoById(\\n        _id\\n      );\\n      // The non-empty state is returned, and it's not equal to the state that the user has provided.\\n      if (claimNonRevStateInfo.state != _claimNonRevState) {\\n        // Get the time of the latest state and compare it to the transition time of state provided by the user.\\n        IState.StateInfo memory claimNonRevLatestStateInfo = state\\n          .getStateInfoByIdAndState(_id, _claimNonRevState);\\n\\n        if (\\n          claimNonRevLatestStateInfo.id == 0 ||\\n          claimNonRevLatestStateInfo.id != _id\\n        ) {\\n          revert(\\\"State in transition info contains invalid id\\\");\\n        }\\n\\n        if (claimNonRevLatestStateInfo.replacedAtTimestamp == 0) {\\n          revert(\\\"Non-Latest state doesn't contain replacement information\\\");\\n        }\\n\\n        if (\\n          block.timestamp - claimNonRevLatestStateInfo.replacedAtTimestamp >\\n          revocationStateExpirationTimeout\\n        ) {\\n          revert(\\\"Non-Revocation state of Issuer expired\\\");\\n        }\\n      }\\n    }\\n  }\\n\\n  function _checkProofExpiration(\\n    uint256 _proofGenerationTimestamp\\n  ) internal view {\\n    if (_proofGenerationTimestamp > block.timestamp) {\\n      revert(\\\"Proof generated in the future is not valid\\\");\\n    }\\n    if (block.timestamp - _proofGenerationTimestamp > proofExpirationTimeout) {\\n      revert(\\\"Generated proof is outdated\\\");\\n    }\\n  }\\n\\n  function _checkAllowedIssuers(\\n    uint256 issuerId,\\n    uint256[] memory allowedIssuers\\n  ) internal pure {\\n    // empty array is 'allow all' equivalent - ['*']\\n    if (allowedIssuers.length == 0) {\\n      return;\\n    }\\n\\n    for (uint i = 0; i < allowedIssuers.length; i++) {\\n      if (issuerId == allowedIssuers[i]) {\\n        return;\\n      }\\n    }\\n\\n    revert(\\\"Issuer is not on the Allowed Issuers list\\\");\\n  }\\n\\n  function _checkMerklized(\\n    uint256 merklized,\\n    uint256 queryClaimPathKey\\n  ) internal pure {\\n    uint256 shouldBeMerklized = queryClaimPathKey != 0 ? 1 : 0;\\n    require(merklized == shouldBeMerklized, \\\"Merklized value is not correct\\\");\\n  }\\n\\n  function _checkIsRevocationChecked(\\n    uint256 isRevocationChecked,\\n    bool skipClaimRevocationCheck\\n  ) internal pure {\\n    uint256 expectedIsRevocationChecked = 1;\\n    if (skipClaimRevocationCheck) {\\n      expectedIsRevocationChecked = 0;\\n    }\\n    require(\\n      isRevocationChecked == expectedIsRevocationChecked,\\n      \\\"Revocation check should match the query\\\"\\n    );\\n  }\\n\\n  function _setInputToIndex(string memory inputName, uint256 index) internal {\\n    _inputNameToIndex[inputName] = ++index; // increment index to avoid 0\\n  }\\n}\\n\",\"keccak256\":\"0x4dd81fc2644fb3c081221e02dee69178be09809a4d52f10126333c463498127b\",\"license\":\"GPL-3.0\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equal_nonAligned(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let endMinusWord := add(_preBytes, length)\\n                let mc := add(_preBytes, 0x20)\\n                let cc := add(_postBytes, 0x20)\\n\\n                for {\\n                // the next line is the loop condition:\\n                // while(uint256(mc < endWord) + cb == 2)\\n                } eq(add(lt(mc, endMinusWord), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n\\n                // Only if still successful\\n                // For <1 word tail bytes\\n                if gt(success, 0) {\\n                    // Get the remainder of length/32\\n                    // length % 32 = AND(length, 32 - 1)\\n                    let numTailBytes := and(length, 0x1f)\\n                    let mcRem := mload(mc)\\n                    let ccRem := mload(cc)\\n                    for {\\n                        let i := 0\\n                    // the next line is the loop condition:\\n                    // while(uint256(i < numTailBytes) + cb == 2)\\n                    } eq(add(lt(i, numTailBytes), cb), 2) {\\n                        i := add(i, 1)\\n                    } {\\n                        if iszero(eq(byte(i, mcRem), byte(i, ccRem))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xa5b10f04797d5a10a9ba07855108b6bd695940e6a3d128927b2f74a0d359868a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137c3806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063c19d93fb11610071578063c19d93fb1461026a578063cb5aa55814610288578063f2fde38b146102b8578063fb5af2a2146102d4578063ffa1ad74146102f25761010b565b80638da5cb5b146101e05780638eff038a146101fe5780639a8a5b171461021c578063b16a394f1461023a5761010b565b806348d36920116100de57806348d36920146101825780635307e79f1461019e578063652377dc146101ba578063715018a6146101d65761010b565b80631134b480146101105780631af6d99b1461012c5780631c4c7fd81461014a578063485cc95514610166575b600080fd5b61012a60048036038101906101259190611b10565b610310565b005b610134610323565b6040516101419190611b4c565b60405180910390f35b610164600480360381019061015f9190611bc5565b61032a565b005b610180600480360381019061017b9190611bf2565b610377565b005b61019c60048036038101906101979190611b10565b610828565b005b6101b860048036038101906101b39190611d31565b61083b565b005b6101d460048036038101906101cf9190611b10565b610853565b005b6101de610866565b005b6101e861087a565b6040516101f59190611dfe565b60405180910390f35b6102066108a4565b6040516102139190611b4c565b60405180910390f35b6102246108ab565b6040516102319190611b4c565b60405180910390f35b610254600480360381019061024f9190611f5a565b6108b2565b6040516102619190611b4c565b60405180910390f35b61027261092f565b60405161027f9190612002565b60405180910390f35b6102a2600480360381019061029d919061201d565b610956565b6040516102af919061215a565b60405180910390f35b6102d260048036038101906102cd9190611bc5565b610ad6565b005b6102dc610b59565b6040516102e991906122b7565b60405180910390f35b6102fa610c33565b6040516103079190612323565b60405180910390f35b610318610c6c565b8061025e8190555050565b61025d5481565b610332610c6c565b8061025b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900460ff161590508080156103a85750600160008054906101000a900460ff1660ff16105b806103d557506103b730610cea565b1580156103d45750600160008054906101000a900460ff1660ff16145b5b610414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040b906123b7565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610451576001600060016101000a81548160ff0219169083151502179055505b6104916040518060400160405280600981526020017f6d65726b6c697a656400000000000000000000000000000000000000000000008152506000610d0d565b6104d16040518060400160405280600681526020017f75736572494400000000000000000000000000000000000000000000000000008152506001610d0d565b6105116040518060400160405280601081526020017f63697263756974517565727948617368000000000000000000000000000000008152506002610d0d565b6105516040518060400160405280600f81526020017f69737375657241757468537461746500000000000000000000000000000000008152506003610d0d565b6105916040518060400160405280600981526020017f72657175657374494400000000000000000000000000000000000000000000008152506004610d0d565b6105d16040518060400160405280600981526020017f6368616c6c656e676500000000000000000000000000000000000000000000008152506005610d0d565b6106116040518060400160405280600881526020017f67697374526f6f740000000000000000000000000000000000000000000000008152506006610d0d565b6106516040518060400160405280600881526020017f69737375657249440000000000000000000000000000000000000000000000008152506007610d0d565b6106916040518060400160405280601381526020017f69735265766f636174696f6e436865636b6564000000000000000000000000008152506008610d0d565b6106d16040518060400160405280601681526020017f697373756572436c61696d4e6f6e5265765374617465000000000000000000008152506009610d0d565b6107116040518060400160405280600981526020017f74696d657374616d700000000000000000000000000000000000000000000000815250600a610d0d565b604051806020016040528060405180606001604052806021815260200161376d6021913981525061025a906001610749929190611992565b508261025960405180606001604052806021815260200161376d602191396040516107749190612413565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107ca8383610d41565b80156108235760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161081a9190612472565b60405180910390a15b505050565b610830610c6c565b8061025d8190555050565b61084a87878787878787610dfc565b50505050505050565b61085b610c6c565b8061025c8190555050565b61086e610c6c565b610878600061104e565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025c5481565b61025e5481565b60008061025f836040516108c69190612413565b90815260200160405180910390205490506000810361091a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610911906124d9565b60405180910390fd5b8061092490612528565b905080915050919050565b61025b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61095e6119eb565b6000604051806101600160405280858560008181106109805761097f612551565b5b905060200201358152602001858560018181106109a05761099f612551565b5b905060200201358152602001858560038181106109c0576109bf612551565b5b905060200201358152602001858560028181106109e0576109df612551565b5b90506020020135815260200185856004818110610a00576109ff612551565b5b90506020020135815260200185856005818110610a2057610a1f612551565b5b90506020020135815260200185856006818110610a4057610a3f612551565b5b90506020020135815260200185856007818110610a6057610a5f612551565b5b90506020020135815260200185856008818110610a8057610a7f612551565b5b90506020020135815260200185856009818110610aa057610a9f612551565b5b9050602002013581526020018585600a818110610ac057610abf612551565b5b9050602002013581525090508091505092915050565b610ade610c6c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b44906125f2565b60405180910390fd5b610b568161104e565b50565b606061025a805480602002602001604051908101604052809291908181526020016000905b82821015610c2a578382906000526020600020018054610b9d90612641565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc990612641565b8015610c165780601f10610beb57610100808354040283529160200191610c16565b820191906000526020600020905b815481529060010190602001808311610bf957829003601f168201915b505050505081526020019060010190610b7e565b50505050905090565b6040518060400160405280600581526020017f312e302e3100000000000000000000000000000000000000000000000000000081525081565b610c74611114565b73ffffffffffffffffffffffffffffffffffffffff16610c9261087a565b73ffffffffffffffffffffffffffffffffffffffff1614610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf906126be565b60405180910390fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b80610d17906126de565b90508061025f83604051610d2b9190612413565b9081526020016040518091039020819055505050565b600060019054906101000a900460ff16610d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8790612798565b60405180910390fd5b610e1061025c81905550610e1061025d81905550610e1061025e819055508061025b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610df861111c565b5050565b60008282810190610e0d9190612ae8565b905060006102598260e00151600081518110610e2c57610e2b612551565b5b6020026020010151604051610e419190612413565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060018260e0015151148015610eb45750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b610ef3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eea90612b7d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16632612907c8888888d8d6040518663ffffffff1660e01b8152600401610f34959493929190612ce7565b602060405180830381865afa158015610f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f759190612d4c565b610fb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fab90612dc5565b60405180910390fd5b6000610fc08a8a610956565b90508260a0015181606001511461100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100390612e57565b60405180910390fd5b61101e81600001518460200151611175565b6110308160e001518460c001516111d4565b6110428160e001518260400151611264565b50505050505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600060019054906101000a900460ff1661116b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116290612798565b60405180910390fd5b611173611367565b565b6000808203611185576000611188565b60015b60ff1690508083146111cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c690612ec3565b60405180910390fd5b505050565b6000815103156112605760005b8151811015611224578181815181106111fd576111fc612551565b5b602002602001015183036112115750611260565b808061121c906126de565b9150506111e1565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125790612f55565b60405180910390fd5b5050565b600061127083836113c8565b90508061136257600061025b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166353c8731285856040518363ffffffff1660e01b81526004016112d7929190612f75565b60e060405180830381865afa1580156112f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113189190613067565b905080600001518414611360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135790613106565b60405180910390fd5b505b505050565b600060019054906101000a900460ff166113b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ad90612798565b60405180910390fd5b6113c66113c1611114565b61104e565b565b6000806113dc6113d785611402565b61154e565b6113e59061318f565b905060006113f382856115ab565b90508085149250505092915050565b600081905060087eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff8216901b60087fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff008316901c17905060107dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff8216901b60107fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00008316901c17905060207bffffffff00000000ffffffff00000000ffffffff00000000ffffffff8216901b60207fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008316901c179050604077ffffffffffffffff0000000000000000ffffffffffffffff8216901b60407fffffffffffffffff0000000000000000ffffffffffffffff00000000000000008316901c179050608081901b608082901c179050919050565b6060602067ffffffffffffffff81111561156b5761156a611e2f565b5b6040519080825280601f01601f19166020018201604052801561159d5781602001600182028036833780820191505090505b509050816020820152919050565b6000806115bf6115ba84611402565b61154e565b905060006115dc82601b84516115d591906131f6565b601b6116f9565b90506000611609866040516020016115f4919061324b565b6040516020818303038152906040528361170f565b9050601d81511461164f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611646906132d8565b60405180910390fd5b600061166261165d83611723565b6117bd565b9050600081604051602001611677919061333c565b60405160208183030381529060405290506000611694848361170f565b9050601f8151146116da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d1906133a3565b60405180910390fd5b6116eb6116e6826117dc565b611402565b965050505050505092915050565b60606117068484846117ea565b90509392505050565b606061171b8383611908565b905092915050565b6000601d825114611769576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611760906132d8565b60405180910390fd5b60005b82518110156117b75782818151811061178857611787612551565b5b602001015160f81c60f81b60f81c60ff16826117a491906133c3565b9150806117b0906126de565b905061176c565b50919050565b600081905060088161ffff16901b60088261ffff16901c179050919050565b600060208201519050919050565b606081601f836117fa91906133f9565b101561183b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183290613479565b60405180910390fd5b818361184791906133f9565b8451101561188a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611881906134e5565b60405180910390fd5b60608215600081146118ab57604051915060008252602082016040526118fc565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156118e957805183526020830192506020810190506118cc565b50868552601f19601f8301166040525050505b50809150509392505050565b6060806040519050835180825260208201818101602087015b8183101561193e5780518352602083019250602081019050611921565b50855192508351830184528091508282019050602086015b818310156119735780518352602083019250602081019050611956565b50601f19601f8851850115830101166040525050508091505092915050565b8280548282559060005260206000209081019282156119da579160200282015b828111156119d95782518290816119c9919061369a565b50916020019190600101906119b2565b5b5090506119e79190611a45565b5090565b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115611a655760008181611a5c9190611a69565b50600101611a46565b5090565b508054611a7590612641565b6000825580601f10611a875750611aa6565b601f016020900490600052602060002090810190611aa59190611aa9565b5b50565b5b80821115611ac2576000816000905550600101611aaa565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611aed81611ada565b8114611af857600080fd5b50565b600081359050611b0a81611ae4565b92915050565b600060208284031215611b2657611b25611ad0565b5b6000611b3484828501611afb565b91505092915050565b611b4681611ada565b82525050565b6000602082019050611b616000830184611b3d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b9282611b67565b9050919050565b611ba281611b87565b8114611bad57600080fd5b50565b600081359050611bbf81611b99565b92915050565b600060208284031215611bdb57611bda611ad0565b5b6000611be984828501611bb0565b91505092915050565b60008060408385031215611c0957611c08611ad0565b5b6000611c1785828601611bb0565b9250506020611c2885828601611bb0565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112611c5757611c56611c32565b5b8235905067ffffffffffffffff811115611c7457611c73611c37565b5b602083019150836020820283011115611c9057611c8f611c3c565b5b9250929050565b600081905082602060020282011115611cb357611cb2611c3c565b5b92915050565b600081905082604060020282011115611cd557611cd4611c3c565b5b92915050565b60008083601f840112611cf157611cf0611c32565b5b8235905067ffffffffffffffff811115611d0e57611d0d611c37565b5b602083019150836001820283011115611d2a57611d29611c3c565b5b9250929050565b6000806000806000806000610140888a031215611d5157611d50611ad0565b5b600088013567ffffffffffffffff811115611d6f57611d6e611ad5565b5b611d7b8a828b01611c41565b97509750506020611d8e8a828b01611c97565b9550506060611d9f8a828b01611cb9565b94505060e0611db08a828b01611c97565b93505061012088013567ffffffffffffffff811115611dd257611dd1611ad5565b5b611dde8a828b01611cdb565b925092505092959891949750929550565b611df881611b87565b82525050565b6000602082019050611e136000830184611def565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e6782611e1e565b810181811067ffffffffffffffff82111715611e8657611e85611e2f565b5b80604052505050565b6000611e99611ac6565b9050611ea58282611e5e565b919050565b600067ffffffffffffffff821115611ec557611ec4611e2f565b5b611ece82611e1e565b9050602081019050919050565b82818337600083830152505050565b6000611efd611ef884611eaa565b611e8f565b905082815260208101848484011115611f1957611f18611e19565b5b611f24848285611edb565b509392505050565b600082601f830112611f4157611f40611c32565b5b8135611f51848260208601611eea565b91505092915050565b600060208284031215611f7057611f6f611ad0565b5b600082013567ffffffffffffffff811115611f8e57611f8d611ad5565b5b611f9a84828501611f2c565b91505092915050565b6000819050919050565b6000611fc8611fc3611fbe84611b67565b611fa3565b611b67565b9050919050565b6000611fda82611fad565b9050919050565b6000611fec82611fcf565b9050919050565b611ffc81611fe1565b82525050565b60006020820190506120176000830184611ff3565b92915050565b6000806020838503121561203457612033611ad0565b5b600083013567ffffffffffffffff81111561205257612051611ad5565b5b61205e85828601611c41565b92509250509250929050565b61207381611ada565b82525050565b61016082016000820151612090600085018261206a565b5060208201516120a3602085018261206a565b5060408201516120b6604085018261206a565b5060608201516120c9606085018261206a565b5060808201516120dc608085018261206a565b5060a08201516120ef60a085018261206a565b5060c082015161210260c085018261206a565b5060e082015161211560e085018261206a565b5061010082015161212a61010085018261206a565b5061012082015161213f61012085018261206a565b5061014082015161215461014085018261206a565b50505050565b6000610160820190506121706000830184612079565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121dc5780820151818401526020810190506121c1565b60008484015250505050565b60006121f3826121a2565b6121fd81856121ad565b935061220d8185602086016121be565b61221681611e1e565b840191505092915050565b600061222d83836121e8565b905092915050565b6000602082019050919050565b600061224d82612176565b6122578185612181565b93508360208202850161226985612192565b8060005b858110156122a557848403895281516122868582612221565b945061229183612235565b925060208a0199505060018101905061226d565b50829750879550505050505092915050565b600060208201905081810360008301526122d18184612242565b905092915050565b600082825260208201905092915050565b60006122f5826121a2565b6122ff81856122d9565b935061230f8185602086016121be565b61231881611e1e565b840191505092915050565b6000602082019050818103600083015261233d81846122ea565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006123a1602e836122d9565b91506123ac82612345565b604082019050919050565b600060208201905081810360008301526123d081612394565b9050919050565b600081905092915050565b60006123ed826121a2565b6123f781856123d7565b93506124078185602086016121be565b80840191505092915050565b600061241f82846123e2565b915081905092915050565b6000819050919050565b600060ff82169050919050565b600061245c6124576124528461242a565b611fa3565b612434565b9050919050565b61246c81612441565b82525050565b60006020820190506124876000830184612463565b92915050565b7f496e707574206e616d65206e6f7420666f756e64000000000000000000000000600082015250565b60006124c36014836122d9565b91506124ce8261248d565b602082019050919050565b600060208201905081810360008301526124f2816124b6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061253382611ada565b915060008203612546576125456124f9565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006125dc6026836122d9565b91506125e782612580565b604082019050919050565b6000602082019050818103600083015261260b816125cf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061265957607f821691505b60208210810361266c5761266b612612565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006126a86020836122d9565b91506126b382612672565b602082019050919050565b600060208201905081810360008301526126d78161269b565b9050919050565b60006126e982611ada565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361271b5761271a6124f9565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612782602b836122d9565b915061278d82612726565b604082019050919050565b600060208201905081810360008301526127b181612775565b9050919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156127dd576127dc611e2f565b5b602082029050602081019050919050565b60006128016127fc846127c2565b611e8f565b9050808382526020820190506020840283018581111561282457612823611c3c565b5b835b8181101561284d57806128398882611afb565b845260208401935050602081019050612826565b5050509392505050565b600082601f83011261286c5761286b611c32565b5b813561287c8482602086016127ee565b91505092915050565b600067ffffffffffffffff8211156128a05761289f611e2f565b5b602082029050602081019050919050565b60006128c46128bf84612885565b611e8f565b905080838252602082019050602084028301858111156128e7576128e6611c3c565b5b835b8181101561292e57803567ffffffffffffffff81111561290c5761290b611c32565b5b8086016129198982611f2c565b855260208501945050506020810190506128e9565b5050509392505050565b600082601f83011261294d5761294c611c32565b5b813561295d8482602086016128b1565b91505092915050565b60008115159050919050565b61297b81612966565b811461298657600080fd5b50565b60008135905061299881612972565b92915050565b600061014082840312156129b5576129b46127b8565b5b6129c0610140611e8f565b905060006129d084828501611afb565b60008301525060206129e484828501611afb565b60208301525060406129f884828501611afb565b6040830152506060612a0c84828501611afb565b606083015250608082013567ffffffffffffffff811115612a3057612a2f6127bd565b5b612a3c84828501612857565b60808301525060a0612a5084828501611afb565b60a08301525060c082013567ffffffffffffffff811115612a7457612a736127bd565b5b612a8084828501612857565b60c08301525060e082013567ffffffffffffffff811115612aa457612aa36127bd565b5b612ab084828501612938565b60e083015250610100612ac584828501612989565b61010083015250610120612adb84828501611afb565b6101208301525092915050565b600060208284031215612afe57612afd611ad0565b5b600082013567ffffffffffffffff811115612b1c57612b1b611ad5565b5b612b288482850161299e565b91505092915050565b7f496e76616c696420636972637569742049440000000000000000000000000000600082015250565b6000612b676012836122d9565b9150612b7282612b31565b602082019050919050565b60006020820190508181036000830152612b9681612b5a565b9050919050565b82818337505050565b612bb260408383612b9d565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b612be260408383612b9d565b5050565b6000612bf28383612bd6565b60408301905092915050565b600082905092915050565b6000604082019050919050565b612c1f81612bb6565b612c298184612bc1565b9250612c3482612bcc565b8060005b83811015612c6d57612c4a8284612bfe565b612c548782612be6565b9650612c5f83612c09565b925050600181019050612c38565b505050505050565b600082825260208201905092915050565b600080fd5b6000612c978385612c75565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612cca57612cc9612c86565b5b602083029250612cdb838584612b9d565b82840190509392505050565b600061012082019050612cfd6000830188612ba6565b612d0a6040830187612c16565b612d1760c0830186612ba6565b818103610100830152612d2b818486612c8b565b90509695505050505050565b600081519050612d4681612972565b92915050565b600060208284031215612d6257612d61611ad0565b5b6000612d7084828501612d37565b91505092915050565b7f50726f6f66206973206e6f742076616c69640000000000000000000000000000600082015250565b6000612daf6012836122d9565b9150612dba82612d79565b602082019050919050565b60006020820190508181036000830152612dde81612da2565b9050919050565b7f5175657279206861736820646f6573206e6f74206d617463682074686520726560008201527f71756573746564206f6e65000000000000000000000000000000000000000000602082015250565b6000612e41602b836122d9565b9150612e4c82612de5565b604082019050919050565b60006020820190508181036000830152612e7081612e34565b9050919050565b7f4d65726b6c697a65642076616c7565206973206e6f7420636f72726563740000600082015250565b6000612ead601e836122d9565b9150612eb882612e77565b602082019050919050565b60006020820190508181036000830152612edc81612ea0565b9050919050565b7f497373756572206973206e6f74206f6e2074686520416c6c6f7765642049737360008201527f75657273206c6973740000000000000000000000000000000000000000000000602082015250565b6000612f3f6029836122d9565b9150612f4a82612ee3565b604082019050919050565b60006020820190508181036000830152612f6e81612f32565b9050919050565b6000604082019050612f8a6000830185611b3d565b612f976020830184611b3d565b9392505050565b600081519050612fad81611ae4565b92915050565b600060e08284031215612fc957612fc86127b8565b5b612fd360e0611e8f565b90506000612fe384828501612f9e565b6000830152506020612ff784828501612f9e565b602083015250604061300b84828501612f9e565b604083015250606061301f84828501612f9e565b606083015250608061303384828501612f9e565b60808301525060a061304784828501612f9e565b60a08301525060c061305b84828501612f9e565b60c08301525092915050565b600060e0828403121561307d5761307c611ad0565b5b600061308b84828501612fb3565b91505092915050565b7f537461746520646f65736e277420657869737420696e20737461746520636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b60006130f06025836122d9565b91506130fb82613094565b604082019050919050565b6000602082019050818103600083015261311f816130e3565b9050919050565b600081519050919050565b6000819050602082019050919050565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b60006131798251613141565b80915050919050565b600082821b905092915050565b600061319a82613126565b826131a484613131565b90506131af8161316d565b925060028210156131ef576131ea7fffff00000000000000000000000000000000000000000000000000000000000083600203600802613182565b831692505b5050919050565b600061320182611ada565b915061320c83611ada565b9250828203905081811115613224576132236124f9565b5b92915050565b6000819050919050565b61324561324082613141565b61322a565b82525050565b60006132578284613234565b60028201915081905092915050565b7f436865636b73756d207265717569726573203239206c656e677468206172726160008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b60006132c26021836122d9565b91506132cd82613266565b604082019050919050565b600060208201905081810360008301526132f1816132b5565b9050919050565b600061ffff82169050919050565b60008160f01b9050919050565b600061331e82613306565b9050919050565b613336613331826132f8565b613313565b82525050565b60006133488284613325565b60028201915081905092915050565b7f69644279746573207265717569726573203331206c656e677468206172726179600082015250565b600061338d6020836122d9565b915061339882613357565b602082019050919050565b600060208201905081810360008301526133bc81613380565b9050919050565b60006133ce826132f8565b91506133d9836132f8565b9250828201905061ffff8111156133f3576133f26124f9565b5b92915050565b600061340482611ada565b915061340f83611ada565b9250828201905080821115613427576134266124f9565b5b92915050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000613463600e836122d9565b915061346e8261342d565b602082019050919050565b6000602082019050818103600083015261349281613456565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b60006134cf6011836122d9565b91506134da82613499565b602082019050919050565b600060208201905081810360008301526134fe816134c2565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b60006008830261355a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613182565b6135648683613182565b95508019841693508086168417925050509392505050565b600061359761359261358d84611ada565b611fa3565b611ada565b9050919050565b6000819050919050565b6135b18361357c565b6135c56135bd8261359e565b84845461352a565b825550505050565b600090565b6135da6135cd565b6135e58184846135a8565b505050565b5b81811015613609576135fe6000826135d2565b6001810190506135eb565b5050565b601f82111561364e5761361f81613505565b6136288461351a565b81016020851015613637578190505b61364b6136438561351a565b8301826135ea565b50505b505050565b600082821c905092915050565b600061367160001984600802613653565b1980831691505092915050565b600061368a8383613660565b9150826002028217905092915050565b6136a3826121a2565b67ffffffffffffffff8111156136bc576136bb611e2f565b5b6136c68254612641565b6136d182828561360d565b600060209050601f83116001811461370457600084156136f2578287015190505b6136fc858261367e565b865550613764565b601f19841661371286613505565b60005b8281101561373a57848901518255600182019150602085019450602081019050613715565b868310156137575784890151613753601f891682613660565b8355505b6001600288020188555050505b50505050505056fe63726564656e7469616c41746f6d6963517565727953696756324f6e436861696ea2646970667358221220fc51950bbcad75f1370e03a19e5f687ec4adb66263b2cb3a2cdd3c2f47472b4564736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "Version of contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2892,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2895,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3434,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2764,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2884,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8673,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap_before_base",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)500_storage"
      },
      {
        "astId": 8678,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_circuitIdToVerifier",
        "offset": 0,
        "slot": "601",
        "type": "t_mapping(t_string_memory_ptr,t_contract(IVerifier)1410)"
      },
      {
        "astId": 8681,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_supportedCircuitIds",
        "offset": 0,
        "slot": "602",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 8684,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "state",
        "offset": 0,
        "slot": "603",
        "type": "t_contract(IState)1385"
      },
      {
        "astId": 8686,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "revocationStateExpirationTimeout",
        "offset": 0,
        "slot": "604",
        "type": "t_uint256"
      },
      {
        "astId": 8688,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "proofExpirationTimeout",
        "offset": 0,
        "slot": "605",
        "type": "t_uint256"
      },
      {
        "astId": 8690,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "gistRootExpirationTimeout",
        "offset": 0,
        "slot": "606",
        "type": "t_uint256"
      },
      {
        "astId": 8694,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_inputNameToIndex",
        "offset": 0,
        "slot": "607",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 8698,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap_after_base",
        "offset": 0,
        "slot": "608",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 8430,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap_before",
        "offset": 0,
        "slot": "651",
        "type": "t_array(t_uint256)500_storage"
      },
      {
        "astId": 8434,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap_after",
        "offset": 0,
        "slot": "1151",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)500_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[500]",
        "numberOfBytes": "16000"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IState)1385": {
        "encoding": "inplace",
        "label": "contract IState",
        "numberOfBytes": "20"
      },
      "t_contract(IVerifier)1410": {
        "encoding": "inplace",
        "label": "contract IVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_contract(IVerifier)1410)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => contract IVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IVerifier)1410"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
