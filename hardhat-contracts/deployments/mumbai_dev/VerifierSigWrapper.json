{
  "address": "0x6d0a5faa3B7A14e1FF0BAEfF2b5D443DAe022e3C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[11]",
          "name": "_pubSignals",
          "type": "uint256[11]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b688e8a25847c1dbd3b67a4164d6ec3b27c3af19b9c4d4c1029a2aa39c3b465",
  "receipt": {
    "to": null,
    "from": "0x0BAd9DaD98143b2E946e8A40E4f27537be2f55E2",
    "contractAddress": "0x6d0a5faa3B7A14e1FF0BAEfF2b5D443DAe022e3C",
    "transactionIndex": 8,
    "gasUsed": "910423",
    "logsBloom": "0x
    "blockHash": "0xfcf525417cfe8cfa0568ac1204d81791182bf408a9289645a3c58518d48e56f5",
    "transactionHash": "0x2b688e8a25847c1dbd3b67a4164d6ec3b27c3af19b9c4d4c1029a2aa39c3b465",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 44625717,
        "transactionHash": "0x2b688e8a25847c1dbd3b67a4164d6ec3b27c3af19b9c4d4c1029a2aa39c3b465",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000bad9dad98143b2e946e8a40e4f27537be2f55e2",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000004da098f43f9000000000000000000000000000000000000000000000000012de85517029ea95a0000000000000000000000000000000000000000000023342fbda4583795a03b0000000000000000000000000000000000000000000000012de37b0d735ab05a0000000000000000000000000000000000000000000023342fc27e61c6d9993b",
        "logIndex": 29,
        "blockHash": "0xfcf525417cfe8cfa0568ac1204d81791182bf408a9289645a3c58518d48e56f5"
      }
    ],
    "blockNumber": 44625717,
    "cumulativeGasUsed": "2431416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "01f3f48de4e4d02d39c4cf8b4c5f3a4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[11]\",\"name\":\"_pubSignals\",\"type\":\"uint256[11]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verify(uint256[2],uint256[2][2],uint256[2],uint256[])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"stateVariables\":{\"PUBSIGNALS_LENGTH\":{\"details\":\"Number of public signals for atomic sig circuit\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/circuits/VerifierSigWrapper.sol\":\"VerifierSigWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\n/// @title IVerifier\\n/// @notice Interface for the Verifier contract, defining the verification function for Zero-Knowledge Proofs.\\ninterface IVerifier {\\n  /// @notice Verifies a Zero-Knowledge Proof.\\n  /// @param a Component 'a' of the ZKP.\\n  /// @param b Component 'b' of the ZKP.\\n  /// @param c Component 'c' of the ZKP.\\n  /// @param input Public inputs for the ZKP.\\n  /// @return r Boolean indicating the result of the verification.\\n  function verify(\\n    uint256[2] calldata a,\\n    uint256[2][2] calldata b,\\n    uint256[2] calldata c,\\n    uint256[] calldata input\\n  ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x00edc14f7be18077f66079c3025b8250ab4e857366cb4142c185a53c76b07490\",\"license\":\"GPL-3.0\"},\"contracts/verifiers/circuits/VerifierSig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract VerifierSig {\\n  // Scalar field size\\n  uint256 constant r =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  // Base field size\\n  uint256 constant q =\\n    21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  // Verification Key data\\n  uint256 constant alphax =\\n    20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n  uint256 constant alphay =\\n    9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n  uint256 constant betax1 =\\n    4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n  uint256 constant betax2 =\\n    6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n  uint256 constant betay1 =\\n    21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n  uint256 constant betay2 =\\n    10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n  uint256 constant gammax1 =\\n    11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n  uint256 constant gammax2 =\\n    10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n  uint256 constant gammay1 =\\n    4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n  uint256 constant gammay2 =\\n    8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n  uint256 constant deltax1 =\\n    9233349870741476556654282208992970742179487991957579201151126362431960413225;\\n  uint256 constant deltax2 =\\n    1710121669395829903049554646654548770025644546791991387060028241346751736139;\\n  uint256 constant deltay1 =\\n    19704486125052989683894847401785081114275457166241990059352921424459992638027;\\n  uint256 constant deltay2 =\\n    19046562201477515176875600774989213534306185878886204544239016053798985855692;\\n\\n  uint256 constant IC0x =\\n    4329040981391513141295391766415175655220156497739526881302609278948222504970;\\n  uint256 constant IC0y =\\n    284608453342683033767670137533198892462004759449479316068661948021384180405;\\n\\n  uint256 constant IC1x =\\n    7902292650777562978905160367453874788768779199030594846897219439327408939067;\\n  uint256 constant IC1y =\\n    10012458713202587447931138874528085940712240664721354058270362630899015322036;\\n\\n  uint256 constant IC2x =\\n    11697814597341170748167341793832824505245257771165671796257313346092824905883;\\n  uint256 constant IC2y =\\n    5174781854368103007061208391170453909797905136821147372441461132562334328215;\\n\\n  uint256 constant IC3x =\\n    1726927835877229859131056157678822776962440564906076714962505486421376544987;\\n  uint256 constant IC3y =\\n    7352133740317971386526986860674287355620937922375271614467789385331477610856;\\n\\n  uint256 constant IC4x =\\n    9990035903997574691712818787908054784756674039249764811431700936009293741830;\\n  uint256 constant IC4y =\\n    4755447104942954158928166153067753327016299728030535979210293681329469052797;\\n\\n  uint256 constant IC5x =\\n    15940583140274302050208676622092202988851114679125808597061574700878232173357;\\n  uint256 constant IC5y =\\n    7533895757575770389928466511298564722397429905987255823784436733572909906714;\\n\\n  uint256 constant IC6x =\\n    5508259264227278997738923725524430810437674978357251435507761322739607112981;\\n  uint256 constant IC6y =\\n    14840270001783263053608712412057782257449606192737461326359694374707752442879;\\n\\n  uint256 constant IC7x =\\n    19432593446453142673661052218577694238117210547713431221983638840685247652932;\\n  uint256 constant IC7y =\\n    16697624670306221047608606229322371623883167253922210155632497282220974839920;\\n\\n  uint256 constant IC8x =\\n    6174854815751106275031120096370935217144939918507999853315484754500615715470;\\n  uint256 constant IC8y =\\n    3190247589562983462928111436181764721696742385815918920518303351200817921520;\\n\\n  uint256 constant IC9x =\\n    20417210161225663628251386960452026588766551723348342467498648706108529814968;\\n  uint256 constant IC9y =\\n    13308394646519897771630385644245620946922357621078786238887021263713833144471;\\n\\n  uint256 constant IC10x =\\n    1439721648429120110444974852972369847408183115096685822065827204634576313044;\\n  uint256 constant IC10y =\\n    7403516047177423709103114106022932360673171438277930001711953991194526055082;\\n\\n  uint256 constant IC11x =\\n    18655728389101903942401016308093091046804775184674794685591712671240928471338;\\n  uint256 constant IC11y =\\n    15349580464155803523251530156943886363594022485425879189715213626172422717967;\\n\\n  // Memory data\\n  uint16 constant pVk = 0;\\n  uint16 constant pPairing = 128;\\n\\n  uint16 constant pLastMem = 896;\\n\\n  function verifyProof(\\n    uint[2] calldata _pA,\\n    uint[2][2] calldata _pB,\\n    uint[2] calldata _pC,\\n    uint[11] calldata _pubSignals\\n  ) public view returns (bool) {\\n    assembly {\\n      function checkField(v) {\\n        if iszero(lt(v, q)) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n      }\\n\\n      // G1 function to multiply a G1 value(x,y) to value in an address\\n      function g1_mulAccC(pR, x, y, s) {\\n        let success\\n        let mIn := mload(0x40)\\n        mstore(mIn, x)\\n        mstore(add(mIn, 32), y)\\n        mstore(add(mIn, 64), s)\\n\\n        success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n        if iszero(success) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n\\n        mstore(add(mIn, 64), mload(pR))\\n        mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n        success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n        if iszero(success) {\\n          mstore(0, 0)\\n          return(0, 0x20)\\n        }\\n      }\\n\\n      function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n        let _pPairing := add(pMem, pPairing)\\n        let _pVk := add(pMem, pVk)\\n\\n        mstore(_pVk, IC0x)\\n        mstore(add(_pVk, 32), IC0y)\\n\\n        // Compute the linear combination vk_x\\n\\n        g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n        g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n\\n        g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n\\n        g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n\\n        g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n\\n        g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n\\n        g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n\\n        g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n\\n        g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n\\n        g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\\n\\n        g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))\\n\\n        // -A\\n        mstore(_pPairing, calldataload(pA))\\n        mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n        // B\\n        mstore(add(_pPairing, 64), calldataload(pB))\\n        mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n        mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n        mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n        // alpha1\\n        mstore(add(_pPairing, 192), alphax)\\n        mstore(add(_pPairing, 224), alphay)\\n\\n        // beta2\\n        mstore(add(_pPairing, 256), betax1)\\n        mstore(add(_pPairing, 288), betax2)\\n        mstore(add(_pPairing, 320), betay1)\\n        mstore(add(_pPairing, 352), betay2)\\n\\n        // vk_x\\n        mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n        mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n        // gamma2\\n        mstore(add(_pPairing, 448), gammax1)\\n        mstore(add(_pPairing, 480), gammax2)\\n        mstore(add(_pPairing, 512), gammay1)\\n        mstore(add(_pPairing, 544), gammay2)\\n\\n        // C\\n        mstore(add(_pPairing, 576), calldataload(pC))\\n        mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n        // delta2\\n        mstore(add(_pPairing, 640), deltax1)\\n        mstore(add(_pPairing, 672), deltax2)\\n        mstore(add(_pPairing, 704), deltay1)\\n        mstore(add(_pPairing, 736), deltay2)\\n\\n        let success := staticcall(\\n          sub(gas(), 2000),\\n          8,\\n          _pPairing,\\n          768,\\n          _pPairing,\\n          0x20\\n        )\\n\\n        isOk := and(success, mload(_pPairing))\\n      }\\n\\n      let pMem := mload(0x40)\\n      mstore(0x40, add(pMem, pLastMem))\\n\\n      // Validate that all evaluations \\u2208 F\\n\\n      checkField(calldataload(add(_pubSignals, 0)))\\n\\n      checkField(calldataload(add(_pubSignals, 32)))\\n\\n      checkField(calldataload(add(_pubSignals, 64)))\\n\\n      checkField(calldataload(add(_pubSignals, 96)))\\n\\n      checkField(calldataload(add(_pubSignals, 128)))\\n\\n      checkField(calldataload(add(_pubSignals, 160)))\\n\\n      checkField(calldataload(add(_pubSignals, 192)))\\n\\n      checkField(calldataload(add(_pubSignals, 224)))\\n\\n      checkField(calldataload(add(_pubSignals, 256)))\\n\\n      checkField(calldataload(add(_pubSignals, 288)))\\n\\n      checkField(calldataload(add(_pubSignals, 320)))\\n\\n      checkField(calldataload(add(_pubSignals, 352)))\\n\\n      // Validate all evaluations\\n      let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n      mstore(0, isValid)\\n      return(0, 0x20)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa326b0b62aab9b4819fba546f807c4c3be96204bc14864b5c1c4fb0a1cefeb1e\",\"license\":\"GPL-3.0\"},\"contracts/verifiers/circuits/VerifierSigWrapper.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport \\\"./VerifierSig.sol\\\";\\nimport \\\"../../interfaces/IVerifier.sol\\\";\\n\\ncontract VerifierSigWrapper is VerifierSig, IVerifier {\\n  /**\\n   * @dev Number of public signals for atomic sig circuit\\n   */\\n  uint constant PUBSIGNALS_LENGTH = 11;\\n\\n  /// @return r  bool true if proof is valid\\n  function verify(\\n    uint256[2] calldata a,\\n    uint256[2][2] calldata b,\\n    uint256[2] calldata c,\\n    uint256[] calldata input\\n  ) public view returns (bool r) {\\n    // slither-disable-next-line uninitialized-local\\n    uint[PUBSIGNALS_LENGTH] memory pubSignals;\\n\\n    require(input.length == PUBSIGNALS_LENGTH, \\\"expected array length is 11\\\");\\n\\n    for (uint256 i = 0; i < PUBSIGNALS_LENGTH; i++) {\\n      pubSignals[i] = input[i];\\n    }\\n    return this.verifyProof(a, b, c, pubSignals);\\n  }\\n}\\n\",\"keccak256\":\"0x7dd001418b2660ca0e2e38121a3c3d3db2c9013a8e618bf7306cb2e040cf94c5\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632612907c1461003b578063b9c6ea871461006b575b600080fd5b61005560048036038101906100509190610ab4565b61009b565b6040516100629190610b59565b60405180910390f35b61008560048036038101906100809190610b96565b6101cd565b6040516100929190610b59565b60405180910390f35b60006100a56109de565b600b84849050146100eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e290610c5c565b60405180910390fd5b60005b600b8110156101405784848281811061010a57610109610c7c565b5b905060200201358282600b811061012457610123610c7c565b5b602002018181525050808061013890610ce4565b9150506100ee565b503073ffffffffffffffffffffffffffffffffffffffff1663b9c6ea87888888856040518563ffffffff1660e01b81526004016101809493929190610eaf565b602060405180830381865afa15801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c19190610f22565b91505095945050505050565b600061091c565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610205576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa91508161023b576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91508161026b576000805260206000f35b505050505050565b600060808601600087017f0992267e58f93dac7a7beb752274c98029cfc357435f878ea72b030d1085100a81527ea1152a41bb3aa4fbe1aa7882c2e2a8e1b6e968f077ff4af210d42e0d7072b5602082015261031560008801357f1622d9ce6cd690e847704358fe99032bcf337ba5c8f17181b36216c8a61b89b47f11788a050c473369bbac1d2e011ec3236dc2e426bf33950035d783539419e03b84610208565b61036560208801357f0b70d29ed3ae4b77ab974d5624d17cef7bc8a6c91d157a36637dbc85a311a5977f19dcba7a8a64168495e184fa3ce0be0d08ab53712d2bb51ebd016cab0679c89b84610208565b6103b560408801357f10412904e7135f93df873a768f47e26eaf7649cf526233820d4e705ee7cc81687f03d16811819c4ff82df949af146566ada7540c0e620d0a3a243927b0a4f6b0db84610208565b61040560608801357f0a837cd8825cf5fa6feeb51b4b85f3c411db9db2df64da913a0fedc14d12d77d7f161628f234fb50ecce9c863ea7a616d4790276ed14f410062964ce932e77bf0684610208565b61045560808801357f10a808acd38d95f293e7595ac1d254314023fe5a4b417d46a457216250683b1a7f233e0ce24b641fa92543e2251944350e1ba373aff7a2f6296403855ba1163b2d84610208565b6104a560a08801357f20cf4b8faf4cc3ddef5428e3ec7ac6ab8fac15d3a408ab9be92c7c3636959bff7f0c2d90736caddcdbe291f31a2543dd6edaa258a516960ffb9c3cea7e2da18d1584610208565b6104f560c08801357f24ea85494a29b0493f759cdecc86f90166567ba7fa3dfafc612441df821298707f2af675475a9a8c80732328cca338fdc7b0d082049982557e0e663a9fd85ce44484610208565b61054560e08801357f070d9dbbd07134b5bbee59c1d7f8e3d631430dd6394698fbba5f53384848bdf07f0da6d80e9f321df5ac17ec71cf7b1d5a7564f79b51be0c74bedb8c2266a4ba8e84610208565b6105966101008801357f1d6c48d0c956333d81951c4ec0240786f431aa7899010a6360bd50a063dd50977f2d23bb3f195568e6d21110df201b9520e2a0e49f433ac618afc3536ebef3adb884610208565b6105e76101208801357f105e3dd896cb03b12043762dce2f72ea2a58a985fea546ba5bbd115d0bef7aaa7f032eda83efb2182f8abd68311a50bd1c1acde67ab2959d45fbc26941639e5ad484610208565b6106386101408801357f21ef8dfeae61f0040d207a37d86209217a484587294fcde52f50d2095167820f7f293ec4a0dd36216f02bcdc9c329cffaa450d2b5a44f55b61cabfc8300929a92a84610208565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08301527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08301527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008301527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208301527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408301527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f1469e40d51ed9ca8f5677275a3111e52ef96f34c58c29d156f870870109074296102808301527f03c7e502253d6cfe7a9314775ac2d0fe4704763560fd70e78bec59fd4f6da94b6102a08301527f2b90580b4fd31c34ac334b8581fd0de1b6d8af80163ae34b60a5fc851797a24b6102c08301527f2a1bf8e0abf527ccfb58440a7364da4944f71aac2c9b5faa5c9a26f37034f2cc6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b604051610380810160405261093460008401356101d4565b61094160208401356101d4565b61094e60408401356101d4565b61095b60608401356101d4565b61096860808401356101d4565b61097560a08401356101d4565b61098260c08401356101d4565b61098f60e08401356101d4565b61099d6101008401356101d4565b6109ab6101208401356101d4565b6109b96101408401356101d4565b6109c76101608401356101d4565b6109d4818486888a610273565b8060005260206000f35b604051806101600160405280600b90602082028036833780820191505090505090565b600080fd5b600080fd5b600080fd5b600081905082602060020282011115610a2c57610a2b610a0b565b5b92915050565b600081905082604060020282011115610a4e57610a4d610a0b565b5b92915050565b600080fd5b600080fd5b60008083601f840112610a7457610a73610a54565b5b8235905067ffffffffffffffff811115610a9157610a90610a59565b5b602083019150836020820283011115610aad57610aac610a0b565b5b9250929050565b60008060008060006101208688031215610ad157610ad0610a01565b5b6000610adf88828901610a10565b9550506040610af088828901610a32565b94505060c0610b0188828901610a10565b93505061010086013567ffffffffffffffff811115610b2357610b22610a06565b5b610b2f88828901610a5e565b92509250509295509295909350565b60008115159050919050565b610b5381610b3e565b82525050565b6000602082019050610b6e6000830184610b4a565b92915050565b6000819050826020600b0282011115610b9057610b8f610a0b565b5b92915050565b6000806000806102608587031215610bb157610bb0610a01565b5b6000610bbf87828801610a10565b9450506040610bd087828801610a32565b93505060c0610be187828801610a10565b925050610100610bf387828801610b74565b91505092959194509250565b600082825260208201905092915050565b7f6578706563746564206172726179206c656e6774682069732031310000000000600082015250565b6000610c46601b83610bff565b9150610c5182610c10565b602082019050919050565b60006020820190508181036000830152610c7581610c39565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610cef82610cda565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d2157610d20610cab565b5b600182019050919050565b82818337505050565b610d4160408383610d2c565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b610d7160408383610d2c565b5050565b6000610d818383610d65565b60408301905092915050565b600082905092915050565b6000604082019050919050565b610dae81610d45565b610db88184610d50565b9250610dc382610d5b565b8060005b83811015610dfc57610dd98284610d8d565b610de38782610d75565b9650610dee83610d98565b925050600181019050610dc7565b505050505050565b6000600b9050919050565b600081905092915050565b6000819050919050565b610e2d81610cda565b82525050565b6000610e3f8383610e24565b60208301905092915050565b6000602082019050919050565b610e6181610e04565b610e6b8184610e0f565b9250610e7682610e1a565b8060005b83811015610ea7578151610e8e8782610e33565b9650610e9983610e4b565b925050600181019050610e7a565b505050505050565b600061026082019050610ec56000830187610d35565b610ed26040830186610da5565b610edf60c0830185610d35565b610eed610100830184610e58565b95945050505050565b610eff81610b3e565b8114610f0a57600080fd5b50565b600081519050610f1c81610ef6565b92915050565b600060208284031215610f3857610f37610a01565b5b6000610f4684828501610f0d565b9150509291505056fea26469706673582212209004745121db7a8b4c0685f5525b284091bc8efb47ec4ebd99598ea951f7f33c64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verify(uint256[2],uint256[2][2],uint256[2],uint256[])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "stateVariables": {
      "PUBSIGNALS_LENGTH": {
        "details": "Number of public signals for atomic sig circuit"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}