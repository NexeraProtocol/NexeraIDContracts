{
  "address": "0x5cEAB27b6B2787116C3c6AC1c2dEE091a2a6DA05",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "contract ICircuitValidator",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "ZKPRequestSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REQUESTS_RETURN_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_REQUEST_ID",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        }
      ],
      "name": "getZKPRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "contract ICircuitValidator",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZKPVerifier.ZKPRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "getZKPRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "contract ICircuitValidator",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZKPVerifier.ZKPRequest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getZKPRequestsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        }
      ],
      "name": "requestIdExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "contract ICircuitValidator",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZKPVerifier.ZKPRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "setNexeraZKPRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "contract ICircuitValidator",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IZKPVerifier.ZKPRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "setZKPRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        }
      ],
      "name": "submitZKPResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xec992648d1210ef542e5ec40ef3e069eb50a7167b42bf6eeec872517fe838a12",
  "receipt": {
    "to": null,
    "from": "0x0BAd9DaD98143b2E946e8A40E4f27537be2f55E2",
    "contractAddress": "0x5cEAB27b6B2787116C3c6AC1c2dEE091a2a6DA05",
    "transactionIndex": 3,
    "gasUsed": "2817372",
    "logsBloom": "0x
    "blockHash": "0x8a5d0e279ddf3c81442e11a25f088ae8ac36173c9224b83bddf91b846ee11917",
    "transactionHash": "0xec992648d1210ef542e5ec40ef3e069eb50a7167b42bf6eeec872517fe838a12",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 44625737,
        "transactionHash": "0xec992648d1210ef542e5ec40ef3e069eb50a7167b42bf6eeec872517fe838a12",
        "address": "0x5cEAB27b6B2787116C3c6AC1c2dEE091a2a6DA05",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000bad9dad98143b2e946e8a40e4f27537be2f55e2"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x8a5d0e279ddf3c81442e11a25f088ae8ac36173c9224b83bddf91b846ee11917"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 44625737,
        "transactionHash": "0xec992648d1210ef542e5ec40ef3e069eb50a7167b42bf6eeec872517fe838a12",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000bad9dad98143b2e946e8a40e4f27537be2f55e2",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000017859abfdfdc400000000000000000000000000000000000000000000000012da962083dd82ce300000000000000000000000000000000000000000000051b594344d9151e4d000000000000000000000000000000000000000000000000012d91dc6d7df850a300000000000000000000000000000000000000000000051b595aca73d4fe2940",
        "logIndex": 10,
        "blockHash": "0x8a5d0e279ddf3c81442e11a25f088ae8ac36173c9224b83bddf91b846ee11917"
      }
    ],
    "blockNumber": 44625737,
    "cumulativeGasUsed": "3206388",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "01f3f48de4e4d02d39c4cf8b4c5f3a4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ZKPRequestSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REQUESTS_RETURN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_REQUEST_ID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"getZKPRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZKPVerifier.ZKPRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getZKPRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZKPVerifier.ZKPRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZKPRequestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"requestIdExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZKPVerifier.ZKPRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"setNexeraZKPRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IZKPVerifier.ZKPRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"setZKPRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"name\":\"submitZKPResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setNexeraZKPRequest(uint64,(string,address,bytes))\":{\"params\":{\"request\":\"The ZKP request data.\",\"requestId\":\"The ID of the request to be set.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"SimpleWhitelist\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setNexeraZKPRequest(uint64,(string,address,bytes))\":{\"notice\":\"Sets a Nexera ZKP request and emits an event.\"}},\"notice\":\"This example contract implements a simple whitelist mechanism using Zero-Knowledge Proofs (ZKPs).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleWhitelist.sol\":\"SimpleWhitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@iden3/contracts/interfaces/ICircuitValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\ninterface ICircuitValidator {\\n    function verify(\\n        uint256[] memory inputs,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        bytes calldata data\\n    ) external view;\\n\\n    function getSupportedCircuitIds() external view returns (string[] memory ids);\\n\\n    function inputIndexOf(string memory name) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe18f12a89113f38d6c91a01303d80cc6fc46815e7bf511ce6343b5d13ab5a03e\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/interfaces/IZKPVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport {ICircuitValidator} from \\\"./ICircuitValidator.sol\\\";\\n\\ninterface IZKPVerifier {\\n    struct ZKPRequest {\\n        string metadata;\\n        ICircuitValidator validator;\\n        bytes data;\\n    }\\n\\n    function submitZKPResponse(\\n        uint64 requestId,\\n        uint256[] memory inputs,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c\\n    ) external;\\n\\n    function setZKPRequest(uint64 requestId, ZKPRequest calldata request) external;\\n\\n    function getZKPRequestsCount() external view returns (uint256);\\n\\n    function requestIdExists(uint64 requestId) external view returns (bool);\\n\\n    function getZKPRequest(uint64 requestId) external view returns (ZKPRequest memory);\\n\\n    function getZKPRequests(\\n        uint256 startIndex,\\n        uint256 length\\n    ) external view returns (ZKPRequest[] memory);\\n}\\n\",\"keccak256\":\"0x8debfdddfb423004fe564213f7a7b156d247234ded829bd4a71d9d042001597a\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\n/// @title A common functions for arrays.\\nlibrary ArrayUtils {\\n    /**\\n     * @dev Calculates bounds for the slice of the array.\\n     * @param arrLength An array length.\\n     * @param start A start index.\\n     * @param length A length of the slice.\\n     * @param limit A limit for the length.\\n     * @return The bounds for the slice of the array.\\n     */\\n    function calculateBounds(\\n        uint256 arrLength,\\n        uint256 start,\\n        uint256 length,\\n        uint256 limit\\n    ) internal pure returns (uint256, uint256) {\\n        require(length > 0, \\\"Length should be greater than 0\\\");\\n        require(length <= limit, \\\"Length limit exceeded\\\");\\n        require(start < arrLength, \\\"Start index out of bounds\\\");\\n\\n        uint256 end = start + length;\\n        if (end > arrLength) {\\n            end = arrLength;\\n        }\\n\\n        return (start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x6b452c0a3c9e4a79027d0d1802ce5b8f10f051dc1b561840163c17b318fbd56f\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/GenesisUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {PrimitiveTypeUtils} from \\\"./PrimitiveTypeUtils.sol\\\";\\n\\nlibrary GenesisUtils {\\n    /**\\n     *   @dev sum\\n     */\\n    function sum(bytes memory array) internal pure returns (uint16 s) {\\n        require(array.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        for (uint256 i = 0; i < array.length; ++i) {\\n            s += uint16(uint8(array[i]));\\n        }\\n    }\\n\\n    /**\\n     * @dev isGenesisState\\n     */\\n    function isGenesisState(uint256 id, uint256 idState) internal pure returns (bool) {\\n        bytes2 idType = bytes2(\\n            PrimitiveTypeUtils.uint256ToBytes(PrimitiveTypeUtils.reverseUint256(id))\\n        );\\n        uint256 computedId = calcIdFromGenesisState(idType, idState);\\n        return id == computedId;\\n    }\\n\\n    /**\\n     * @dev calcIdFromGenesisState\\n     */\\n    function calcIdFromGenesisState(\\n        bytes2 idType,\\n        uint256 idState\\n    ) internal pure returns (uint256) {\\n        bytes memory userStateB1 = PrimitiveTypeUtils.uint256ToBytes(\\n            PrimitiveTypeUtils.reverseUint256(idState)\\n        );\\n\\n        bytes memory cutState = PrimitiveTypeUtils.slice(userStateB1, userStateB1.length - 27, 27);\\n\\n        bytes memory beforeChecksum = PrimitiveTypeUtils.concat(abi.encodePacked(idType), cutState);\\n        require(beforeChecksum.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        uint16 checksum = PrimitiveTypeUtils.reverseUint16(sum(beforeChecksum));\\n\\n        bytes memory checkSumBytes = abi.encodePacked(checksum);\\n\\n        bytes memory idBytes = PrimitiveTypeUtils.concat(beforeChecksum, checkSumBytes);\\n        require(idBytes.length == 31, \\\"idBytes requires 31 length array\\\");\\n\\n        return PrimitiveTypeUtils.reverseUint256(PrimitiveTypeUtils.toUint256(idBytes));\\n    }\\n\\n    /**\\n     * @dev calcIdFromEthAddress\\n     */\\n    function calcIdFromEthAddress(bytes2 idType, address caller) internal pure returns (uint256) {\\n        uint256 addr = PrimitiveTypeUtils.addressToUint256(caller);\\n\\n        return calcIdFromGenesisState(idType, PrimitiveTypeUtils.reverseUint256(addr));\\n    }\\n}\\n\",\"keccak256\":\"0xfd962d67aec0ebae3192bff78df85b5eccd6391abd4e0474343bfb1fb9a4a241\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/PrimitiveTypeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nlibrary PrimitiveTypeUtils {\\n    /**\\n     * @dev uint256ToBytes\\n     */\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    /**\\n     * @dev reverse uint256\\n     */\\n    function reverseUint256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v =\\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v =\\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @dev reverse uint16\\n     */\\n    function reverseUint16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n\\n    /**\\n     * @dev reverse uint32\\n     */\\n    function reverseUint32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) | ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    /**\\n     * @dev compareStrings\\n     */\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        if (bytes(a).length != bytes(b).length) {\\n            return false;\\n        }\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    /**\\n     * @dev toUint256\\n     */\\n    function toUint256(bytes memory bys) internal pure returns (uint256 value) {\\n        assembly {\\n            value := mload(add(bys, 0x20))\\n        }\\n    }\\n\\n    /**\\n     * @dev bytesToAddress\\n     */\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    /**\\n     * @dev int256ToAddress\\n     */\\n    function int256ToAddress(uint256 input) internal pure returns (address) {\\n        return bytesToAddress(uint256ToBytes(reverseUint256(input)));\\n    }\\n\\n    /**\\n     * @dev concat\\n     */\\n    function concat(\\n        bytes memory preBytes,\\n        bytes memory postBytes\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.concat(preBytes, postBytes);\\n    }\\n\\n    /**\\n     * @dev slice\\n     */\\n    function slice(\\n        bytes memory bys,\\n        uint256 start,\\n        uint256 length\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.slice(bys, start, length);\\n    }\\n\\n    /**\\n     * @dev addressToUint256\\n     */\\n    function addressToUint256(address _addr) internal pure returns (uint256) {\\n        return uint256(uint160(_addr));\\n    }\\n}\\n\",\"keccak256\":\"0x088d813467bacb9d496a69c3ff266df023030d15c07b4c31c749b50bbc7176c6\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/verifiers/ZKPVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {GenesisUtils} from \\\"../lib/GenesisUtils.sol\\\";\\nimport {ICircuitValidator} from \\\"../interfaces/ICircuitValidator.sol\\\";\\nimport {IZKPVerifier} from \\\"../interfaces/IZKPVerifier.sol\\\";\\nimport {ArrayUtils} from \\\"../lib/ArrayUtils.sol\\\";\\n\\ncontract ZKPVerifier is IZKPVerifier, Ownable {\\n    /**\\n     * @dev Max return array length for request queries\\n     */\\n    uint256 public constant REQUESTS_RETURN_LIMIT = 1000;\\n\\n    // This empty reserved space is put in place to allow future versions\\n    // of the ZKPVerifier contract to inherit from other contracts without a risk of\\n    // breaking the storage layout. This is necessary because the parent contracts in the\\n    // future may introduce some storage variables, which are placed before the ZKPVerifier\\n    // contract's storage variables.\\n    // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n    // slither-disable-next-line shadowing-state\\n    // slither-disable-next-line unused-state\\n    uint256[500] private __gap_before;\\n\\n    // msg.sender-> ( requestID -> is proof given )\\n    mapping(address => mapping(uint64 => bool)) public proofs;\\n\\n    mapping(uint64 => IZKPVerifier.ZKPRequest) internal _requests;\\n\\n    uint64[] internal _requestIds;\\n\\n    // This empty reserved space is put in place to allow future versions\\n    // of this contract to add new variables without shifting down\\n    // storage of child contracts that use this contract as a base\\n    // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n    uint256[47] __gap_after;\\n\\n    function submitZKPResponse(\\n        uint64 requestId,\\n        uint256[] calldata inputs,\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c\\n    ) public override {\\n        require(\\n            _requests[requestId].validator != ICircuitValidator(address(0)),\\n            \\\"validator is not set for this request id\\\"\\n        ); // validator exists\\n\\n        _beforeProofSubmit(requestId, inputs, _requests[requestId].validator);\\n\\n        _callVerifyWithSender(requestId, inputs, a, b, c, msg.sender);\\n\\n        proofs[msg.sender][requestId] = true; // user provided a valid proof for request\\n\\n        _afterProofSubmit(requestId, inputs, _requests[requestId].validator);\\n    }\\n\\n    function _callVerifyWithSender(\\n        uint64 requestId,\\n        uint256[] calldata inputs,\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        address sender\\n    ) internal returns (bool) {\\n        ZKPRequest memory request = _requests[requestId];\\n        bytes4 selector = request.validator.verify.selector;\\n        bytes memory data = abi.encodePacked(\\n            selector,\\n            abi.encode(inputs, a, b, c, request.data),\\n            sender\\n        );\\n        (bool success, bytes memory returnData) = address(request.validator).call(data);\\n        if (!success) {\\n            if (returnData.length > 0) {\\n                // Extract revert reason from returnData\\n                assembly {\\n                    let returnDataSize := mload(returnData)\\n                    revert(add(32, returnData), returnDataSize)\\n                }\\n            } else {\\n                revert(\\\"Failed to verify proof without revert reason\\\");\\n            }\\n        }\\n        return success;\\n    }\\n\\n    function getZKPRequest(\\n        uint64 requestId\\n    ) public view override returns (IZKPVerifier.ZKPRequest memory) {\\n        require(requestIdExists(requestId), \\\"request id doesn't exist\\\");\\n        return _requests[requestId];\\n    }\\n\\n    function setZKPRequest(\\n        uint64 requestId,\\n        ZKPRequest calldata request\\n    ) public override onlyOwner {\\n        _requests[requestId] = request;\\n        _requestIds.push(requestId);\\n    }\\n\\n    function getZKPRequestsCount() public view returns (uint256) {\\n        return _requestIds.length;\\n    }\\n\\n    function requestIdExists(uint64 requestId) public view override returns (bool) {\\n        for (uint i = 0; i < _requestIds.length; i++) {\\n            if (_requestIds[i] == requestId) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getZKPRequests(\\n        uint256 startIndex,\\n        uint256 length\\n    ) public view returns (IZKPVerifier.ZKPRequest[] memory) {\\n        (uint256 start, uint256 end) = ArrayUtils.calculateBounds(\\n            _requestIds.length,\\n            startIndex,\\n            length,\\n            REQUESTS_RETURN_LIMIT\\n        );\\n\\n        IZKPVerifier.ZKPRequest[] memory result = new IZKPVerifier.ZKPRequest[](end - start);\\n\\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = _requests[_requestIds[i]];\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any proof response submit\\n     */\\n    function _beforeProofSubmit(\\n        uint64 requestId,\\n        uint256[] memory inputs,\\n        ICircuitValidator validator\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any proof response submit\\n     */\\n    function _afterProofSubmit(\\n        uint64 requestId,\\n        uint256[] memory inputs,\\n        ICircuitValidator validator\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe8cc29e39e6d46a1dee9e643e7b365515443c3d67339375ffc0de01d9bcc189a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/SimpleWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PrimitiveTypeUtils} from \\\"@iden3/contracts/lib/PrimitiveTypeUtils.sol\\\";\\nimport {ICircuitValidator} from \\\"@iden3/contracts/interfaces/ICircuitValidator.sol\\\";\\nimport \\\"./verifiers/NexeraZKPVerifier.sol\\\";\\n\\n/// @title SimpleWhitelist\\n/// @notice This example contract implements a simple whitelist mechanism using Zero-Knowledge Proofs (ZKPs).\\ncontract SimpleWhitelist is NexeraZKPVerifier {\\n  // Constant for the transfer request ID.\\n  uint64 public constant TRANSFER_REQUEST_ID = 1;\\n\\n  // Mapping from user ID to address.\\n  mapping(uint256 => address) public idToAddress;\\n\\n  // Mapping from address to user ID.\\n  mapping(address => uint256) public addressToId;\\n\\n  // Mapping to keep track of whitelisted addresses.\\n  mapping(address => bool) public whitelist;\\n\\n  /// @dev Internal function called before submitting a proof.\\n  ///      Ensures that the challenge input is the address of the sender.\\n  /// @param inputs Array of inputs for the proof.\\n  /// @param validator The circuit validator.\\n  function _beforeProofSubmit(\\n    uint64 /* requestId */,\\n    uint256[] memory inputs,\\n    ICircuitValidator validator\\n  ) internal view override {\\n    // check that  challenge input is address of sender\\n    address addr = PrimitiveTypeUtils.int256ToAddress(\\n      inputs[validator.inputIndexOf(\\\"challenge\\\")]\\n    );\\n    // this is linking between msg.sender and\\n    require(_msgSender() == addr, \\\"address in proof is not a sender address\\\");\\n  }\\n\\n  /// @dev Internal function called after submitting a proof.\\n  ///      Registers a user to the whitelist if the conditions are met.\\n  /// @param requestId The ID of the request being processed.\\n  /// @param inputs Array of inputs for the proof.\\n  /// @param validator The circuit validator.\\n  function _afterProofSubmit(\\n    uint64 requestId,\\n    uint256[] memory inputs,\\n    ICircuitValidator validator\\n  ) internal override {\\n    require(\\n      requestId == TRANSFER_REQUEST_ID && addressToId[_msgSender()] == 0,\\n      \\\"proof can not be submitted more than once\\\"\\n    );\\n\\n    // get user id\\n    uint256 id = inputs[1];\\n\\n    // additional check didn't get whitelisted before\\n    if (idToAddress[id] == address(0) && addressToId[_msgSender()] == 0) {\\n      whitelist[_msgSender()] = true;\\n      addressToId[_msgSender()] = id;\\n      idToAddress[id] = _msgSender();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8116c0c57d7706cf2d37b7263ffd4ea5c4e6cbfe6c1959548629faa064613d67\",\"license\":\"MIT\"},\"contracts/verifiers/NexeraZKPVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {GenesisUtils} from \\\"@iden3/contracts/lib/GenesisUtils.sol\\\";\\nimport {ICircuitValidator} from \\\"@iden3/contracts/interfaces/ICircuitValidator.sol\\\";\\nimport {ZKPVerifier} from \\\"@iden3/contracts/verifiers/ZKPVerifier.sol\\\";\\n\\n/// @title NexeraZKPVerifier\\n/// @notice Extends ZKPVerifier to handle Zero-Knowledge Proof (ZKP) requests specifically for the Nexera system.\\n/// @dev We use this because we need _afterSetRequest to register the request ids\\ncontract NexeraZKPVerifier is ZKPVerifier {\\n  /// @dev Emitted when a ZKP request is set.\\n  /// @param requestId The ID of the ZKP request.\\n  /// @param data The data associated with the ZKP request.\\n  /// @param validator The circuit validator for the ZKP request.\\n  /// @param metadata Metadata associated with the request.\\n  event ZKPRequestSet(\\n    uint64 requestId,\\n    bytes data,\\n    ICircuitValidator validator,\\n    string metadata\\n  );\\n\\n  /// @dev Internal hook that is called after a ZKP request is set.\\n  /// @param requestId The ID of the request that was set.\\n  function _afterSetRequest(uint64 requestId) internal virtual {}\\n\\n  /// @notice Sets a Nexera ZKP request and emits an event.\\n  /// @param requestId The ID of the request to be set.\\n  /// @param request The ZKP request data.\\n  function setNexeraZKPRequest(\\n    uint64 requestId,\\n    ZKPRequest calldata request\\n  ) public onlyOwner {\\n    setZKPRequest(requestId, request);\\n    emit ZKPRequestSet(\\n      requestId,\\n      request.data,\\n      request.validator,\\n      request.metadata\\n    );\\n    _afterSetRequest(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0xb07dbd200202bbceba64a1313fa4c48be55ddf1635e2c033b1c3cd6eefb6af60\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equal_nonAligned(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let endMinusWord := add(_preBytes, length)\\n                let mc := add(_preBytes, 0x20)\\n                let cc := add(_postBytes, 0x20)\\n\\n                for {\\n                // the next line is the loop condition:\\n                // while(uint256(mc < endWord) + cb == 2)\\n                } eq(add(lt(mc, endMinusWord), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n\\n                // Only if still successful\\n                // For <1 word tail bytes\\n                if gt(success, 0) {\\n                    // Get the remainder of length/32\\n                    // length % 32 = AND(length, 32 - 1)\\n                    let numTailBytes := and(length, 0x1f)\\n                    let mcRem := mload(mc)\\n                    let ccRem := mload(cc)\\n                    for {\\n                        let i := 0\\n                    // the next line is the loop condition:\\n                    // while(uint256(i < numTailBytes) + cb == 2)\\n                    } eq(add(lt(i, numTailBytes), cb), 2) {\\n                        i := add(i, 1)\\n                    } {\\n                        if iszero(eq(byte(i, mcRem), byte(i, ccRem))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xa5b10f04797d5a10a9ba07855108b6bd695940e6a3d128927b2f74a0d359868a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6131a780620001146000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639f5223e011610097578063c76d084511610066578063c76d0845146102af578063cb0e0d7d146102df578063f2fde38b1461030f578063f82ddf0a1461032b57610100565b80639f5223e014610217578063ab7bcfb714610233578063b45c0fdf14610263578063b68967e21461029357610100565b80636508e1b4116100d35780636508e1b4146101a1578063715018a6146101bf5780638da5cb5b146101c95780639b19251a146101e757610100565b80631905e7b1146101055780632a2d0c47146101235780635f9e60d71461015357806363ec508f14610183575b600080fd5b61010d610347565b60405161011a91906118c7565b60405180910390f35b61013d60048036038101906101389190611918565b61034d565b60405161014a9190611986565b60405180910390f35b61016d600480360381019061016891906119a1565b610381565b60405161017a9190611c3e565b60405180910390f35b61018b610643565b6040516101989190611c83565b60405180910390f35b6101a9610648565b6040516101b691906118c7565b60405180910390f35b6101c7610656565b005b6101d161066a565b6040516101de9190611986565b60405180910390f35b61020160048036038101906101fc9190611cca565b610693565b60405161020e9190611d12565b60405180910390f35b610231600480360381019061022c9190611d7d565b6106b4565b005b61024d60048036038101906102489190611dd9565b61074f565b60405161025a9190611d12565b60405180910390f35b61027d60048036038101906102789190611e06565b6107e6565b60405161028a9190611d12565b60405180910390f35b6102ad60048036038101906102a89190611eef565b610816565b005b6102c960048036038101906102c49190611dd9565b610a94565b6040516102d69190611fe2565b60405180910390f35b6102f960048036038101906102f49190611cca565b610c98565b60405161030691906118c7565b60405180910390f35b61032960048036038101906103249190611cca565b610cb1565b005b61034560048036038101906103409190611d7d565b610d34565b005b6103e881565b6102276020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008061039a6101f78054905086866103e8610dc2565b91509150600082826103ac9190612033565b67ffffffffffffffff8111156103c5576103c4612067565b5b6040519080825280602002602001820160405280156103fe57816020015b6103eb611877565b8152602001906001900390816103e35790505b50905060008390505b82811015610636576101f660006101f7838154811061042957610428612096565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610490906120f4565b80601f01602080910402602001604051908101604052809291908181526020018280546104bc906120f4565b80156105095780601f106104de57610100808354040283529160200191610509565b820191906000526020600020905b8154815290600101906020018083116104ec57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610578906120f4565b80601f01602080910402602001604051908101604052809291908181526020018280546105a4906120f4565b80156105f15780601f106105c6576101008083540402835291602001916105f1565b820191906000526020600020905b8154815290600101906020018083116105d457829003601f168201915b5050505050815250508285836106079190612033565b8151811061061857610617612096565b5b6020026020010181905250808061062e90612125565b915050610407565b5080935050505092915050565b600181565b60006101f780549050905090565b61065e610eb9565b6106686000610f37565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102296020528060005260406000206000915054906101000a900460ff1681565b6106bc610eb9565b806101f660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081816106f1919061274f565b9050506101f78290806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b600080600090505b6101f7805490508110156107db578267ffffffffffffffff166101f7828154811061078557610784612096565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16036107c85760019150506107e1565b80806107d390612125565b915050610757565b50600090505b919050565b6101f56020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff166101f660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c7906127e0565b60405180910390fd5b61096786868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ffb565b61097686868686868633611114565b5060016101f560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a8c86868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611400565b505050505050565b610a9c611877565b610aa58261074f565b610ae4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adb9061284c565b60405180910390fd5b6101f660008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610b27906120f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b53906120f4565b8015610ba05780601f10610b7557610100808354040283529160200191610ba0565b820191906000526020600020905b815481529060010190602001808311610b8357829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610c0f906120f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3b906120f4565b8015610c885780601f10610c5d57610100808354040283529160200191610c88565b820191906000526020600020905b815481529060010190602001808311610c6b57829003601f168201915b5050505050815250509050919050565b6102286020528060005260406000206000915090505481565b610cb9610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f906128de565b60405180910390fd5b610d3181610f37565b50565b610d3c610eb9565b610d4682826106b4565b7febf5fc5d525575febff148871346e1458de02c705c900ba0bc9b5361d5eba08a82828060400190610d78919061253f565b846020016020810190610d8b9190612913565b858060000190610d9b919061217c565b604051610dad969594939291906129c9565b60405180910390a1610dbe82611693565b5050565b60008060008411610e08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dff90612a6c565b60405180910390fd5b82841115610e4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4290612ad8565b60405180910390fd5b858510610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8490612b44565b60405180910390fd5b60008486610e9b9190612b64565b905086811115610ea9578690505b8581925092505094509492505050565b610ec1611696565b73ffffffffffffffffffffffffffffffffffffffff16610edf61066a565b73ffffffffffffffffffffffffffffffffffffffff1614610f35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2c90612be4565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611097838373ffffffffffffffffffffffffffffffffffffffff1663b16a394f6040518163ffffffff1660e01b815260040161103890612c50565b602060405180830381865afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110799190612c85565b8151811061108a57611089612096565b5b602002602001015161169e565b90508073ffffffffffffffffffffffffffffffffffffffff166110b8611696565b73ffffffffffffffffffffffffffffffffffffffff161461110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110590612d24565b60405180910390fd5b50505050565b6000806101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461115a906120f4565b80601f0160208091040260200160405190810160405280929190818152602001828054611186906120f4565b80156111d35780601f106111a8576101008083540402835291602001916111d3565b820191906000526020600020905b8154815290600101906020018083116111b657829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611242906120f4565b80601f016020809104026020016040519081016040528092919081815260200182805461126e906120f4565b80156112bb5780601f10611290576101008083540402835291602001916112bb565b820191906000526020600020905b81548152906001019060200180831161129e57829003601f168201915b50505050508152505090506000635307e79f60e01b90506000818a8a8a8a8a88604001516040516020016112f496959493929190612ec7565b6040516020818303038152906040528660405160200161131693929190612ffd565b6040516020818303038152906040529050600080846020015173ffffffffffffffffffffffffffffffffffffffff16836040516113539190613036565b6000604051808303816000865af19150503d8060008114611390576040519150601f19603f3d011682016040523d82523d6000602084013e611395565b606091505b5091509150816113ed576000815111156113b25780518082602001fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e4906130bf565b60405180910390fd5b8195505050505050979650505050505050565b600167ffffffffffffffff168367ffffffffffffffff1614801561146b57506000610228600061142e611696565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b6114aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a190613151565b60405180910390fd5b6000826001815181106114c0576114bf612096565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff16610227600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611581575060006102286000611544611696565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1561168d5760016102296000611595611696565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508061022860006115f4611696565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061163a611696565b610227600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50505050565b50565b600033905090565b60006116b96116b46116af846116c0565b61180c565b611869565b9050919050565b600081905060087eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff8216901b60087fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff008316901c17905060107dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff8216901b60107fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00008316901c17905060207bffffffff00000000ffffffff00000000ffffffff00000000ffffffff8216901b60207fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008316901c179050604077ffffffffffffffff0000000000000000ffffffffffffffff8216901b60407fffffffffffffffff0000000000000000ffffffffffffffff00000000000000008316901c179050608081901b608082901c179050919050565b6060602067ffffffffffffffff81111561182957611828612067565b5b6040519080825280601f01601f19166020018201604052801561185b5781602001600182028036833780820191505090505b509050816020820152919050565b600060148201519050919050565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6000819050919050565b6118c1816118ae565b82525050565b60006020820190506118dc60008301846118b8565b92915050565b600080fd5b600080fd5b6118f5816118ae565b811461190057600080fd5b50565b600081359050611912816118ec565b92915050565b60006020828403121561192e5761192d6118e2565b5b600061193c84828501611903565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061197082611945565b9050919050565b61198081611965565b82525050565b600060208201905061199b6000830184611977565b92915050565b600080604083850312156119b8576119b76118e2565b5b60006119c685828601611903565b92505060206119d785828601611903565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a47578082015181840152602081019050611a2c565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a6f82611a0d565b611a798185611a18565b9350611a89818560208601611a29565b611a9281611a53565b840191505092915050565b6000819050919050565b6000611ac2611abd611ab884611945565b611a9d565b611945565b9050919050565b6000611ad482611aa7565b9050919050565b6000611ae682611ac9565b9050919050565b611af681611adb565b82525050565b600081519050919050565b600082825260208201905092915050565b6000611b2382611afc565b611b2d8185611b07565b9350611b3d818560208601611a29565b611b4681611a53565b840191505092915050565b60006060830160008301518482036000860152611b6e8282611a64565b9150506020830151611b836020860182611aed565b5060408301518482036040860152611b9b8282611b18565b9150508091505092915050565b6000611bb48383611b51565b905092915050565b6000602082019050919050565b6000611bd4826119e1565b611bde81856119ec565b935083602082028501611bf0856119fd565b8060005b85811015611c2c5784840389528151611c0d8582611ba8565b9450611c1883611bbc565b925060208a01995050600181019050611bf4565b50829750879550505050505092915050565b60006020820190508181036000830152611c588184611bc9565b905092915050565b600067ffffffffffffffff82169050919050565b611c7d81611c60565b82525050565b6000602082019050611c986000830184611c74565b92915050565b611ca781611965565b8114611cb257600080fd5b50565b600081359050611cc481611c9e565b92915050565b600060208284031215611ce057611cdf6118e2565b5b6000611cee84828501611cb5565b91505092915050565b60008115159050919050565b611d0c81611cf7565b82525050565b6000602082019050611d276000830184611d03565b92915050565b611d3681611c60565b8114611d4157600080fd5b50565b600081359050611d5381611d2d565b92915050565b600080fd5b600060608284031215611d7457611d73611d59565b5b81905092915050565b60008060408385031215611d9457611d936118e2565b5b6000611da285828601611d44565b925050602083013567ffffffffffffffff811115611dc357611dc26118e7565b5b611dcf85828601611d5e565b9150509250929050565b600060208284031215611def57611dee6118e2565b5b6000611dfd84828501611d44565b91505092915050565b60008060408385031215611e1d57611e1c6118e2565b5b6000611e2b85828601611cb5565b9250506020611e3c85828601611d44565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e6b57611e6a611e46565b5b8235905067ffffffffffffffff811115611e8857611e87611e4b565b5b602083019150836020820283011115611ea457611ea3611e50565b5b9250929050565b600081905082602060020282011115611ec757611ec6611e50565b5b92915050565b600081905082604060020282011115611ee957611ee8611e50565b5b92915050565b6000806000806000806101408789031215611f0d57611f0c6118e2565b5b6000611f1b89828a01611d44565b965050602087013567ffffffffffffffff811115611f3c57611f3b6118e7565b5b611f4889828a01611e55565b95509550506040611f5b89828a01611eab565b9350506080611f6c89828a01611ecd565b925050610100611f7e89828a01611eab565b9150509295509295509295565b60006060830160008301518482036000860152611fa88282611a64565b9150506020830151611fbd6020860182611aed565b5060408301518482036040860152611fd58282611b18565b9150508091505092915050565b60006020820190508181036000830152611ffc8184611f8b565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061203e826118ae565b9150612049836118ae565b925082820390508181111561206157612060612004565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061210c57607f821691505b60208210810361211f5761211e6120c5565b5b50919050565b6000612130826118ae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361216257612161612004565b5b600182019050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126121995761219861216d565b5b80840192508235915067ffffffffffffffff8211156121bb576121ba612172565b5b6020830192506001820236038313156121d7576121d6612177565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261224c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261220f565b612256868361220f565b95508019841693508086168417925050509392505050565b600061228961228461227f846118ae565b611a9d565b6118ae565b9050919050565b6000819050919050565b6122a38361226e565b6122b76122af82612290565b84845461221c565b825550505050565b600090565b6122cc6122bf565b6122d781848461229a565b505050565b5b818110156122fb576122f06000826122c4565b6001810190506122dd565b5050565b601f82111561234057612311816121ea565b61231a846121ff565b81016020851015612329578190505b61233d612335856121ff565b8301826122dc565b50505b505050565b600082821c905092915050565b600061236360001984600802612345565b1980831691505092915050565b600061237c8383612352565b9150826002028217905092915050565b61239683836121df565b67ffffffffffffffff8111156123af576123ae612067565b5b6123b982546120f4565b6123c48282856122ff565b6000601f8311600181146123f357600084156123e1578287013590505b6123eb8582612370565b865550612453565b601f198416612401866121ea565b60005b8281101561242957848901358255600182019150602085019450602081019050612404565b868310156124465784890135612442601f891682612352565b8355505b6001600288020188555050505b50505050505050565b61246783838361238c565b505050565b600061247782611965565b9050919050565b6124878161246c565b811461249257600080fd5b50565b600081356124a28161247e565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6124d8846124ab565b9350801983169250808416831791505092915050565b60006124f982611aa7565b9050919050565b600061250b826124ee565b9050919050565b6000819050919050565b61252582612500565b61253861253182612512565b83546124b8565b8255505050565b6000808335600160200384360303811261255c5761255b61216d565b5b80840192508235915067ffffffffffffffff82111561257e5761257d612172565b5b60208301925060018202360383131561259a57612599612177565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b601f821115612603576125d4816125ad565b6125dd846121ff565b810160208510156125ec578190505b6126006125f8856121ff565b8301826122dc565b50505b505050565b61261283836125a2565b67ffffffffffffffff81111561262b5761262a612067565b5b61263582546120f4565b6126408282856125c2565b6000601f83116001811461266f576000841561265d578287013590505b6126678582612370565b8655506126cf565b601f19841661267d866125ad565b60005b828110156126a557848901358255600182019150602085019450602081019050612680565b868310156126c257848901356126be601f891682612352565b8355505b6001600288020188555050505b50505050505050565b6126e3838383612608565b505050565b60008101600083016126fa818561217c565b61270581838661245c565b5050505060018101602083018061271b81612495565b9050612727818461251c565b505050600281016040830161273c818561253f565b6127478183866126d8565b505050505050565b61275982826126e8565b5050565b600082825260208201905092915050565b7f76616c696461746f72206973206e6f742073657420666f72207468697320726560008201527f7175657374206964000000000000000000000000000000000000000000000000602082015250565b60006127ca60288361275d565b91506127d58261276e565b604082019050919050565b600060208201905081810360008301526127f9816127bd565b9050919050565b7f7265717565737420696420646f65736e27742065786973740000000000000000600082015250565b600061283660188361275d565b915061284182612800565b602082019050919050565b6000602082019050818103600083015261286581612829565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006128c860268361275d565b91506128d38261286c565b604082019050919050565b600060208201905081810360008301526128f7816128bb565b9050919050565b60008135905061290d8161247e565b92915050565b600060208284031215612929576129286118e2565b5b6000612937848285016128fe565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b600061296c8385612940565b9350612979838584612951565b61298283611a53565b840190509392505050565b61299681611adb565b82525050565b60006129a8838561275d565b93506129b5838584612951565b6129be83611a53565b840190509392505050565b60006080820190506129de6000830189611c74565b81810360208301526129f1818789612960565b9050612a00604083018661298d565b8181036060830152612a1381848661299c565b9050979650505050505050565b7f4c656e6774682073686f756c642062652067726561746572207468616e203000600082015250565b6000612a56601f8361275d565b9150612a6182612a20565b602082019050919050565b60006020820190508181036000830152612a8581612a49565b9050919050565b7f4c656e677468206c696d69742065786365656465640000000000000000000000600082015250565b6000612ac260158361275d565b9150612acd82612a8c565b602082019050919050565b60006020820190508181036000830152612af181612ab5565b9050919050565b7f537461727420696e646578206f7574206f6620626f756e647300000000000000600082015250565b6000612b2e60198361275d565b9150612b3982612af8565b602082019050919050565b60006020820190508181036000830152612b5d81612b21565b9050919050565b6000612b6f826118ae565b9150612b7a836118ae565b9250828201905080821115612b9257612b91612004565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bce60208361275d565b9150612bd982612b98565b602082019050919050565b60006020820190508181036000830152612bfd81612bc1565b9050919050565b7f6368616c6c656e67650000000000000000000000000000000000000000000000600082015250565b6000612c3a60098361275d565b9150612c4582612c04565b602082019050919050565b60006020820190508181036000830152612c6981612c2d565b9050919050565b600081519050612c7f816118ec565b92915050565b600060208284031215612c9b57612c9a6118e2565b5b6000612ca984828501612c70565b91505092915050565b7f6164647265737320696e2070726f6f66206973206e6f7420612073656e64657260008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b6000612d0e60288361275d565b9150612d1982612cb2565b604082019050919050565b60006020820190508181036000830152612d3d81612d01565b9050919050565b600082825260208201905092915050565b600080fd5b82818337505050565b6000612d6f8385612d44565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612da257612da1612d55565b5b602083029250612db3838584612d5a565b82840190509392505050565b612dcb60408383612d5a565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b612dfb60408383612d5a565b5050565b6000612e0b8383612def565b60408301905092915050565b600082905092915050565b6000604082019050919050565b612e3881612dcf565b612e428184612dda565b9250612e4d82612de5565b8060005b83811015612e8657612e638284612e17565b612e6d8782612dff565b9650612e7883612e22565b925050600181019050612e51565b505050505050565b6000612e9982611afc565b612ea38185612940565b9350612eb3818560208601611a29565b612ebc81611a53565b840191505092915050565b6000610140820190508181036000830152612ee381888a612d63565b9050612ef26020830187612dbf565b612eff6060830186612e2f565b612f0c60e0830185612dbf565b818103610120830152612f1f8184612e8e565b9050979650505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b612f73612f6e82612f2c565b612f58565b82525050565b600081905092915050565b6000612f8f82611afc565b612f998185612f79565b9350612fa9818560208601611a29565b80840191505092915050565b60008160601b9050919050565b6000612fcd82612fb5565b9050919050565b6000612fdf82612fc2565b9050919050565b612ff7612ff282611965565b612fd4565b82525050565b60006130098286612f62565b6004820191506130198285612f84565b91506130258284612fe6565b601482019150819050949350505050565b60006130428284612f84565b915081905092915050565b7f4661696c656420746f207665726966792070726f6f6620776974686f7574207260008201527f657665727420726561736f6e0000000000000000000000000000000000000000602082015250565b60006130a9602c8361275d565b91506130b48261304d565b604082019050919050565b600060208201905081810360008301526130d88161309c565b9050919050565b7f70726f6f662063616e206e6f74206265207375626d6974746564206d6f72652060008201527f7468616e206f6e63650000000000000000000000000000000000000000000000602082015250565b600061313b60298361275d565b9150613146826130df565b604082019050919050565b6000602082019050818103600083015261316a8161312e565b905091905056fea2646970667358221220219102f73dc232072d179c7d0141aa50b76089749bae78223d5981d40d944ad864736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80639f5223e011610097578063c76d084511610066578063c76d0845146102af578063cb0e0d7d146102df578063f2fde38b1461030f578063f82ddf0a1461032b57610100565b80639f5223e014610217578063ab7bcfb714610233578063b45c0fdf14610263578063b68967e21461029357610100565b80636508e1b4116100d35780636508e1b4146101a1578063715018a6146101bf5780638da5cb5b146101c95780639b19251a146101e757610100565b80631905e7b1146101055780632a2d0c47146101235780635f9e60d71461015357806363ec508f14610183575b600080fd5b61010d610347565b60405161011a91906118c7565b60405180910390f35b61013d60048036038101906101389190611918565b61034d565b60405161014a9190611986565b60405180910390f35b61016d600480360381019061016891906119a1565b610381565b60405161017a9190611c3e565b60405180910390f35b61018b610643565b6040516101989190611c83565b60405180910390f35b6101a9610648565b6040516101b691906118c7565b60405180910390f35b6101c7610656565b005b6101d161066a565b6040516101de9190611986565b60405180910390f35b61020160048036038101906101fc9190611cca565b610693565b60405161020e9190611d12565b60405180910390f35b610231600480360381019061022c9190611d7d565b6106b4565b005b61024d60048036038101906102489190611dd9565b61074f565b60405161025a9190611d12565b60405180910390f35b61027d60048036038101906102789190611e06565b6107e6565b60405161028a9190611d12565b60405180910390f35b6102ad60048036038101906102a89190611eef565b610816565b005b6102c960048036038101906102c49190611dd9565b610a94565b6040516102d69190611fe2565b60405180910390f35b6102f960048036038101906102f49190611cca565b610c98565b60405161030691906118c7565b60405180910390f35b61032960048036038101906103249190611cca565b610cb1565b005b61034560048036038101906103409190611d7d565b610d34565b005b6103e881565b6102276020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008061039a6101f78054905086866103e8610dc2565b91509150600082826103ac9190612033565b67ffffffffffffffff8111156103c5576103c4612067565b5b6040519080825280602002602001820160405280156103fe57816020015b6103eb611877565b8152602001906001900390816103e35790505b50905060008390505b82811015610636576101f660006101f7838154811061042957610428612096565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610490906120f4565b80601f01602080910402602001604051908101604052809291908181526020018280546104bc906120f4565b80156105095780601f106104de57610100808354040283529160200191610509565b820191906000526020600020905b8154815290600101906020018083116104ec57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610578906120f4565b80601f01602080910402602001604051908101604052809291908181526020018280546105a4906120f4565b80156105f15780601f106105c6576101008083540402835291602001916105f1565b820191906000526020600020905b8154815290600101906020018083116105d457829003601f168201915b5050505050815250508285836106079190612033565b8151811061061857610617612096565b5b6020026020010181905250808061062e90612125565b915050610407565b5080935050505092915050565b600181565b60006101f780549050905090565b61065e610eb9565b6106686000610f37565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102296020528060005260406000206000915054906101000a900460ff1681565b6106bc610eb9565b806101f660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081816106f1919061274f565b9050506101f78290806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b600080600090505b6101f7805490508110156107db578267ffffffffffffffff166101f7828154811061078557610784612096565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16036107c85760019150506107e1565b80806107d390612125565b915050610757565b50600090505b919050565b6101f56020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff166101f660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c7906127e0565b60405180910390fd5b61096786868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ffb565b61097686868686868633611114565b5060016101f560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a8c86868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611400565b505050505050565b610a9c611877565b610aa58261074f565b610ae4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adb9061284c565b60405180910390fd5b6101f660008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806060016040529081600082018054610b27906120f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b53906120f4565b8015610ba05780601f10610b7557610100808354040283529160200191610ba0565b820191906000526020600020905b815481529060010190602001808311610b8357829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610c0f906120f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3b906120f4565b8015610c885780601f10610c5d57610100808354040283529160200191610c88565b820191906000526020600020905b815481529060010190602001808311610c6b57829003601f168201915b5050505050815250509050919050565b6102286020528060005260406000206000915090505481565b610cb9610eb9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f906128de565b60405180910390fd5b610d3181610f37565b50565b610d3c610eb9565b610d4682826106b4565b7febf5fc5d525575febff148871346e1458de02c705c900ba0bc9b5361d5eba08a82828060400190610d78919061253f565b846020016020810190610d8b9190612913565b858060000190610d9b919061217c565b604051610dad969594939291906129c9565b60405180910390a1610dbe82611693565b5050565b60008060008411610e08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dff90612a6c565b60405180910390fd5b82841115610e4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4290612ad8565b60405180910390fd5b858510610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8490612b44565b60405180910390fd5b60008486610e9b9190612b64565b905086811115610ea9578690505b8581925092505094509492505050565b610ec1611696565b73ffffffffffffffffffffffffffffffffffffffff16610edf61066a565b73ffffffffffffffffffffffffffffffffffffffff1614610f35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2c90612be4565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611097838373ffffffffffffffffffffffffffffffffffffffff1663b16a394f6040518163ffffffff1660e01b815260040161103890612c50565b602060405180830381865afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110799190612c85565b8151811061108a57611089612096565b5b602002602001015161169e565b90508073ffffffffffffffffffffffffffffffffffffffff166110b8611696565b73ffffffffffffffffffffffffffffffffffffffff161461110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110590612d24565b60405180910390fd5b50505050565b6000806101f660008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461115a906120f4565b80601f0160208091040260200160405190810160405280929190818152602001828054611186906120f4565b80156111d35780601f106111a8576101008083540402835291602001916111d3565b820191906000526020600020905b8154815290600101906020018083116111b657829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054611242906120f4565b80601f016020809104026020016040519081016040528092919081815260200182805461126e906120f4565b80156112bb5780601f10611290576101008083540402835291602001916112bb565b820191906000526020600020905b81548152906001019060200180831161129e57829003601f168201915b50505050508152505090506000635307e79f60e01b90506000818a8a8a8a8a88604001516040516020016112f496959493929190612ec7565b6040516020818303038152906040528660405160200161131693929190612ffd565b6040516020818303038152906040529050600080846020015173ffffffffffffffffffffffffffffffffffffffff16836040516113539190613036565b6000604051808303816000865af19150503d8060008114611390576040519150601f19603f3d011682016040523d82523d6000602084013e611395565b606091505b5091509150816113ed576000815111156113b25780518082602001fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e4906130bf565b60405180910390fd5b8195505050505050979650505050505050565b600167ffffffffffffffff168367ffffffffffffffff1614801561146b57506000610228600061142e611696565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b6114aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a190613151565b60405180910390fd5b6000826001815181106114c0576114bf612096565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff16610227600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611581575060006102286000611544611696565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1561168d5760016102296000611595611696565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508061022860006115f4611696565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061163a611696565b610227600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50505050565b50565b600033905090565b60006116b96116b46116af846116c0565b61180c565b611869565b9050919050565b600081905060087eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff8216901b60087fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff008316901c17905060107dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff8216901b60107fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00008316901c17905060207bffffffff00000000ffffffff00000000ffffffff00000000ffffffff8216901b60207fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008316901c179050604077ffffffffffffffff0000000000000000ffffffffffffffff8216901b60407fffffffffffffffff0000000000000000ffffffffffffffff00000000000000008316901c179050608081901b608082901c179050919050565b6060602067ffffffffffffffff81111561182957611828612067565b5b6040519080825280601f01601f19166020018201604052801561185b5781602001600182028036833780820191505090505b509050816020820152919050565b600060148201519050919050565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6000819050919050565b6118c1816118ae565b82525050565b60006020820190506118dc60008301846118b8565b92915050565b600080fd5b600080fd5b6118f5816118ae565b811461190057600080fd5b50565b600081359050611912816118ec565b92915050565b60006020828403121561192e5761192d6118e2565b5b600061193c84828501611903565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061197082611945565b9050919050565b61198081611965565b82525050565b600060208201905061199b6000830184611977565b92915050565b600080604083850312156119b8576119b76118e2565b5b60006119c685828601611903565b92505060206119d785828601611903565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a47578082015181840152602081019050611a2c565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a6f82611a0d565b611a798185611a18565b9350611a89818560208601611a29565b611a9281611a53565b840191505092915050565b6000819050919050565b6000611ac2611abd611ab884611945565b611a9d565b611945565b9050919050565b6000611ad482611aa7565b9050919050565b6000611ae682611ac9565b9050919050565b611af681611adb565b82525050565b600081519050919050565b600082825260208201905092915050565b6000611b2382611afc565b611b2d8185611b07565b9350611b3d818560208601611a29565b611b4681611a53565b840191505092915050565b60006060830160008301518482036000860152611b6e8282611a64565b9150506020830151611b836020860182611aed565b5060408301518482036040860152611b9b8282611b18565b9150508091505092915050565b6000611bb48383611b51565b905092915050565b6000602082019050919050565b6000611bd4826119e1565b611bde81856119ec565b935083602082028501611bf0856119fd565b8060005b85811015611c2c5784840389528151611c0d8582611ba8565b9450611c1883611bbc565b925060208a01995050600181019050611bf4565b50829750879550505050505092915050565b60006020820190508181036000830152611c588184611bc9565b905092915050565b600067ffffffffffffffff82169050919050565b611c7d81611c60565b82525050565b6000602082019050611c986000830184611c74565b92915050565b611ca781611965565b8114611cb257600080fd5b50565b600081359050611cc481611c9e565b92915050565b600060208284031215611ce057611cdf6118e2565b5b6000611cee84828501611cb5565b91505092915050565b60008115159050919050565b611d0c81611cf7565b82525050565b6000602082019050611d276000830184611d03565b92915050565b611d3681611c60565b8114611d4157600080fd5b50565b600081359050611d5381611d2d565b92915050565b600080fd5b600060608284031215611d7457611d73611d59565b5b81905092915050565b60008060408385031215611d9457611d936118e2565b5b6000611da285828601611d44565b925050602083013567ffffffffffffffff811115611dc357611dc26118e7565b5b611dcf85828601611d5e565b9150509250929050565b600060208284031215611def57611dee6118e2565b5b6000611dfd84828501611d44565b91505092915050565b60008060408385031215611e1d57611e1c6118e2565b5b6000611e2b85828601611cb5565b9250506020611e3c85828601611d44565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e6b57611e6a611e46565b5b8235905067ffffffffffffffff811115611e8857611e87611e4b565b5b602083019150836020820283011115611ea457611ea3611e50565b5b9250929050565b600081905082602060020282011115611ec757611ec6611e50565b5b92915050565b600081905082604060020282011115611ee957611ee8611e50565b5b92915050565b6000806000806000806101408789031215611f0d57611f0c6118e2565b5b6000611f1b89828a01611d44565b965050602087013567ffffffffffffffff811115611f3c57611f3b6118e7565b5b611f4889828a01611e55565b95509550506040611f5b89828a01611eab565b9350506080611f6c89828a01611ecd565b925050610100611f7e89828a01611eab565b9150509295509295509295565b60006060830160008301518482036000860152611fa88282611a64565b9150506020830151611fbd6020860182611aed565b5060408301518482036040860152611fd58282611b18565b9150508091505092915050565b60006020820190508181036000830152611ffc8184611f8b565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061203e826118ae565b9150612049836118ae565b925082820390508181111561206157612060612004565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061210c57607f821691505b60208210810361211f5761211e6120c5565b5b50919050565b6000612130826118ae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361216257612161612004565b5b600182019050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126121995761219861216d565b5b80840192508235915067ffffffffffffffff8211156121bb576121ba612172565b5b6020830192506001820236038313156121d7576121d6612177565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261224c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261220f565b612256868361220f565b95508019841693508086168417925050509392505050565b600061228961228461227f846118ae565b611a9d565b6118ae565b9050919050565b6000819050919050565b6122a38361226e565b6122b76122af82612290565b84845461221c565b825550505050565b600090565b6122cc6122bf565b6122d781848461229a565b505050565b5b818110156122fb576122f06000826122c4565b6001810190506122dd565b5050565b601f82111561234057612311816121ea565b61231a846121ff565b81016020851015612329578190505b61233d612335856121ff565b8301826122dc565b50505b505050565b600082821c905092915050565b600061236360001984600802612345565b1980831691505092915050565b600061237c8383612352565b9150826002028217905092915050565b61239683836121df565b67ffffffffffffffff8111156123af576123ae612067565b5b6123b982546120f4565b6123c48282856122ff565b6000601f8311600181146123f357600084156123e1578287013590505b6123eb8582612370565b865550612453565b601f198416612401866121ea565b60005b8281101561242957848901358255600182019150602085019450602081019050612404565b868310156124465784890135612442601f891682612352565b8355505b6001600288020188555050505b50505050505050565b61246783838361238c565b505050565b600061247782611965565b9050919050565b6124878161246c565b811461249257600080fd5b50565b600081356124a28161247e565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6124d8846124ab565b9350801983169250808416831791505092915050565b60006124f982611aa7565b9050919050565b600061250b826124ee565b9050919050565b6000819050919050565b61252582612500565b61253861253182612512565b83546124b8565b8255505050565b6000808335600160200384360303811261255c5761255b61216d565b5b80840192508235915067ffffffffffffffff82111561257e5761257d612172565b5b60208301925060018202360383131561259a57612599612177565b5b509250929050565b600082905092915050565b60008190508160005260206000209050919050565b601f821115612603576125d4816125ad565b6125dd846121ff565b810160208510156125ec578190505b6126006125f8856121ff565b8301826122dc565b50505b505050565b61261283836125a2565b67ffffffffffffffff81111561262b5761262a612067565b5b61263582546120f4565b6126408282856125c2565b6000601f83116001811461266f576000841561265d578287013590505b6126678582612370565b8655506126cf565b601f19841661267d866125ad565b60005b828110156126a557848901358255600182019150602085019450602081019050612680565b868310156126c257848901356126be601f891682612352565b8355505b6001600288020188555050505b50505050505050565b6126e3838383612608565b505050565b60008101600083016126fa818561217c565b61270581838661245c565b5050505060018101602083018061271b81612495565b9050612727818461251c565b505050600281016040830161273c818561253f565b6127478183866126d8565b505050505050565b61275982826126e8565b5050565b600082825260208201905092915050565b7f76616c696461746f72206973206e6f742073657420666f72207468697320726560008201527f7175657374206964000000000000000000000000000000000000000000000000602082015250565b60006127ca60288361275d565b91506127d58261276e565b604082019050919050565b600060208201905081810360008301526127f9816127bd565b9050919050565b7f7265717565737420696420646f65736e27742065786973740000000000000000600082015250565b600061283660188361275d565b915061284182612800565b602082019050919050565b6000602082019050818103600083015261286581612829565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006128c860268361275d565b91506128d38261286c565b604082019050919050565b600060208201905081810360008301526128f7816128bb565b9050919050565b60008135905061290d8161247e565b92915050565b600060208284031215612929576129286118e2565b5b6000612937848285016128fe565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b600061296c8385612940565b9350612979838584612951565b61298283611a53565b840190509392505050565b61299681611adb565b82525050565b60006129a8838561275d565b93506129b5838584612951565b6129be83611a53565b840190509392505050565b60006080820190506129de6000830189611c74565b81810360208301526129f1818789612960565b9050612a00604083018661298d565b8181036060830152612a1381848661299c565b9050979650505050505050565b7f4c656e6774682073686f756c642062652067726561746572207468616e203000600082015250565b6000612a56601f8361275d565b9150612a6182612a20565b602082019050919050565b60006020820190508181036000830152612a8581612a49565b9050919050565b7f4c656e677468206c696d69742065786365656465640000000000000000000000600082015250565b6000612ac260158361275d565b9150612acd82612a8c565b602082019050919050565b60006020820190508181036000830152612af181612ab5565b9050919050565b7f537461727420696e646578206f7574206f6620626f756e647300000000000000600082015250565b6000612b2e60198361275d565b9150612b3982612af8565b602082019050919050565b60006020820190508181036000830152612b5d81612b21565b9050919050565b6000612b6f826118ae565b9150612b7a836118ae565b9250828201905080821115612b9257612b91612004565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bce60208361275d565b9150612bd982612b98565b602082019050919050565b60006020820190508181036000830152612bfd81612bc1565b9050919050565b7f6368616c6c656e67650000000000000000000000000000000000000000000000600082015250565b6000612c3a60098361275d565b9150612c4582612c04565b602082019050919050565b60006020820190508181036000830152612c6981612c2d565b9050919050565b600081519050612c7f816118ec565b92915050565b600060208284031215612c9b57612c9a6118e2565b5b6000612ca984828501612c70565b91505092915050565b7f6164647265737320696e2070726f6f66206973206e6f7420612073656e64657260008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b6000612d0e60288361275d565b9150612d1982612cb2565b604082019050919050565b60006020820190508181036000830152612d3d81612d01565b9050919050565b600082825260208201905092915050565b600080fd5b82818337505050565b6000612d6f8385612d44565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612da257612da1612d55565b5b602083029250612db3838584612d5a565b82840190509392505050565b612dcb60408383612d5a565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b612dfb60408383612d5a565b5050565b6000612e0b8383612def565b60408301905092915050565b600082905092915050565b6000604082019050919050565b612e3881612dcf565b612e428184612dda565b9250612e4d82612de5565b8060005b83811015612e8657612e638284612e17565b612e6d8782612dff565b9650612e7883612e22565b925050600181019050612e51565b505050505050565b6000612e9982611afc565b612ea38185612940565b9350612eb3818560208601611a29565b612ebc81611a53565b840191505092915050565b6000610140820190508181036000830152612ee381888a612d63565b9050612ef26020830187612dbf565b612eff6060830186612e2f565b612f0c60e0830185612dbf565b818103610120830152612f1f8184612e8e565b9050979650505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b612f73612f6e82612f2c565b612f58565b82525050565b600081905092915050565b6000612f8f82611afc565b612f998185612f79565b9350612fa9818560208601611a29565b80840191505092915050565b60008160601b9050919050565b6000612fcd82612fb5565b9050919050565b6000612fdf82612fc2565b9050919050565b612ff7612ff282611965565b612fd4565b82525050565b60006130098286612f62565b6004820191506130198285612f84565b91506130258284612fe6565b601482019150819050949350505050565b60006130428284612f84565b915081905092915050565b7f4661696c656420746f207665726966792070726f6f6620776974686f7574207260008201527f657665727420726561736f6e0000000000000000000000000000000000000000602082015250565b60006130a9602c8361275d565b91506130b48261304d565b604082019050919050565b600060208201905081810360008301526130d88161309c565b9050919050565b7f70726f6f662063616e206e6f74206265207375626d6974746564206d6f72652060008201527f7468616e206f6e63650000000000000000000000000000000000000000000000602082015250565b600061313b60298361275d565b9150613146826130df565b604082019050919050565b6000602082019050818103600083015261316a8161312e565b905091905056fea2646970667358221220219102f73dc232072d179c7d0141aa50b76089749bae78223d5981d40d944ad864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setNexeraZKPRequest(uint64,(string,address,bytes))": {
        "params": {
          "request": "The ZKP request data.",
          "requestId": "The ID of the request to be set."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "SimpleWhitelist",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setNexeraZKPRequest(uint64,(string,address,bytes))": {
        "notice": "Sets a Nexera ZKP request and emits an event."
      }
    },
    "notice": "This example contract implements a simple whitelist mechanism using Zero-Knowledge Proofs (ZKPs).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3443,
        "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2389,
        "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
        "label": "__gap_before",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)500_storage"
      },
      {
        "astId": 2395,
        "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
        "label": "proofs",
        "offset": 0,
        "slot": "501",
        "type": "t_mapping(t_address,t_mapping(t_uint64,t_bool))"
      },
      {
        "astId": 2400,
        "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
        "label": "_requests",
        "offset": 0,
        "slot": "502",
        "type": "t_mapping(t_uint64,t_struct(ZKPRequest)1422_storage)"
      },
      {
        "astId": 2403,
        "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
        "label": "_requestIds",
        "offset": 0,
        "slot": "503",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 2407,
        "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
        "label": "__gap_after",
        "offset": 0,
        "slot": "504",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 7668,
        "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
        "label": "idToAddress",
        "offset": 0,
        "slot": "551",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7672,
        "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
        "label": "addressToId",
        "offset": 0,
        "slot": "552",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7676,
        "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
        "label": "whitelist",
        "offset": 0,
        "slot": "553",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)500_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[500]",
        "numberOfBytes": "16000"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICircuitValidator)1237": {
        "encoding": "inplace",
        "label": "contract ICircuitValidator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint64,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint64 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_struct(ZKPRequest)1422_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct IZKPVerifier.ZKPRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(ZKPRequest)1422_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ZKPRequest)1422_storage": {
        "encoding": "inplace",
        "label": "struct IZKPVerifier.ZKPRequest",
        "members": [
          {
            "astId": 1416,
            "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1419,
            "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
            "label": "validator",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ICircuitValidator)1237"
          },
          {
            "astId": 1421,
            "contract": "contracts/SimpleWhitelist.sol:SimpleWhitelist",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
