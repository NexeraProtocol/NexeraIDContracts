/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: "ICircuitValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICircuitValidator__factory>;
    getContractFactory(
      name: "IState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IState__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IZKPVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZKPVerifier__factory>;
    getContractFactory(
      name: "PoseidonFacade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonFacade__factory>;
    getContractFactory(
      name: "PoseidonUnit1L",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonUnit1L__factory>;
    getContractFactory(
      name: "PoseidonUnit2L",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonUnit2L__factory>;
    getContractFactory(
      name: "PoseidonUnit3L",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonUnit3L__factory>;
    getContractFactory(
      name: "PoseidonUnit4L",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonUnit4L__factory>;
    getContractFactory(
      name: "PoseidonUnit5L",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonUnit5L__factory>;
    getContractFactory(
      name: "PoseidonUnit6L",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonUnit6L__factory>;
    getContractFactory(
      name: "SpongePoseidon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpongePoseidon__factory>;
    getContractFactory(
      name: "ZKPVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZKPVerifier__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Verifier__factory>;
    getContractFactory(
      name: "INexeraVerifierEntrypoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INexeraVerifierEntrypoint__factory>;
    getContractFactory(
      name: "IScenarioVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScenarioVerifier__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "NexeraVerifierEntrypoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NexeraVerifierEntrypoint__factory>;
    getContractFactory(
      name: "ProxyAavePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAavePool__factory>;
    getContractFactory(
      name: "ProxyAavePoolIsEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAavePoolIsEntryPoint__factory>;
    getContractFactory(
      name: "ScenarioVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ScenarioVerifier__factory>;
    getContractFactory(
      name: "SimpleWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleWhitelist__factory>;
    getContractFactory(
      name: "CredentialAtomicQueryMTPValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CredentialAtomicQueryMTPValidator__factory>;
    getContractFactory(
      name: "CredentialAtomicQuerySigValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CredentialAtomicQuerySigValidator__factory>;
    getContractFactory(
      name: "CredentialAtomicQueryValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CredentialAtomicQueryValidator__factory>;
    getContractFactory(
      name: "VerifierMTP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierMTP__factory>;
    getContractFactory(
      name: "VerifierMTPWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierMTPWrapper__factory>;
    getContractFactory(
      name: "VerifierSig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierSig__factory>;
    getContractFactory(
      name: "VerifierSigWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierSigWrapper__factory>;
    getContractFactory(
      name: "NexeraZKPVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NexeraZKPVerifier__factory>;

    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: "ICircuitValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICircuitValidator>;
    getContractAt(
      name: "IState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IState>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IZKPVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZKPVerifier>;
    getContractAt(
      name: "PoseidonFacade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonFacade>;
    getContractAt(
      name: "PoseidonUnit1L",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonUnit1L>;
    getContractAt(
      name: "PoseidonUnit2L",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonUnit2L>;
    getContractAt(
      name: "PoseidonUnit3L",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonUnit3L>;
    getContractAt(
      name: "PoseidonUnit4L",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonUnit4L>;
    getContractAt(
      name: "PoseidonUnit5L",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonUnit5L>;
    getContractAt(
      name: "PoseidonUnit6L",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonUnit6L>;
    getContractAt(
      name: "SpongePoseidon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SpongePoseidon>;
    getContractAt(
      name: "ZKPVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZKPVerifier>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Verifier>;
    getContractAt(
      name: "INexeraVerifierEntrypoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INexeraVerifierEntrypoint>;
    getContractAt(
      name: "IScenarioVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScenarioVerifier>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "NexeraVerifierEntrypoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NexeraVerifierEntrypoint>;
    getContractAt(
      name: "ProxyAavePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAavePool>;
    getContractAt(
      name: "ProxyAavePoolIsEntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAavePoolIsEntryPoint>;
    getContractAt(
      name: "ScenarioVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ScenarioVerifier>;
    getContractAt(
      name: "SimpleWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleWhitelist>;
    getContractAt(
      name: "CredentialAtomicQueryMTPValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CredentialAtomicQueryMTPValidator>;
    getContractAt(
      name: "CredentialAtomicQuerySigValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CredentialAtomicQuerySigValidator>;
    getContractAt(
      name: "CredentialAtomicQueryValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CredentialAtomicQueryValidator>;
    getContractAt(
      name: "VerifierMTP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierMTP>;
    getContractAt(
      name: "VerifierMTPWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierMTPWrapper>;
    getContractAt(
      name: "VerifierSig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierSig>;
    getContractAt(
      name: "VerifierSigWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierSigWrapper>;
    getContractAt(
      name: "NexeraZKPVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NexeraZKPVerifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
