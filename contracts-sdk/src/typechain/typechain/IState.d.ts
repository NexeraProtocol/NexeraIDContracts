/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IStateInterface extends ethers.utils.Interface {
  functions: {
    "getDefaultIdType()": FunctionFragment;
    "getGISTRootInfo(uint256)": FunctionFragment;
    "getStateInfoById(uint256)": FunctionFragment;
    "getStateInfoByIdAndState(uint256,uint256)": FunctionFragment;
    "idExists(uint256)": FunctionFragment;
    "stateExists(uint256,uint256)": FunctionFragment;
    "transitState(uint256,uint256,uint256,bool,uint256[2],uint256[2][2],uint256[2])": FunctionFragment;
    "transitStateGeneric(uint256,uint256,uint256,bool,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDefaultIdType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGISTRootInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateInfoById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateInfoByIdAndState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateExists",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transitState",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transitStateGeneric",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDefaultIdType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGISTRootInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateInfoById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateInfoByIdAndState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitStateGeneric",
    data: BytesLike
  ): Result;

  events: {};
}

export class IState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStateInterface;

  functions: {
    getDefaultIdType(overrides?: CallOverrides): Promise<[string]>;

    getGISTRootInfo(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          root: BigNumber;
          replacedByRoot: BigNumber;
          createdAtTimestamp: BigNumber;
          replacedAtTimestamp: BigNumber;
          createdAtBlock: BigNumber;
          replacedAtBlock: BigNumber;
        }
      ]
    >;

    getStateInfoById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          state: BigNumber;
          replacedByState: BigNumber;
          createdAtTimestamp: BigNumber;
          replacedAtTimestamp: BigNumber;
          createdAtBlock: BigNumber;
          replacedAtBlock: BigNumber;
        }
      ]
    >;

    getStateInfoByIdAndState(
      id: BigNumberish,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          state: BigNumber;
          replacedByState: BigNumber;
          createdAtTimestamp: BigNumber;
          replacedAtTimestamp: BigNumber;
          createdAtBlock: BigNumber;
          replacedAtBlock: BigNumber;
        }
      ]
    >;

    idExists(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    stateExists(
      id: BigNumberish,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transitState(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transitStateGeneric(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      methodId: BigNumberish,
      methodParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getDefaultIdType(overrides?: CallOverrides): Promise<string>;

  getGISTRootInfo(
    root: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      root: BigNumber;
      replacedByRoot: BigNumber;
      createdAtTimestamp: BigNumber;
      replacedAtTimestamp: BigNumber;
      createdAtBlock: BigNumber;
      replacedAtBlock: BigNumber;
    }
  >;

  getStateInfoById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      state: BigNumber;
      replacedByState: BigNumber;
      createdAtTimestamp: BigNumber;
      replacedAtTimestamp: BigNumber;
      createdAtBlock: BigNumber;
      replacedAtBlock: BigNumber;
    }
  >;

  getStateInfoByIdAndState(
    id: BigNumberish,
    state: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      state: BigNumber;
      replacedByState: BigNumber;
      createdAtTimestamp: BigNumber;
      replacedAtTimestamp: BigNumber;
      createdAtBlock: BigNumber;
      replacedAtBlock: BigNumber;
    }
  >;

  idExists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  stateExists(
    id: BigNumberish,
    state: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transitState(
    id: BigNumberish,
    oldState: BigNumberish,
    newState: BigNumberish,
    isOldStateGenesis: boolean,
    a: [BigNumberish, BigNumberish],
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transitStateGeneric(
    id: BigNumberish,
    oldState: BigNumberish,
    newState: BigNumberish,
    isOldStateGenesis: boolean,
    methodId: BigNumberish,
    methodParams: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getDefaultIdType(overrides?: CallOverrides): Promise<string>;

    getGISTRootInfo(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: BigNumber;
        replacedByRoot: BigNumber;
        createdAtTimestamp: BigNumber;
        replacedAtTimestamp: BigNumber;
        createdAtBlock: BigNumber;
        replacedAtBlock: BigNumber;
      }
    >;

    getStateInfoById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        state: BigNumber;
        replacedByState: BigNumber;
        createdAtTimestamp: BigNumber;
        replacedAtTimestamp: BigNumber;
        createdAtBlock: BigNumber;
        replacedAtBlock: BigNumber;
      }
    >;

    getStateInfoByIdAndState(
      id: BigNumberish,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        state: BigNumber;
        replacedByState: BigNumber;
        createdAtTimestamp: BigNumber;
        replacedAtTimestamp: BigNumber;
        createdAtBlock: BigNumber;
        replacedAtBlock: BigNumber;
      }
    >;

    idExists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    stateExists(
      id: BigNumberish,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transitState(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    transitStateGeneric(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      methodId: BigNumberish,
      methodParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getDefaultIdType(overrides?: CallOverrides): Promise<BigNumber>;

    getGISTRootInfo(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateInfoById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateInfoByIdAndState(
      id: BigNumberish,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idExists(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stateExists(
      id: BigNumberish,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transitState(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transitStateGeneric(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      methodId: BigNumberish,
      methodParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDefaultIdType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGISTRootInfo(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateInfoById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateInfoByIdAndState(
      id: BigNumberish,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idExists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateExists(
      id: BigNumberish,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transitState(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transitStateGeneric(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      methodId: BigNumberish,
      methodParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
