/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ZKPVerifier, ZKPVerifierInterface } from "../ZKPVerifier";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "REQUESTS_RETURN_LIMIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
    ],
    name: "getZKPRequest",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "contract ICircuitValidator",
            name: "validator",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IZKPVerifier.ZKPRequest",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "startIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "getZKPRequests",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "contract ICircuitValidator",
            name: "validator",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IZKPVerifier.ZKPRequest[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getZKPRequestsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
    ],
    name: "requestIdExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "contract ICircuitValidator",
            name: "validator",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IZKPVerifier.ZKPRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "setZKPRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "requestId",
        type: "uint64",
      },
      {
        internalType: "uint256[]",
        name: "inputs",
        type: "uint256[]",
      },
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
    ],
    name: "submitZKPResponse",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a361122790816100618239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c80631905e7b1146100ef5780635f9e60d7146100e65780636508e1b4146100dd578063715018a6146100d45780638da5cb5b146100cb5780639f5223e0146100c2578063ab7bcfb7146100b9578063b45c0fdf146100b0578063b68967e2146100a7578063c76d08451461009e5763f2fde38b1461009657600080fd5b61000e6107df565b5061000e610740565b5061000e6106ae565b5061000e610611565b5061000e6105d2565b5061000e61042d565b5061000e6103ed565b5061000e61038b565b5061000e61036b565b5061000e6101f6565b503461000e57600036600319011261000e5760206040516103e88152f35b60005b8381106101205750506000910152565b8181015183820152602001610110565b906020916101498151809281855285808601910161010d565b601f01601f1916010190565b61019191604061016e8351606084526060840190610130565b9260018060a01b0360208201511660208401520151906040818403910152610130565b90565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106101c85750505050505090565b90919293949584806101e6600193603f198682030187528a51610155565b98019301930191949392906101b8565b503461000e57604036600319011261000e576004356024356101f754908015610326576103e881116102e95761023790610231838510611144565b8361118c565b908082116102e1575b5061025361024e83836110bb565b6110d2565b91805b82811061026f576040518061026b8682610194565b0390f35b806102d66102b26102986102856102dc95610f97565b90546001600160401b039160031b1c1690565b6001600160401b03166000526101f6602052604060002090565b6102c56102bf86856110bb565b91610b5f565b6102cf8289611122565b5286611122565b50611050565b610256565b905038610240565b60405162461bcd60e51b815260206004820152601560248201527413195b99dd1a081b1a5b5a5d08195e18d959591959605a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4c656e6774682073686f756c642062652067726561746572207468616e2030006044820152606490fd5b503461000e57600036600319011261000e5760206101f754604051908152f35b503461000e576000806003193601126103ea576103a6611199565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b600435906001600160401b038216820361000e57565b503461000e5760031960403682011261000e57610448610417565b602435916001600160401b039081841161000e5760608460040191853603011261000e57610474611199565b60009382841685526020926101f6845260408620936104938480610e1b565b9283116105c5575b6104af836104a98854610a8f565b88610e4d565b8791601f841160011461054557509360446002948461053599989561052795610530998d9261053a575b50508160011b916000199060031b1c19161785555b6105206104fd60248301610ea1565b6001870180546001600160a01b0319166001600160a01b03909216919091179055565b0190610e1b565b92909101610eab565b610fc9565b604051f35b0135905038806104d9565b91601f19841661055a88600052602060002090565b938a905b8282106105ad575050946001856105279561053099956044956105359d9c9960029b10610593575b505050811b0185556104ee565b0135600019600384901b60f8161c19169055388080610586565b8060018597829496880135815501960193019061055e565b6105cd6108ac565b61049b565b503461000e57602036600319011261000e5760206105f66105f1610417565b61106c565b6040519015158152f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e5760043561062f81610600565b6024356001600160401b038116810361000e5761067860ff9160209360018060a01b03166000526101f584526040600020906001600160401b0316600052602052604060002090565b54166040519015158152f35b9060449160841161000e57565b90610104916101441161000e57565b906084916101041161000e57565b503461000e5761014036600319011261000e576106c9610417565b6024356001600160401b039182821161000e573660238301121561000e57816004013592831161000e573660248460051b8401011161000e5761072d9261070f36610684565b90610719366106a0565b92602461072536610691565b950190610980565b005b906020610191928181520190610155565b503461000e57602036600319011261000e5761075a610417565b610762610dfb565b5061076c8161106c565b1561079f576001600160401b03166000526101f660205261026b6107936040600020610b5f565b6040519182918261072f565b60405162461bcd60e51b81526020600482015260186024820152771c995c5d595cdd081a5908191bd95cdb89dd08195e1a5cdd60421b6044820152606490fd5b503461000e57602036600319011261000e576004356107fd81610600565b610805611199565b6001600160a01b0390811690811561085857600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b038211176108de57604052565b6108e66108ac565b604052565b90601f801991011681019081106001600160401b038211176108de57604052565b6020906001600160401b038111610925575b60051b0190565b61092d6108ac565b61091e565b929161093d8261090c565b9161094b60405193846108eb565b829481845260208094019160051b810192831161000e57905b8282106109715750505050565b81358152908301908301610964565b9093949192946001600160401b0382166000526101f660205260018060a01b036001604060002001541615610a3957610a3695610a2e936109f0926109d9856001600160401b03166000526101f6602052604060002090565b506109e536888a610932565b503392878987610cda565b503360009081526101f56020526040902061029890610a2190836001600160401b0316600052602052604060002090565b805460ff19166001179055565b503691610932565b50565b60405162461bcd60e51b815260206004820152602860248201527f76616c696461746f72206973206e6f742073657420666f7220746869732072656044820152671c5d595cdd081a5960c21b6064820152608490fd5b90600182811c92168015610abf575b6020831014610aa957565b634e487b7160e01b600052602260045260246000fd5b91607f1691610a9e565b9060009291805491610ada83610a8f565b918282526001938481169081600014610b3c5750600114610afc575b50505050565b90919394506000526020928360002092846000945b838610610b28575050505001019038808080610af6565b805485870183015294019385908201610b11565b9294505050602093945060ff191683830152151560051b01019038808080610af6565b90600260408051610b6f816108c3565b610bb881958351610b8b81610b848185610ac9565b03826108eb565b835260018101546001600160a01b031660208401528351948591610bb191839101610ac9565b03846108eb565b0152565b60409137565b6101408082528101839052939695949093916001600160fb1b03811161000e5760059793971b80610160958685013782019260408098602085013796600090606084015b60028310610c3757505050610191959650610c259060e0830190610bbc565b61012083828403019101520190610130565b818082818d60019537019a0192019198610c06565b9060189291635307e79f60e01b8152610c6f82518093602060048501910161010d565b01906bffffffffffffffffffffffff199060601b1660048201520190565b3d15610cd5573d906001600160401b038211610cc8575b60405191610cbc601f8201601f1916602001846108eb565b82523d6000602084013e565b610cd06108ac565b610ca4565b606090565b6020610d5595610d61600099610d7b95610d318c9b998c999a610d1c610d17610d6f9a6001600160401b03166000526101f6602052604060002090565b610b5f565b966040880151926040519d8e968b8801610bc2565b0390610d45601f19928381018b528a6108eb565b604051998a918683019a8b610c4c565b039081018952886108eb565b01516001600160a01b031690565b6001600160a01b031690565b9251925af1610d88610c8d565b8115610d92575090565b805115610da157805190602001fd5b60405162461bcd60e51b815260206004820152602c60248201527f4661696c656420746f207665726966792070726f6f6620776974686f7574207260448201526b32bb32b93a103932b0b9b7b760a11b6064820152608490fd5b60405190610e08826108c3565b6060604083828152600060208201520152565b903590601e198136030182121561000e57018035906001600160401b03821161000e5760200191813603831361000e57565b90601f8111610e5b57505050565b600091825260208220906020601f850160051c83019410610e97575b601f0160051c01915b828110610e8c57505050565b818155600101610e80565b9092508290610e77565b3561019181610600565b9092916001600160401b038111610f73575b610ed181610ecb8454610a8f565b84610e4d565b6000601f8211600114610f0b5781929394600092610f00575b50508160011b916000199060031b1c1916179055565b013590503880610eea565b601f19821694610f2084600052602060002090565b91805b878110610f5b575083600195969710610f41575b505050811b019055565b0135600019600384901b60f8161c19169055388080610f37565b90926020600181928686013581550194019101610f23565b610f7b6108ac565b610ebd565b50634e487b7160e01b600052603260045260246000fd5b906101f78054831015610fbc575b600052601860206000208360021c019260031b1690565b610fc4610f80565b610fa5565b6101f780549190600160401b83101561102c575b6001830180825583101561101f575b60005260206000208260021c019160c083549160061b16916001600160401b039283811b93849216901b16911916179055565b611027610f80565b610fec565b6110346108ac565b610fdd565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114611060570190565b611068611039565b0190565b6101f7549060005b82811061108357505050600090565b61108c81610f97565b90546001600160401b03908185169260031b1c16146110b3576110ae90611050565b611074565b505050600190565b919082039182116110c857565b6110d0611039565b565b906110dc8261090c565b6110e960405191826108eb565b82815280926110fa601f199161090c565b019060005b82811061110b57505050565b602090611116610dfb565b828285010152016110ff565b6020918151811015611137575b60051b010190565b61113f610f80565b61112f565b1561114b57565b60405162461bcd60e51b8152602060048201526019602482015278537461727420696e646578206f7574206f6620626f756e647360381b6044820152606490fd5b919082018092116110c857565b6000546001600160a01b031633036111ad57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212203e2c694b79242a723d16e17765e5a3680a0f4a69a58c72847196a20b96b7c88064736f6c63430008100033";

export class ZKPVerifier__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ZKPVerifier> {
    return super.deploy(overrides || {}) as Promise<ZKPVerifier>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ZKPVerifier {
    return super.attach(address) as ZKPVerifier;
  }
  connect(signer: Signer): ZKPVerifier__factory {
    return super.connect(signer) as ZKPVerifier__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKPVerifierInterface {
    return new utils.Interface(_abi) as ZKPVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZKPVerifier {
    return new Contract(address, _abi, signerOrProvider) as ZKPVerifier;
  }
}
