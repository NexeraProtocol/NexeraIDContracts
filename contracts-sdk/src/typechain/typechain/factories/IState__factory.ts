/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IState, IStateInterface } from "../IState";

const _abi = [
  {
    inputs: [],
    name: "getDefaultIdType",
    outputs: [
      {
        internalType: "bytes2",
        name: "",
        type: "bytes2",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
    ],
    name: "getGISTRootInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByRoot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.GistRootInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getStateInfoById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "state",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByState",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.StateInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "state",
        type: "uint256",
      },
    ],
    name: "getStateInfoByIdAndState",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "state",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByState",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.StateInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "idExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "state",
        type: "uint256",
      },
    ],
    name: "stateExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "oldState",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newState",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isOldStateGenesis",
        type: "bool",
      },
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
    ],
    name: "transitState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "oldState",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newState",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isOldStateGenesis",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "methodId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "methodParams",
        type: "bytes",
      },
    ],
    name: "transitStateGeneric",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IState__factory {
  static readonly abi = _abi;
  static createInterface(): IStateInterface {
    return new utils.Interface(_abi) as IStateInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IState {
    return new Contract(address, _abi, signerOrProvider) as IState;
  }
}
